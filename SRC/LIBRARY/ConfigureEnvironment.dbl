;*****************************************************************************
;
; Routine:      ConfigureEnvironment
;
; Description:  Configure the SQL Replication operating environment.
;
; Author:       Steve Ives, Synergex Professional Services Group
;
; Created:      30th December 2019
;
;*****************************************************************************
;

import ReplicationLibrary
import System.Collections
import System.Text

function ConfigureEnvironment, boolean

    .include "CONNECTDIR:ssql.def"

    stack record
        ok,         boolean
        length,     int
        status,     int
        errorMessage, string
    endrecord
proc

.ifdef D_VMS
    xcall openelb("REPLICATOR_SH")
.endc

    xcall flags(7004020,1)

    ;Get settings from the environment and ReplicatorConfig.json

    ok = %GetSettings(errorMessage)

    ;Running on terminal?

    if (Settings.RunningOnTerminal)
    begin
.ifndef DBLNET
        display(Settings.TerminalChannel,$scr_pos(1,1),$scr_clr(SCREEN))
.endc
        writes(Settings.TerminalChannel,"SQL Replicator")
        writes(Settings.TerminalChannel,"")
    end

    if (!ok)
    begin
        ;GetSettings returned a failure!
        Logger.ErrorLog(errorMessage)
        if (Settings.RunningOnTerminal)
        begin
            data tmpvar, a1
            display(Settings.TerminalChannel,"Press ENTER to close: ")
            reads(Settings.TerminalChannel,tmpvar)
        end
        freturn false
    end

    ;-----------------------------------------------------------
    ;Report various configuration settings

    if (ok)
    begin
        Logger.Log("Instance name:      " + Settings.InstanceName)

        if (Settings.QueueType == MessageQueueType.IsamFile) then
            Logger.Log("Queue type:         ISAM")
        else
            Logger.Log("Queue type:         KAFKA")

        using Settings.DatabaseConnectMode select
        (DatabaseConnectionMode.SqlConnection),
            Logger.Log("Database mode:      SQL Connection")
        (DatabaseConnectionMode.SqlClient),
        begin
            Logger.Log("Database mode:      SQL Client")
            if (Settings.SqlCommandReuse) then
                Logger.Log("SQL command reuse:  YES")
            else
                Logger.Log("SQL command reuse:  NO")
        end
        endusing

        using Settings.DatabaseCommitMode select
        (DatabaseCommitMode.Automatic),
            Logger.Log("Commit mode:        AUTOMATIC")
        (DatabaseCommitMode.Batch),
        begin
            Logger.Log("Commit mode:        BATCH")
            Logger.Log("Commit batch size:  " + %string(Settings.CommitBatchSize))
        end
        (DatabaseCommitMode.Manual),
            Logger.Log("Commit mode:        MANUAL")
        endusing

        Logger.Log("Database timeout:   " + %string(Settings.DatabaseTimeout))
        Logger.Log("Bulk load timeout:  " + %string(Settings.BulkLoadTimeout))
        Logger.Log("Bulk load batch:    " + %string(Settings.BulkLoadBatchSize))

        using Settings.DataCompressionMode select
        (DatabaseDataCompression.None),
            Logger.Log("Compression:        NONE")
        (DatabaseDataCompression.Row),
            Logger.Log("Compression:        ROW")
        (DatabaseDataCompression.Page),
            Logger.Log("Compression:        PAGE")
        endusing

        Logger.Log("Sleep interval:     " + %string(Settings.SleepTime) + " seconds.")
    end

    ;For SQL Connection, check that no tables exceed the configured maximum columns

    if (ok && Settings.DatabaseConnectMode == DatabaseConnectionMode.SqlConnection)
    begin
        data tables, @ArrayList
        data table, string
        data columns = 0
        data highestColumns = 0
        data problemTables = 0

        Logger.Log("Maximum cursors:    " + %string(Settings.MaxCursors))
        Logger.Log("Maximum columns:    " + %string(Settings.MaxColumns))

        xcall GetReplicatedTables(Settings.InstanceName,tables)

        foreach table in tables
        begin
            columns=%xsubr(table+"Cols")

            if (columns > highestColumns)
                highestColumns = columns

            if (columns > Settings.MaxColumns)
                problemTables += 1
        end

        Logger.Log("Max columns found:  " + %string(highestColumns))

        if (problemTables > 0)
        begin
            if (highestColumns <= 1024) then
            begin
                Logger.Log("WARNING: Max columns raised from " + %string(Settings.MaxColumns) + " to " + %string(highestColumns))
                Settings.MaxColumns = highestColumns
            end
            else
            begin
                Logger.ErrorLog("One or more tables exceed the maximum supported column count of 1024")
                ok = false
            end
        end
    end

    ;Report the logging level

    if (ok)
    begin
        if (Settings.VerboseLogging) then
            Logger.Log("Logging level:      Verbose")
        else
            Logger.Log("Logging level:      Normal")
        Logger.Log("")
    end

    ;Open the queue file, creting it if it does not exist

    if (ok)
    begin
        using Settings.QueueType select
        (MessageQueueType.IsamFile),
        begin
            ok = %OpenQueueFile()
        end
.ifdef DBLNET
        (MessageQueueType.Kafka),
        begin
            ok = %OpenKafkaQueue()
        end
.endc
        (),
        begin
            Logger.ErrorLog("Invalid queue type")
            ok = false
        end
        endusing
    end

    ;Initialize SQL Connection

    if (ok && Settings.DatabaseConnectMode == DatabaseConnectionMode.SqlConnection)
    begin
        ;Enable the "Improve SQL statement caching for SQL Server" feature (Synergy V11)
        ;
        ;The SQLPERFORMANCESQL environment variable causes SQL Connection to use SQLDescribeParam internally
        ;to improve performance for SQL statements with I/O parameters when accessing SQL Server.
        ;
        ;This is the equivalent of using %SSC_CMD(chn,,SSQL_PERFORMANCE_SQL)
        ;
        ;Setting this environment variable will have no effect on pre V11 systems, but will enable the
        ;enhanced performance feature under V11 and later versions.
        ;
        xcall setlog("SQLPERFORMANCESQL","YES",length)

.ifdef OS_VMS
        xcall init_ssql
.else
        status = %option(48,1)
.endc
        if (%ssc_init(Settings.DatabaseChannel,Settings.MaxCursors,Settings.MaxColumns)==SSQL_FAILURE)
        begin
            Logger.ErrorLog("Failed to initialize SQL Connection")
            ok = false
        end
    end

    ;Connect to the database

    if (ok)
    begin
        ok = %DatabaseConnect
    end

.ifdef D_GUI
    ;If anything has gone wrong so far and we're running on the terminal, pause so that
    ;the user can read any error messages before the application window is removed.
    if (!ok && Settings.RunningOnTerminal)
    begin
        data tmpchr, a1
        display(Settings.TerminalChannel,13,10,"Replicator will stop - press a key: ")
        accept(Settings.TerminalChannel,tmpchr)
    end
.endc

    if (ok)
    begin
        ;Record the process ID of the running instance
        if (!Settings.RunningOnTerminal)
        begin
            data pidFileSpec, string, "REPLICATOR_LOGDIR:REPLICATOR_" + Settings.InstanceName + ".PID"
            data pidFileChannel, int

            ;Open the PID file
            try
            begin
                xcall delet(pidFileSpec)
                open(pidFileChannel=0,o:s,pidFileSpec)
.ifdef D_VMS
                writes(pidFileChannel,%hex(%jbno,4))
.else
                writes(pidFileChannel,%string(%jbno))
.endc
            end
            catch (ex)
            begin
                Logger.ErrorLog("Failed to create or write PID file! Error was " + ex.Message)
            end
            finally
            begin
                if (pidFileChannel && %chopen(pidFileChannel))
                    close pidFileChannel
            end
            endtry
        end

        ;Create a namespace to record information about Synergy data files that we have opened.
        Settings.ChannelInfo = %nspc_open(,^size(strStructureData))

        Logger.Log("--- Processing instructions ----------------------")

        ;If we're sending emails then let's record the server startup
        if (EmailSettings.CanSendEmail())
        begin
            data subject = "SQL replicator " + Settings.InstanceName  + " was started."
            data body = new string[13]
            data ix = 0

            body[ix+=1] = "Configuration:"
            body[ix+=1] = ""

            body[ix+=1] = "Log file:           " + Settings.LogFileName

            using Settings.QueueType select
            (Settings.QueueType == MessageQueueType.IsamFile),
            begin
                body[ix+=1] = "Queue type:         ISAM"
                body[ix+=1] = "Queue file:         " + Settings.QueueFileName
            end
.ifdef DBLNET
            (Settings.QueueType == MessageQueueType.Kafka),
            begin
                body[ix+=1] = "Queue type:         KAFKA"
                body[ix+=1] = "Queue topic:        " + Settings.KafkaTopicName
            end
.endc
            endusing

            using Settings.DatabaseConnectMode select
            (DatabaseConnectionMode.SqlConnection),
            begin
                body[ix+=1] = "Connection mode:    SQL Connection"
            end
            (DatabaseConnectionMode.SqlClient),
            begin
                body[ix+=1] = "Connection mode:    SQL Client"
            end
            endusing

            body[ix+=1] = "Connect string:     " + Settings.DatabaseConnectString

            body[ix+=1] = "Sleep interval:     " + %string(Settings.SleepTime) + " seconds."
            body[ix+=1] = "Database timeout:   " + %string(Settings.DatabaseTimeout)
            body[ix+=1] = "Bulk load timeout:  " + %string(Settings.BulkLoadTimeout)

            using Settings.DatabaseCommitMode select
            (DatabaseCommitMode.Automatic),
                body[ix+=1] = "Commit mode:        AUTOMATIC"
            (DatabaseCommitMode.Batch),
                body[ix+=1] = "Commit mode:        BATCH"
            (DatabaseCommitMode.Manual),
                body[ix+=1] = "Commit mode:        MANUAL"
            endusing

            body[ix+=1] = "Bulk load batch:    " + %string(Settings.BulkLoadBatchSize)

            using Settings.DataCompressionMode select
            (DatabaseDataCompression.None),
                body[ix+=1] = "Compression mode:   NONE"
            (DatabaseDataCompression.Row),
                body[ix+=1] = "Compression mode:   ROW"
            (DatabaseDataCompression.Page),
                body[ix+=1] = "Compression mode:   PAGE"
            endusing

            xcall SendEmail(subject,body,false)
        end

        ;If were writing to the system log, record the startup
        if (Settings.SystemLogging)
        begin
            data sb = new StringBuilder()
            sb.AppendLine("SQL replicator " + Settings.InstanceName + " was started")
            sb.AppendLine("Database connect string is " + Settings.DatabaseConnectString)
            sb.AppendLine("Transaction file is " + Settings.QueueFileName)
            sb.AppendLine("Log file is " + Settings.LogFileName)
            sb.AppendLine("Sleep interval is " + %string(Settings.SleepTime) + " seconds. ")

            if (Settings.StopOnError) then
            begin
                sb.AppendLine("Replicator will stop if any error is encountered")
            end
            else
            begin
                sb.AppendLine("Replicator will attempt to continue if errors are encountered")
            end

            if (EmailSettings.CanSendEmail()) then
            begin
                sb.AppendLine("Replicator is configured to send email messages to " + EmailSettings.GetRecipientsString())
                sb.AppendLine("Emails will be sent from " + EmailSettings.SenderAddress)
                sb.AppendLine("Email server is " + EmailSettings.SmtpServer)
            end
            else
            begin
            sb.AppendLine("Replicator is NOT configured to send email messages")
        end

.ifdef DBLNET
        nop
.else
        xcall syn_reportevent(D_EVENTLOG_INFORMATION_TYPE,sb.ToString())
.endc
    end
end

freturn ok

endfunction
