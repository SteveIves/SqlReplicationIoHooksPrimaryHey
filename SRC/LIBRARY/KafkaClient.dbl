;;*****************************************************************************
;;
;; Routine:     SqlClientConnect
;;
;; Description: Use SqlClient to connect to the database and configure the database environment.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Created:     29th January 2024
;;
;;*****************************************************************************
;;

.ifdef DBLNET

import Confluent.Kafka
import System.Threading

namespace replicator
    
    public class KafkaClient

        ;Define the event we will raise when we receive a message

        public delegate MessageReceivedEventHandler, boolean
            required in message, @ConsumeResult<Ignore,string>
        enddelegate
        
        public event MessageReceived, @MessageReceivedEventHandler

        private consumer, @IConsumer<Ignore,string>

        public method KafkaClient
        proc
            ;TODO: Compiler Bug. Doesn't like AutoOffsetReset = AutoOffsetReset.Earliest
            ;data conf = new ConsumerConfig()
            ;& {
            ;&  GroupId = "test-consumer-group",
            ;&  BootstrapServers = "localhost:9092",
            ;&  AutoOffsetReset = AutoOffsetReset.Earliest
            ;& }

            data conf = new ConsumerConfig()
            conf.GroupId = "ReplicationConsumers"
            conf.BootstrapServers = "localhost:9092"
            conf.AutoOffsetReset = AutoOffsetReset.Earliest
            conf.EnableAutoCommit = false

            ;Note: The AutoOffsetReset property determines the start offset in the event
            ;there are not yet any committed offsets for the consumer group for the
            ;topic/partitions of interest. By default, offsets are committed
            ;automatically, so in this example, consumption will only start from the
            ;earliest message in the topic the first time you run the program.

            try
            begin
                consumer = new ConsumerBuilder<Ignore, string>(conf).Build()
                consumer.Subscribe("ReplicationQueue")
            end
            catch (e, @Exception)
            begin
                consumer.Dispose()
            end
            endtry
        
        endmethod
        
        public method ProcessMessages, void
            endparams
        proc
            disposable data cts = new CancellationTokenSource()
            data messageProcessed = false

            lambda cancelKeyPress(s,e)
            begin
                e.Cancel = true ;Prevent the process from terminating.
                cts.Cancel()
            end

            Console.CancelKeyPress += cancelKeyPress

            try
            begin
                repeat
                begin
                    try
                    begin
                        ;Blocks until a consume result is available or the operation has been cancelled
                        data result = consumer.Consume(cts.Token)

                        ;If we get here we received a message
                        data messageBody, string, result.Value

                        ;Tell our host about the message
                        messageProcessed = MessageReceived(result)

                        ;If the host processed the message, commit it in the queue
                        if (messageProcessed)
                        begin
                            consumer.Commit()
                        end
                    end
                    catch (e, @ConsumeException)
                    begin
                        Console.WriteLine("ERROR: {0}",e.Error.Reason)
                    end
                    endtry
                end
            end
            catch (e, @Exception)
            begin
                ; Ensure the consumer leaves the group cleanly and final offsets are committed.
                consumer.Close()
                consumer.Dispose()
            end
            endtry
           
        endmethod

    endclass

endnamespace

.endc
