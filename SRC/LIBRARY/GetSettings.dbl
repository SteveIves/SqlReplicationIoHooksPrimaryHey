;;*****************************************************************************
;;
;; Routine:     GetSettings
;;
;; Description: Get settings from enmvironment variables and command line options.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Created:     30th December 2019
;;
;;*****************************************************************************
;;

import ReplicationLibrary
import System.Collections
import System.Text
import System.Text.Json

function GetSettings,   boolean
    required out errorMessage, string
    stack record
        ok,             boolean
        clValues,       @ArrayList
        length,         int
        envval,         a1024
        envlen,         i4
        doc,            @JsonDocument
.ifdef DBLNET
        instances,      JsonElement
        instance,       JsonElement
        setting,        JsonElement
        smtpsettings,   JsonElement
        emailAddress,   JsonElement
.else
        instances,      @JsonElement
        instance,       @JsonElement
        setting,        @JsonElement
        smtpsettings,   @JsonElement
        emailAddress,   @JsonElement
.endc
    endrecord
    external function
        xsubr,  ^val
    endexternal
proc
    ok = true
    errorMessage = ""

    ;Parse the JSON configuration file

    try
    begin
        doc = Settings.ParseConfigFile()
    end
    catch (e, @Exception)
    begin
        errorMessage = "Failed to parse configuration file!"
        ok = false
    end
    endtry

    ;Get the root element

    ;Validate the instances property

    if (ok)
    begin
        if (!doc.RootElement.TryGetProperty("Instances",instances)) then
        begin
            errorMessage = "Configuration must have an Instances property!"
            ok = false
        end
        else if (instances.ValueKind != JsonValueKind.Array) then
        begin
            errorMessage = "Instances must be an array!"
            ok = false
        end
        else if (instances.GetArrayLength() == 0)
        begin
            errorMessage = "Instances must contain at least one object!"
            ok = false
        end
    end

    ;Find the instance configuration for our instance name

    if (ok)
    begin
        data instanceCount = instances.GetArrayLength()
        data instanceNumber, int

        for instanceNumber from 0 thru instanceCount - 1
        begin
            instance = instances[instanceNumber]
            ;Is it our settings?
            if (!instance.TryGetProperty("InstanceName",setting)) then
            begin
                errorMessage = "Instance[" + %string(instanceNumber+1) + "] has no InstanceName!"
                ok = false
            end
            else if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "Instance[" + %string(instanceNumber+1) + "] InstanceName is not a string!"
                ok = false
            end
            else if (setting.GetString().ToUpper() != Settings.InstanceName) 
            begin
                ;Not the one we're looking for
                nextloop
            end
        end
    end

    ;We found the settings for our instance. Now process all the settings.

    ;BulkLoadBatchSize

    if (ok)
    begin
        if (instance.TryGetProperty("BulkLoadBatchSize",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1000) then
            begin
                errorMessage = "BulkLoadBatchSize must have an integer value >= 1000!"
                ok = false
            end
            else
            begin
                Settings.BulkLoadBatchSize = setting.GetInt32()
            end
        end
    end

    ;BulkLoadTimeout

    if (ok)
    begin
        if (instance.TryGetProperty("BulkLoadTimeout",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<60) then
            begin
                errorMessage = "BulkLoadTimeout must have an integer value >= 60!"
                ok = false
            end
            else
            begin
                Settings.BulkLoadTimeout = setting.GetInt32()
            end
        end
    end

    ;CommitBatchSize

    if (ok)
    begin
        if (instance.TryGetProperty("CommitBatchSize",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<100) then
            begin
                errorMessage = "CommitBatchSize must have an integervalue >= 100!"
                ok = false
            end
            else
            begin
                Settings.CommitBatchSize = setting.GetInt32()
            end
        end
    end

    ;DatabaseCommitMode

    if (ok)
    begin
        if (instance.TryGetProperty("DatabaseCommitMode",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
            begin
                ok = false
            end
            else
            begin
                using setting.GetString().ToUpper() select
                ("AUTOMATIC"),
                    Settings.DatabaseCommitMode = DatabaseCommitMode.Automatic
                ("BATCH"),
                    Settings.DatabaseCommitMode = DatabaseCommitMode.Batch
                ("MANUAL"),
                    Settings.DatabaseCommitMode = DatabaseCommitMode.Manual
                (),
                    ok = false
                endusing
            end
            if (!ok)
            begin
                errorMessage = "DatabaseCommitMode must be Automatic, Batch or Manual!"
            end
        end
    end

    ;DatabaseConnectMode

    if (ok)
    begin
        if (instance.TryGetProperty("DatabaseConnectMode",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
            begin
                errorMessage = "DatabaseConnectMode must be SqlClient (.NET only) or SqlConnection!"
                ok = false
            end
            else
            begin
                using setting.GetString().ToUpper() select
                ("SQLCONNECTION"),
                    Settings.DatabaseConnectMode = DatabaseConnectionMode.SqlConnection
                ("SQLCLIENT"),
                begin
.ifdef DBLNET
                    Settings.DatabaseConnectMode = DatabaseConnectionMode.SqlClient
.else
                    errorMessage = "DatabaseConnectMode SqlClient is only supported in .NET!"
                    ok = false
.endc
                end
                (),
                begin
                    errorMessage = "DatabaseConnectMode must be SqlClient (.NET only) or SqlConnection!"
                    ok = false
                end
                endusing
            end
        end
    end

    ;DatabaseConnectString

    if (ok)
    begin
        if (instance.TryGetProperty("DatabaseConnectString",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
            begin
                errorMessage = "DatabaseConnectString must have a non-blank string value!"
                ok = false
            end
            else
            begin
                Settings.DatabaseConnectString = setting.GetString()
            end
        end
    end

    ;DatabaseRetryDelay

    if (ok)
    begin
        if (instance.TryGetProperty("DatabaseRetryDelay",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "DatabaseRetryDelay have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.DatabaseRetryDelay = setting.GetInt32()
            end
        end
    end

    ;DatabaseRetryMax

    if (ok)
    begin
        if (instance.TryGetProperty("DatabaseRetryMax",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "DatabaseRetryMax have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.DatabaseRetryMax = setting.GetInt32()
            end
        end
    end

    ;DatabaseTimeout

    if (ok)
    begin
        if (instance.TryGetProperty("DatabaseTimeout",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "DatabaseTimeout must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.DatabaseTimeout = setting.GetInt32()
            end
        end
    end

    ;DataCompressionMode

    if (ok)
    begin
        if (instance.TryGetProperty("DataCompressionMode",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
            begin
                ok = false
            end
            else
            begin
                using setting.GetString().ToUpper() select
                ("NONE"),
                    Settings.DataCompressionMode = DatabaseDataCompression.None
                ("PAGE"),
                    Settings.DataCompressionMode = DatabaseDataCompression.Page
                ("ROW"),
                    Settings.DataCompressionMode = DatabaseDataCompression.Row
                (),
                    ok = false
                endusing
            end
        end
        if (!ok)
        begin
            errorMessage = "DataCompressionMode must be None, Page or Row!"
        end
    end

    ;Enabled

    if (ok)
    begin
        if (instance.TryGetProperty("Enabled",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "Enabled must be true or false!"
                ok = false
            end
            else
            begin
                Settings.Enabled = setting.GetBoolean()
            end
        end
    end

    ;ErrorSleepTime

    if (ok)
    begin
        if (instance.TryGetProperty("ErrorSleepTime",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetDecimal()<=0) then
            begin
                errorMessage = "ErrorSleepTime must have a positive decimal value!"
                ok = false
            end
            else
            begin
                Settings.ErrorSleepTime = setting.GetDecimal()
            end
        end
    end

    ;FileServiceHost

    if (ok)
    begin
        if (instance.TryGetProperty("FileServiceHost",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String) then
            begin
                errorMessage = "FileServiceHost must have a string value (ip address or DNS name)!"
                ok = false
            end
            else
            begin
                Settings.FileServiceHost = setting.GetString()
            end
        end
    end

    ;FileServicePort

    if (ok)
    begin
        if (instance.TryGetProperty("FileServicePort",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<=0) then
            begin
                errorMessage = "FileServicePort must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.FileServicePort = setting.GetInt32()
            end
        end
    end

    ;LocalExportPath

    if (ok)
    begin
        if (instance.TryGetProperty("LocalExportPath",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                ok = false
            end
            else if (!String.IsNullOrWhitespace(setting.GetString()))
            begin
                ;Check that we can create a file in the directory
                data tmpch, i4
                try
                begin
                    data tmpfile = setting.GetString() + %datetime + ".tmp"
                    open(tmpch=0,o,tmpfile)
                    Settings.LocalExportPath = setting.GetString()
                end
                catch (e, @Exception)
                begin
                    ok = false
                end
                finally
                begin
                    if (tmpch && %chopen(tmpch))
                        close tmpch
                end
                endtry
            end
        end
        if (!ok)
        begin
            errorMessage = "LocalExportPath must have a string value and be a valid path!"
        end
    end

    ;LogBulkLoadExceptions

    if (ok)
    begin
        if (instance.TryGetProperty("LogBulkLoadExceptions",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "LogBulkLoadExceptions must be true or false!"
                ok = false
            end
            else
            begin
                Settings.LogBulkLoadExceptions = setting.GetBoolean()
            end
        end
    end

    ;LogKeyValues

    if (ok)
    begin
        if (instance.TryGetProperty("LogKeyValues",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "LogKeyValues must be true or false!"
                ok = false
            end
            else
            begin
                Settings.LogKeyValues = setting.GetBoolean()
            end
        end
    end

    ;LogLoadProgress

    if (ok)
    begin
        if (instance.TryGetProperty("LogLoadProgress",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "LogLoadProgress must be true or false!"
                ok = false
            end
            else
            begin
                Settings.LogLoadProgress = setting.GetBoolean()
            end
        end
    end

    ;MaxColumns

    if (ok)
    begin
        if (instance.TryGetProperty("MaxColumns",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "MaxColumns must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.MaxColumns = setting.GetInt32()
            end
        end
    end

    ;MaxCursors

    if (ok)
    begin
        if (instance.TryGetProperty("MaxCursors",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "MaxCursors must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.MaxCursors = setting.GetInt32()
            end
        end
    end

    ;QueueReconnectAttempts

    if (ok)
    begin
        if (instance.TryGetProperty("QueueReconnectAttempts",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "QueueReconnectAttempts must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.QueueReconnectAttempts = setting.GetInt32()
            end
        end
    end

    ;QueueReconnectDelay

    if (ok)
    begin
        if (instance.TryGetProperty("QueueReconnectDelay",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "QueueReconnectDelay must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.QueueReconnectDelay = setting.GetInt32()
            end
        end
    end

    ;QueueType

    if (ok)
    begin
        if (instance.TryGetProperty("QueueType",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
            begin
                ok = false
            end
            else
            begin
                using setting.GetString().ToUpper() select
                ("ISAMFILE"),
                    Settings.QueueType = MessageQueueType.IsamFile
                ("KAFKA"),
.ifdef DBLNET
                    Settings.QueueType = MessageQueueType.Kafka
.else
                    ok = false
.endc
                (),
                    ok = false
                endusing
            end
        end
        if (!ok)
        begin
            errorMessage = "QueueType must be IsamFile or Kafka (.NET only)!"
        end
    end

    ;SleepTime

    if (ok)
    begin
        if (instance.TryGetProperty("SleepTime",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "SleepTime must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.SleepTime = setting.GetInt32()
            end
        end
    end

    ;StopOnError

    if (ok)
    begin
        if (instance.TryGetProperty("StopOnError",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "StopOnError must be true or false!"
                ok = false
            end
            else
            begin
                Settings.StopOnError = setting.GetBoolean()
            end
        end
    end

    ;SystemLogging

    if (ok)
    begin
        if (instance.TryGetProperty("SystemLogging",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "SystemLogging must be true or false!"
                ok = false
            end
            else
            begin
                Settings.SystemLogging = setting.GetBoolean()
            end
        end
    end

    ;VerboseLogging

    if (ok)
    begin
        if (instance.TryGetProperty("VerboseLogging",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "VerboseLogging must be true or false!"
                ok = false
            end
            else
            begin
                Settings.VerboseLogging = setting.GetBoolean()
            end
        end
    end

    ;--------------------------------------------------------------------------------------------------------
    ;Shared settings

    ;EmailSettings
    if (ok)
    begin
        if (doc.RootElement.TryGetProperty("EmailSettings",smtpsettings))
        begin
            if (smtpsettings.ValueKind != JsonValueKind.Object)
            begin
                errorMessage = "EmailSettings must be an object containing other email settings!"
                ok = false
            end
        end
    end

    ;SmtpServer
    if (ok)
    begin
        if (smtpsettings.TryGetProperty("SmtpServer",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "SmtpServer must be a string containing a DNS name or IP address!"
                ok = false
            end
            else
            begin
                Settings.SmtpServer = setting.GetString()
            end
        end
    end

    ;SmtpPort
    if (ok)
    begin
        if (smtpsettings.TryGetProperty("SmtpPort",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "SmtpPort must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.SmtpPort = setting.GetInt32()
            end
        end
    end

    ;SmtpUseSSL
    if (ok)
    begin
        if (instance.TryGetProperty("SmtpUseSSL",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "SmtpUseSSL must be true or false!"
                ok = false
            end
            else
            begin
                Settings.SmtpUseSSL = setting.GetBoolean()
            end
        end
    end

    ;SmtpUsername
    if (ok)
    begin
        if (smtpsettings.TryGetProperty("SmtpUsername",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "SmtpUsername must have a string value!"
                ok = false
            end
            else
            begin
                Settings.SmtpUsername = setting.GetString()
            end
        end
    end

    ;SmtpPassword
    if (ok)
    begin
        if (smtpsettings.TryGetProperty("SmtpPassword",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "SmtpPassword must have a string value!"
                ok = false
            end
            else
            begin
                Settings.SmtpPassword = setting.GetString()
            end
        end
    end

    ;EmailSenderAddress
    if (ok)
    begin
        if (smtpsettings.TryGetProperty("EmailSenderAddress",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "EmailSenderAddress must have a string value!"
                ok = false
            end
            else
            begin
                Settings.EmailSenderAddress = setting.GetString()
            end
        end
    end

    ;EmailSenderName
    if (ok)
    begin
        if (smtpsettings.TryGetProperty("EmailSenderName",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "EmailSenderName must have a string value!"
                ok = false
            end
            else
            begin
                Settings.EmailSenderName = setting.GetString()
            end
        end
    end

    ;EmailRecipients
    if (ok)
    begin
        if (!smtpsettings.TryGetProperty("EmailRecipients",setting) || setting.ValueKind!=JsonValueKind.Array || setting.GetArrayLength()==0) then
        begin
            ok = false
        end
        else
        begin
            data addressCount = setting.GetArrayLength()
            data addressNumber, int

            Settings.EmailRecipients = new String[addressCount]

            for addressNumber from 0 thru addressCount - 1
            begin
                emailAddress = setting[addressNumber]
                
                if (emailAddress.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(emailAddress.GetString())) then
                begin
                    ok = false
                end
                else
                begin
                    Settings.EmailRecipients[addressNumber+1] = emailAddress.GetString()
                end
            end
        end
        if (!ok)
        begin
            errorMessage = "EmailRecipients must be an array containing at least one email address!"
        end
    end

    freturn ok

endfunction
