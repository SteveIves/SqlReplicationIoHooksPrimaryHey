;;*****************************************************************************
;;
;; Routine:     GetSettings
;;
;; Description: Get settings from enmvironment variables and command line options.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Created:     30th December 2019
;;
;;*****************************************************************************
;;

import ReplicationLibrary
import System.Collections
import System.Text
import System.Text.Json

function GetSettings,   boolean
    required out errorMessage, string
    stack record
        ok,                 boolean
        clValues,           @ArrayList
        length,             int
        envval,             a1024
        envlen,             i4
        doc,                @JsonDocument
        instanceDefaults,   @InstanceDefaultSettings
.ifdef DBLNET
        dbConnections,      JsonElement
        dbConnection,       JsonElement
        defaults,           JsonElement
        instances,          JsonElement
        instance,           JsonElement
        setting,            JsonElement
        emailsetting,       JsonElement
        emailAddress,       JsonElement
.else
        dbConnections,      @JsonElement
        dbConnection,       @JsonElement
        defaults,           @JsonElement
        instances,          @JsonElement
        instance,           @JsonElement
        setting,            @JsonElement
        emailsetting,       @JsonElement
        emailAddress,       @JsonElement
.endc
    endrecord
    external function
        xsubr,  ^val
    endexternal
proc
    ok = true
    errorMessage = ""

    ;Parse the JSON configuration file

    try
    begin
        doc = Settings.ParseConfigFile()
    end
    catch (e, @Exception)
    begin
        errorMessage = "Failed to parse configuration file!"
        ok = false
    end
    endtry

    ;--------------------------------------------------------------------------------------------------------
    ;DatabaseConnections

    if (ok)
    begin
        if (!doc.RootElement.TryGetProperty("DatabaseConnections",dbConnections)) then
        begin
            errorMessage = "Configuration must have a DatabaseConnections property!"
            ok = false
        end
        else if (dbConnections.ValueKind != JsonValueKind.Array) then
        begin
            errorMessage = "DatabaseConnections must be an array!"
            ok = false
        end
        else if (dbConnections.GetArrayLength() == 0)
        begin
            errorMessage = "DatabaseConnections must contain at least one DatabaseConnection object!"
            ok = false
        end
    end

    if (ok)
    begin
        ;Iterate and load the database connections
        data connectionCount = dbConnections.GetArrayLength()
        data connectionNumber, int

        Settings.DatabaseConnections = new DatabaseConnection[connectionCount]

        for connectionNumber from 0 thru connectionCount - 1
        begin
            data dbc = new DatabaseConnection()

            dbConnection = dbConnections[connectionNumber]

            if (dbConnection.ValueKind != JsonValueKind.Object)
            begin
                errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "] is not a DatabaseConnection object!"
                ok = false
            end

            ;Name
            if (ok)
            begin
                if (!dbConnection.TryGetProperty("Name",setting)) then
                begin
                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "] has no Name!"
                    ok = false
                end
                else if (setting.ValueKind != JsonValueKind.String) then
                begin
                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Name is not a string!"
                    ok = false
                end
                else if (String.IsNullOrWhitespace(setting.GetString())) then
                begin
                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Name has no value!"
                    ok = false
                end
                else
                begin
                    dbc.Name = setting.GetString()
                end
            end

            ;Mode
            if (ok)
            begin
                if (!dbConnection.TryGetProperty("Mode",setting)) then
                begin
                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "] has no Mode!"
                    ok = false
                end
                else if (setting.ValueKind != JsonValueKind.String) then
                begin
                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Mode is not a string!"
                    ok = false
                end
                else if (String.IsNullOrWhitespace(setting.GetString())) then
                begin
                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Mode has no value!"
                    ok = false
                end
                else
                begin
                    using setting.GetString().ToUpper() select
                    ("SQLCONNECTION"),
                        dbc.Mode = DatabaseConnectionMode.SqlConnection
                    ("SQLCLIENT"),
                        dbc.Mode = DatabaseConnectionMode.SqlClient
                    (),
                    begin
                        errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Mode has an invalid value!"
                        ok = false
                    end
                    endusing
                end
            end

            ;ConnectString
            if (ok)
            begin
                if (!dbConnection.TryGetProperty("ConnectString",setting)) then
                begin
                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "] has no ConnectString!"
                    ok = false
                end
                else if (setting.ValueKind != JsonValueKind.String) then
                begin
                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].ConnectString is not a string!"
                    ok = false
                end
                else if (String.IsNullOrWhitespace(setting.GetString())) then
                begin
                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].ConnectString has no value!"
                    ok = false
                end
                else
                begin
                    dbc.ConnectString = setting.GetString()
                end
            end

            if (!ok)
                exitloop

            Settings.DatabaseConnections[connectionNumber+1] = dbc
        end
    end

    ;--------------------------------------------------------------------------------------------------------
    ;InstanceDefaults

    if (ok)
    begin
        if (!doc.RootElement.TryGetProperty("InstanceDefaults",defaults)) then
        begin
            errorMessage = "Configuration must have an InstanceDefaults property!"
            ok = false
        end
        else if (defaults.ValueKind != JsonValueKind.Object) then
        begin
            errorMessage = "InstanceDefaults must be an object!"
            ok = false
        end
        else
        begin
            try
            begin
                instanceDefaults = new InstanceDefaultSettings(defaults,errorMessage)
            end
            catch (ex, @Exception)
            begin
                errorMessage = ex.Message
                ok = false
            end
            endtry
        end
    end

    ;--------------------------------------------------------------------------------------------------------
    ;Instances

    if (ok)
    begin
        if (!doc.RootElement.TryGetProperty("Instances",instances)) then
        begin
            errorMessage = "Configuration must have an Instances property!"
            ok = false
        end
        else if (instances.ValueKind != JsonValueKind.Array) then
        begin
            errorMessage = "Instances must be an array!"
            ok = false
        end
        else if (instances.GetArrayLength() == 0)
        begin
            errorMessage = "Instances must contain at least one object!"
            ok = false
        end
    end

    ;Find the instance configuration for our instance name

    if (ok)
    begin
        data instanceCount = instances.GetArrayLength()
        data instanceNumber = 0
        data foundOurSettings = false

        for instanceNumber from 0 thru instanceCount - 1
        begin
            instance = instances[instanceNumber]

            ;Does this element contain the settings for our instance?

            if (!instance.TryGetProperty("InstanceName",setting))
            begin
                errorMessage = "Instance[" + %string(instanceNumber+1) + "] has no InstanceName!"
                ok = false
                exitloop
            end

            if (setting.ValueKind != JsonValueKind.String)
            begin
                errorMessage = "Instance[" + %string(instanceNumber+1) + "] InstanceName is not a string!"
                ok = false
                exitloop
            end

            if (setting.GetString().ToUpper() == Settings.InstanceName) 
            begin
                ;Found it
                foundOurSettings = true
                exitloop
            end
        end

        if (!foundOurSettings)
        begin
            errorMessage = "No settings found for instance " + Settings.InstanceName
            ok = false
        end
    end

    ;--------------------------------------------------------------------------------------------------------
    ;Apply default settings to the new instance configuration

    if (ok)
    begin
        Settings.BulkLoadBatchSize      = instanceDefaults.BulkLoadBatchSize
        Settings.BulkLoadTimeout        = instanceDefaults.BulkLoadTimeout
        Settings.CommitBatchSize        = instanceDefaults.CommitBatchSize
        Settings.DatabaseBcpBatchSize   = instanceDefaults.DatabaseBcpBatchSize
        Settings.DatabaseBcpPacketSize  = instanceDefaults.DatabaseBcpPacketSize
        Settings.DatabaseCommitMode     = instanceDefaults.DatabaseCommitMode
        Settings.DatabaseConnectionName = instanceDefaults.DatabaseConnectionName
        begin
            data dbc, @DatabaseConnection
            foreach dbc in Settings.DatabaseConnections
            begin
                if (dbc.Name.ToUpper().Equals(Settings.DatabaseConnectionName.ToUpper()))
                begin
                    Settings.DatabaseConnectString = dbc.ConnectString
                    Settings.DatabaseConnectMode = dbc.Mode
                end
            end
        end
        Settings.DatabaseName           = instanceDefaults.DatabaseName
        Settings.DatabasePassword       = instanceDefaults.DatabasePassword
        Settings.DatabaseRetryDelay     = instanceDefaults.DatabaseRetryDelay
        Settings.DatabaseRetryMax       = instanceDefaults.DatabaseRetryMax
        Settings.DatabaseSchema         = instanceDefaults.DatabaseSchema
        Settings.DatabaseServer         = instanceDefaults.DatabaseServer
        Settings.DatabaseTimeout        = instanceDefaults.DatabaseTimeout
        Settings.DatabaseUser           = instanceDefaults.DatabaseUser
        Settings.DataCompressionMode    = instanceDefaults.DataCompressionMode
        Settings.ErrorSleepTime         = instanceDefaults.ErrorSleepTime
        Settings.FileServiceEnabled     = instanceDefaults.FileServiceEnabled
        Settings.FileServiceHost        = instanceDefaults.FileServiceHost
        Settings.FileServicePort        = instanceDefaults.FileServicePort
.ifdef DBLNET
        Settings.KafkaServers           = instanceDefaults.KafkaServers
.endc
        Settings.LocalExportPath        = instanceDefaults.LocalExportPath
        Settings.LogBulkLoadExceptions  = instanceDefaults.LogBulkLoadExceptions
        Settings.LogKeyValues           = instanceDefaults.LogKeyValues
        Settings.LogLoadProgress        = instanceDefaults.LogLoadProgress
        Settings.MaxColumns             = instanceDefaults.MaxColumns
        Settings.MaxCursors             = instanceDefaults.MaxCursors
        Settings.QueueReconnectAttempts = instanceDefaults.QueueReconnectAttempts
        Settings.QueueReconnectDelay    = instanceDefaults.QueueReconnectDelay
        Settings.QueueType              = instanceDefaults.QueueType
        Settings.SleepTime              = instanceDefaults.SleepTime
        Settings.SqlCommandReuse        = instanceDefaults.SqlCommandReuse
        Settings.StopOnError            = instanceDefaults.StopOnError
        Settings.SystemLogging          = instanceDefaults.SystemLogging
        Settings.VerboseLogging         = instanceDefaults.VerboseLogging
    end

    ;--------------------------------------------------------------------------------------------------------
    ;Apply instance specific settings

    if (ok)
    begin
        ;Enabled
        if (instance.TryGetProperty("Enabled",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "Enabled must be true or false!"
                ok = false
            end
            else
            begin
                Settings.Enabled = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;BulkLoadBatchSize
        if (instance.TryGetProperty("BulkLoadBatchSize",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1000) then
            begin
                errorMessage = "BulkLoadBatchSize must have an integer value >= 1000!"
                ok = false
            end
            else
            begin
                Settings.BulkLoadBatchSize = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;BulkLoadTimeout
        if (instance.TryGetProperty("BulkLoadTimeout",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<60) then
            begin
                errorMessage = "BulkLoadTimeout must have an integer value >= 60!"
                ok = false
            end
            else
            begin
                Settings.BulkLoadTimeout = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;CommitBatchSize
        if (instance.TryGetProperty("CommitBatchSize",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<100) then
            begin
                errorMessage = "CommitBatchSize must have an integervalue >= 100!"
                ok = false
            end
            else
            begin
                Settings.CommitBatchSize = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;DatabaseBcpBatchSize
        if (ok)
        begin
            if (instance.TryGetProperty("DatabaseBcpBatchSize",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<100  || setting.GetInt32()>50000) then
                begin
                    errorMessage = "DatabaseBcpBatchSize must have an integer value between 100 and 50000!"
                    ok = false
                end
                else
                begin
                    Settings.DatabaseBcpBatchSize = setting.GetInt32()
                end
            end
        end

        ;DatabaseBcpPacketSize
        if (ok)
        begin
            if (instance.TryGetProperty("DatabaseBcpPacketSize",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<4096 || setting.GetInt32()>65535) then
                begin
                    errorMessage = "DatabaseBcpPacketSize must have an integer value between 4096 and 65535!"
                    ok = false
                end
                else
                begin
                    Settings.DatabaseBcpPacketSize = setting.GetInt32()
                end
            end
        end

        ;DatabaseCommitMode
        if (instance.TryGetProperty("DatabaseCommitMode",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
            begin
                ok = false
            end
            else
            begin
                using setting.GetString().ToUpper() select
                ("AUTOMATIC"),
                    Settings.DatabaseCommitMode = DatabaseCommitMode.Automatic
                ("BATCH"),
                    Settings.DatabaseCommitMode = DatabaseCommitMode.Batch
                ("MANUAL"),
                    Settings.DatabaseCommitMode = DatabaseCommitMode.Manual
                (),
                    ok = false
                endusing
            end
            if (!ok)
            begin
                errorMessage = "DatabaseCommitMode must be Automatic, Batch or Manual!"
            end
        end
        if (!ok) exit

        ;DatabaseConnectionName
        if (instance.TryGetProperty("DatabaseConnectionName",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
            begin
                errorMessage = "DatabaseConnectionName must have a non-blank string value!"
                ok = false
            end
            else
            begin
                data dbc, @DatabaseConnection
                Settings.DatabaseConnectionName = setting.GetString()
                Settings.DatabaseConnectString = ^null

                foreach dbc in Settings.DatabaseConnections
                begin
                    if (dbc.Name.ToUpper().Equals(Settings.DatabaseConnectionName.ToUpper()))
                    begin
                        Settings.DatabaseConnectString = dbc.ConnectString
                        Settings.DatabaseConnectMode = dbc.Mode
                    end
                end

                if (String.IsNullOrWhitespace(Settings.DatabaseConnectString))
                begin
                    errorMessage = "DatabaseConnectionName does not match an entry in DatabaseConnections!"
                    ok = false
                end
            end
        end
        if (!ok) exit

        ;DatabaseName
        if (ok)
        begin
            if (instance.TryGetProperty("DatabaseName",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                begin
                    errorMessage = "DatabaseName must have a non-blank string value!"
                    ok = false
                end
                else
                begin
                    Settings.DatabaseName = setting.GetString()
                end
            end
        end

        ;DatabasePassword
        if (ok)
        begin
            if (instance.TryGetProperty("DatabasePassword",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                begin
                    errorMessage = "DatabasePassword must have a non-blank string value!"
                    ok = false
                end
                else
                begin
                    Settings.DatabasePassword = setting.GetString()
                end
            end
        end

        ;DatabaseRetryDelay
        if (instance.TryGetProperty("DatabaseRetryDelay",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "DatabaseRetryDelay have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.DatabaseRetryDelay = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;DatabaseRetryMax
        if (instance.TryGetProperty("DatabaseRetryMax",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "DatabaseRetryMax have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.DatabaseRetryMax = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;DatabaseSchema
        if (ok)
        begin
            if (instance.TryGetProperty("DatabaseSchema",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                begin
                    errorMessage = "DatabaseSchema must have a non-blank string value!"
                    ok = false
                end
                else
                begin
                    Settings.DatabaseSchema = setting.GetString()
                end
            end
        end

        ;DatabaseServer
        if (ok)
        begin
            if (instance.TryGetProperty("DatabaseServer",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                begin
                    errorMessage = "DatabaseServer must have a non-blank string value!"
                    ok = false
                end
                else
                begin
                    Settings.DatabaseServer = setting.GetString()
                end
            end
        end

        ;DatabaseTimeout
        if (instance.TryGetProperty("DatabaseTimeout",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "DatabaseTimeout must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.DatabaseTimeout = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;DatabaseUser
        if (ok)
        begin
            if (instance.TryGetProperty("DatabaseUser",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                begin
                    errorMessage = "DatabaseUser must have a non-blank string value!"
                    ok = false
                end
                else
                begin
                    Settings.DatabaseUser = setting.GetString()
                end
            end
        end

        ;DataCompressionMode
        if (instance.TryGetProperty("DataCompressionMode",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
            begin
                ok = false
            end
            else
            begin
                using setting.GetString().ToUpper() select
                ("NONE"),
                    Settings.DataCompressionMode = DatabaseDataCompression.None
                ("PAGE"),
                    Settings.DataCompressionMode = DatabaseDataCompression.Page
                ("ROW"),
                    Settings.DataCompressionMode = DatabaseDataCompression.Row
                (),
                    ok = false
                endusing
            end
        end
        if (!ok)
        begin
            errorMessage = "DataCompressionMode must be None, Page or Row!"
        end
        if (!ok) exit

        ;ErrorSleepTime
        if (instance.TryGetProperty("ErrorSleepTime",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetDecimal()<=0) then
            begin
                errorMessage = "ErrorSleepTime must have a positive decimal value!"
                ok = false
            end
            else
            begin
                Settings.ErrorSleepTime = setting.GetDecimal()
            end
        end
        if (!ok) exit

        ;FileServiceEnabled
        if (instance.TryGetProperty("FileServiceEnabled",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "FileServiceEnabled must be true or false!"
                ok = false
            end
            else
            begin
                Settings.FileServiceEnabled = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;FileServiceHost
        if (instance.TryGetProperty("FileServiceHost",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String) then
            begin
                errorMessage = "FileServiceHost must have a string value (ip address or DNS name)!"
                ok = false
            end
            else
            begin
                Settings.FileServiceHost = setting.GetString()
            end
        end
        if (!ok) exit

        ;FileServicePort
        if (instance.TryGetProperty("FileServicePort",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<=0) then
            begin
                errorMessage = "FileServicePort must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.FileServicePort = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;KafkaServers
.ifdef DBLNET
        if (ok)
        begin
            if (instance.TryGetProperty("KafkaServers",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                begin
                    errorMessage = "KafkaServers must have a non-blank string value!"
                    ok = false
                end
                else
                begin
                    Settings.KafkaServers = setting.GetString()
                end
            end
        end
.endc
        ;LocalExportPath
        if (instance.TryGetProperty("LocalExportPath",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                ok = false
            end
            else if (!String.IsNullOrWhitespace(setting.GetString()))
            begin
                ;Check that we can create a file in the directory
                data tmpch, i4
                try
                begin
                    data tmpfile = setting.GetString() + %datetime + ".tmp"
                    open(tmpch=0,o,tmpfile)
                    Settings.LocalExportPath = setting.GetString()
                end
                catch (e, @Exception)
                begin
                    ok = false
                end
                finally
                begin
                    if (tmpch && %chopen(tmpch))
                        close tmpch
                end
                endtry
            end
        end
        if (!ok)
        begin
            errorMessage = "LocalExportPath must have a string value and be a valid path!"
        end
        if (!ok) exit

        ;LogBulkLoadExceptions
        if (instance.TryGetProperty("LogBulkLoadExceptions",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "LogBulkLoadExceptions must be true or false!"
                ok = false
            end
            else
            begin
                Settings.LogBulkLoadExceptions = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;LogKeyValues
        if (instance.TryGetProperty("LogKeyValues",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "LogKeyValues must be true or false!"
                ok = false
            end
            else
            begin
                Settings.LogKeyValues = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;LogLoadProgress
        if (instance.TryGetProperty("LogLoadProgress",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "LogLoadProgress must be true or false!"
                ok = false
            end
            else
            begin
                Settings.LogLoadProgress = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;MaxColumns
        if (instance.TryGetProperty("MaxColumns",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "MaxColumns must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.MaxColumns = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;MaxCursors
        if (instance.TryGetProperty("MaxCursors",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "MaxCursors must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.MaxCursors = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;QueueReconnectAttempts
        if (instance.TryGetProperty("QueueReconnectAttempts",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "QueueReconnectAttempts must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.QueueReconnectAttempts = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;QueueReconnectDelay
        if (instance.TryGetProperty("QueueReconnectDelay",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "QueueReconnectDelay must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.QueueReconnectDelay = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;QueueType
        if (instance.TryGetProperty("QueueType",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
            begin
                ok = false
            end
            else
            begin
                using setting.GetString().ToUpper() select
                ("ISAMFILE"),
                    Settings.QueueType = MessageQueueType.IsamFile
                ("KAFKA"),
.ifdef DBLNET
                    Settings.QueueType = MessageQueueType.Kafka
.else
                    ok = false
.endc
                (),
                    ok = false
                endusing
            end
        end
        if (!ok)
        begin
            errorMessage = "QueueType must be IsamFile or Kafka (.NET only)!"
        end
        if (!ok) exit

        ;SleepTime
        if (instance.TryGetProperty("SleepTime",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "SleepTime must have a positive integer value!"
                ok = false
            end
            else
            begin
                Settings.SleepTime = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;SqlCommandReuse
        if (instance.TryGetProperty("SqlCommandReuse",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "SqlCommandReuse must be true or false!"
                ok = false
            end
            else
            begin
                Settings.SqlCommandReuse = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;StopOnError
        if (instance.TryGetProperty("StopOnError",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "StopOnError must be true or false!"
                ok = false
            end
            else
            begin
                Settings.StopOnError = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;SystemLogging
        if (instance.TryGetProperty("SystemLogging",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "SystemLogging must be true or false!"
                ok = false
            end
            else
            begin
                Settings.SystemLogging = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;VerboseLogging
        if (instance.TryGetProperty("VerboseLogging",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "VerboseLogging must be true or false!"
                ok = false
            end
            else
            begin
                Settings.VerboseLogging = setting.GetBoolean()
            end
        end
    end

    ;--------------------------------------------------------------------------------------------------------
    ;Email settings

    if (ok)
    begin
        if (doc.RootElement.TryGetProperty("EmailSettings",emailsetting))
        begin
            if (emailsetting.ValueKind != JsonValueKind.Object)
            begin
                errorMessage = "EmailSettings must be an object containing other email settings!"
                ok = false
            end
        end
        if (!ok) exit

        ;Enabled
        if (emailsetting.TryGetProperty("Enabled",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "EmailSettings.Enabled must be true or false!"
                ok = false
            end
            else
            begin
                EmailSettings.SmtpUseSSL = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;SmtpServer
        if (emailsetting.TryGetProperty("SmtpServer",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "EmailSettings.SmtpServer must be a string containing a DNS name or IP address!"
                ok = false
            end
            else
            begin
                EmailSettings.SmtpServer = setting.GetString()
            end
        end
        if (!ok) exit

        ;SmtpPort
        if (emailsetting.TryGetProperty("SmtpPort",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "EmailSettings.SmtpPort must have a positive integer value!"
                ok = false
            end
            else
            begin
                EmailSettings.SmtpPort = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;SmtpUsername
        if (emailsetting.TryGetProperty("SmtpUsername",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "EmailSettings.SmtpUsername must have a string value!"
                ok = false
            end
            else
            begin
                EmailSettings.SmtpUsername = setting.GetString()
            end
        end
        if (!ok) exit

        ;SmtpPassword
        if (emailsetting.TryGetProperty("SmtpPassword",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "EmailSettings.SmtpPassword must have a string value!"
                ok = false
            end
            else
            begin
                EmailSettings.SmtpPassword = setting.GetString()
            end
        end
        if (!ok) exit

        ;SmtpUseSSL
        if (emailsetting.TryGetProperty("SmtpUseSSL",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
            begin
                errorMessage = "EmailSettings.SmtpUseSSL must be true or false!"
                ok = false
            end
            else
            begin
                EmailSettings.SmtpUseSSL = setting.GetBoolean()
            end
        end
        if (!ok) exit

        ;SenderAddress
        if (emailsetting.TryGetProperty("SenderAddress",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "EmailSettings.SenderAddress must have a string value!"
                ok = false
            end
            else
            begin
                EmailSettings.SenderAddress = setting.GetString()
            end
        end
        if (!ok) exit

        ;SenderName
        if (emailsetting.TryGetProperty("SenderName",setting))
        begin
            if (setting.ValueKind != JsonValueKind.String) then
            begin
                errorMessage = "EmailSettings.SenderName must have a string value!"
                ok = false
            end
            else
            begin
                EmailSettings.SenderName = setting.GetString()
            end
        end
        if (!ok) exit

        ;Recipients
        if (!emailsetting.TryGetProperty("Recipients",setting) || setting.ValueKind!=JsonValueKind.Array || setting.GetArrayLength()==0) then
        begin
            ok = false
        end
        else
        begin
            data addressCount = setting.GetArrayLength()
            data addressNumber, int

            EmailSettings.Recipients = new String[addressCount]

            for addressNumber from 0 thru addressCount - 1
            begin
                emailAddress = setting[addressNumber]
                
                if (emailAddress.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(emailAddress.GetString())) then
                begin
                    ok = false
                end
                else
                begin
                    EmailSettings.Recipients[addressNumber+1] = emailAddress.GetString()
                end
            end
        end
        if (!ok)
        begin
            errorMessage = "EmailSettings.Recipients must be an array containing at least one email address!"
        end
        if (!ok) exit

        ;ErrorsBeforePause
        if (emailsetting.TryGetProperty("ErrorsBeforePause",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "EmailSettings.ErrorsBeforePause must have a positive integer value!"
                ok = false
            end
            else
            begin
                EmailSettings.ErrorsBeforePause = setting.GetInt32()
            end
        end
        if (!ok) exit

        ;ErrorPauseMinutes
        if (emailsetting.TryGetProperty("ErrorPauseMinutes",setting))
        begin
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
            begin
                errorMessage = "EmailSettings.ErrorPauseMinutes must have a positive integer value!"
                ok = false
            end
            else
            begin
                EmailSettings.ErrorPauseMinutes = setting.GetInt32()
            end
        end
        if (!ok) exit
    end

    ;--------------------------------------------------------------------------------------------------------
    ;Validations

.ifndef DBLNET
    if (ok && Settings.DatabaseConnectMode == DatabaseConnectionMode.SqlClient)
    begin
        errorMessage = "SqlClient mode is only supported in .NET!"
        ok = false
    end
.endc

    if (ok)
    begin
        if (String.IsNullOrWhitespace(Settings.DatabaseConnectString))
        begin
            errorMessage = "No database connection string is defined!"
            ok = false
        end
    end

    freturn ok

endfunction
