;;*****************************************************************************
;;

subroutine SendEmail
    required in aSubject, string
    required in aBody, [#]string
    required in aBodyHtml, boolean
    stack record
        bodyToSend, [#]string
    endrecord
    external function
        DoSendEmail, boolean
    endexternal
proc
    if (Settings.SmtpDisabled)
    begin
        ;Is it time to start sending emails again?
        data timeNow, i8, %datetime_to_i8(%datetime)
        if (timeNow > (Settings.SmtpPausedTime+(Settings.SmtpPauseMinutes*60000000)))
        begin
            ;Yes, the pause period has expired.
            Settings.SmtpFailCount = 0
            Settings.SmtpDisabled = false
            Logger.Log("Email notification resuming after a " + %string(Settings.SmtpPauseMinutes) + " minute pause")
        end
    end

    if (!Settings.SmtpDisabled)
    begin
        if (aBody == ^null) then
        begin
            bodyToSend = new string[1]
            bodyToSend[1] = ""
        end
        else
        begin
            bodyToSend = aBody
        end

        if (!%DoSendEmail(aSubject,bodyToSend,aBodyHtml))
        begin
            Logger.ErrorLog("Failed to send email!")
            Settings.SmtpFailCount = Settings.SmtpFailCount + 1

            ;Have we exceded the SmtpMaxFail threshold?
            if (Settings.SmtpFailCount > Settings.SmtpFailMax)
            begin
                ;Yes, pause email delivery
                Settings.SmtpDisabled = true
                Settings.SmtpPausedTime = %datetime_to_i8(%datetime)
                Logger.ErrorLog("Email notifications will be paused for " + %string(Settings.SmtpPauseMinutes)+ " following " + %string(Settings.SmtpFailMax) + " failures")
            end
        end
    end

    xreturn

endsubroutine

.ifdef DBLNET

import ReplicationLibrary
import System.Net
import System.Net.Mail
import System.Text

function DoSendEmail, boolean
    required in aSubject, string
    required in aBody, [#]string
    required in aBodyHtml, boolean
    stack record
        ok, boolean
    endrecord
proc
    ok = true

    ;Build the message body

    data bodyBuilder = new StringBuilder()
    data bodyLine, string
    foreach bodyLine in aBody
    begin
        bodyBuilder.AppendLine(bodyLine)
    end

    ;Create a new MailMessage

    disposable data message = new MailMessage() {
    &   From = new MailAddress(Settings.EmailSenderAddress,Settings.EmailSenderName),
    &   Subject = aSubject,
    &   Body = bodyBuilder.ToString(),
    &   IsBodyHtml = aBodyHtml
    & }

    ;Add recipient(s)
    data recipient, string
    foreach recipient in Settings.EmailRecipients
    begin
        message.To.Add(new MailAddress(recipient))
    end

    ;Create an SmtpClient

    disposable data client = new SmtpClient() {
    &   Host = Settings.SmtpServer,
    &   Port = Settings.SmtpPort,
    &   EnableSsl = Settings.SmtpUseSSL
    & }

    ;Do we have SMTP credentials?

    if (!String.IsNullOrWhiteSpace(Settings.SmtpUsername) && !String.IsNullOrWhiteSpace(Settings.SmtpPassword))
    begin
        client.Credentials = new NetworkCredential(Settings.SmtpUsername,Settings.SmtpPassword)
    end

    ;Send the message

    try
    begin
        client.SendMailAsync(message).Wait()
    end
    catch (ex, @Exception)
    begin
        ok = false
    end
    endtry
    
    freturn ok

endfunction

.else

import ReplicationLibrary

function DoSendEmail, boolean
    required in aSubject, string
    required in aBody, [#]string
    required in aBodyHtml, boolean

    .include "REPLICATOR_INCLUDE:SmtpMail.def"

    stack record
        ok, boolean
        emailStatus, i4
    endrecord
proc
    ok = true
    emailStatus = 0

    if emailStatus=%SmtpMail(
    &   Settings.SmtpServer,
    &   Settings.EmailSenderAddress,
    &   Settings.EmailSenderName,
    &   ,
    &   Settings.GetEmailRecipientsString(),
    &   ,
    &   aSubject,
    &   aBody,
    &   ,
    &   aBodyHtml
    & ) != SMERR_SUCCESS
    begin
        ok = false
    end

    freturn ok

endfunction

.endc
