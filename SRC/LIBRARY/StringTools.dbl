;;*****************************************************************************
;;
;; File:        StringTools.dbl
;;
;; Description: Utility class for manipulating string andynamic memory values
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;;*****************************************************************************
;;
;; Copyright (c) 2013, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

namespace ReplicationLibrary

    public class StringTools

        .define D_32K           32768
        .define D_32BIT_MAX     65535

        private static b64Chars, a*, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="

        private structure str1byte
            byte1       ,a1
        endstructure

        private structure str3bytes
            byte1       ,a1
            byte2       ,a1
            byte3       ,a1
        endstructure

        structure str4bytes
            byte1       ,a1
            byte2       ,a1
            byte3       ,a1
            byte4       ,a1
        endstructure

        structure strBits24
            b64_1       ,a6
            b64_2       ,a6
            b64_3       ,a6
            b64_4       ,a6
            ascii_1     ,a8 @b64_1
            ascii_2     ,a8 @b64_1 + 8
            ascii_3     ,a8 @b64_1 + 16
        endstructure


        ;;; <summary>
        ;;; Takes base64 encoded data in a memory handle, decodes the data back
        ;;; to its original form, and returns the data in a System.String.
        ;;; </summary>
        ;;; <param name="dataToDecode">Memory handle containing base64 encoded data.</param>
        ;;; <returns>Decoded data.</returns>
        public static method Base64DecodeHandle, string
            required in dataToDecode    ,D_HANDLE
            endparams

            stack record
				inData              ,D_HANDLE
                inLength            ,int
                bits24              ,strBits24
            endrecord

            structure inputLine
                lineData            ,a76
                lineTerminator      ,a2
            endstructure

            structure outputLine
                                    ,a76
            endstructure

        proc

            ;;First copy the input handle so that we can strip out CR/LF's if needed
            CopyHandle(dataToDecode,inData)

            if (inLength=%mem_proc(DM_GETSIZE,inData)) then
            begin
                data ix                 ,int
                data setsOf4            ,int
				data unencodedData      ,D_HANDLE
                data unencodedDataIx    ,int
                data fillerCount        ,int, 0

                ;;The encoded data MAY be broken down into 76 character lines.
                ;;If so every 77th and 78th character will be a CR/LF pair.
                if ((inLength>=78)&&(^m(inputLine[1].lineTerminator,inData)==%char(13)+%char(10)))
                begin
                    ;;Yep, we have line breaks.
                    ;;We need to remove these before decoding the data
                    data fullLines  ,int    ,inLength / 78
                    data extraChars ,int    ,inLength - (fullLines*78)

                    for ix from 2 thru fullLines
                        ^m(outputLine[ix],inData) = ^m(inputLine[ix].lineData,inData)

                    if (extraChars)
                        ^m(outputLine[fullLines+1](1:extraChars),inData) = ^m(inputLine[fullLines+1](1:extraChars),inData)

                    ;;Reduce the size of the input data to take into account the CR/LF
                    ;;pairs that were removed
                    inLength = (^size(outputLine)*fullLines)+extraChars
                    inData = %mem_proc(DM_RESIZ,inLength,inData)
                end

                ;;How many sets of 4 bytes do we have. Each set of 4 decodes to 3
                ;;unencoded characters
                setsOf4 = inLength / 4

                ;;There MAY still be trainling padding (=) characters.

                unencodedData = %mem_proc(DM_ALLOC|DM_BLANK,setsOf4*3)
                unencodedDataIx = 0

                for ix from 1 thru setsOf4
                begin
                    data tmpBuf ,str4bytes  ,^m(str4bytes[ix],inData)
                    data iy, int

                    ;;If this is the last set of 4 then fill the buffer with 0's because
                    ;;we might have 1 or 2 filler characters at the end
                    if (ix==setsOf4)
                        xcall fill('0',bits24)

                    for iy from 1 thru 4
                    begin
                        data theB64Char ,a1
                        data theIndex, int
                        using iy select
                        (1),
                            bits24.b64_1 = %bin(instr(1,b64Chars,tmpBuf.byte1)-1,1)(3:6)
                        (2),
                            bits24.b64_2 = %bin(instr(1,b64Chars,tmpBuf.byte2)-1,1)(3:6)
                        (3),
                            if (tmpBuf.byte3!=b64Chars(65:1)) then
                                bits24.b64_3 = %bin(%instr(1,b64Chars,tmpBuf.byte3)-1,1)(3:6)
                            else
                                fillerCount +=1
                        (4),
                            if (tmpBuf.byte4!=b64Chars(65:1)) then
                                bits24.b64_4 = %bin(instr(1,b64Chars,tmpBuf.byte4)-1,1)(3:6)
                            else
                                fillerCount +=1
                        endusing
                    end

                    ;The string binary data from the 4 b64 encoded characters is now in
                    ;bits24. Next we need to turn it into three ASCII characters and
                    ;add it to the output stream

                    ^m(str3bytes[unencodedDataIx+=1],unencodedData) = %char(^b(bits24.ascii_1,4)) + %char(^b(bits24.ascii_2,4)) + %char(^b(bits24.ascii_3,4))
                end

                ;Resize unencodedData handle down to the correct size
                if (fillerCount==2)
                    unencodedData = %mem_proc(DM_RESIZ,(setsOf4*3)-1,unencodedData)

                ;Clean up
                inData = %mem_proc(DM_FREE,inData)

                ;mreturn HandleToString(unencodedData)
				mreturn %string_from_handle(unencodedData)
			end
            else
                mreturn ""

        endmethod

        ;;; <summary>
        ;;; Takes data stored in a string, base64 encodes it, and returns
        ;;; the encoded data in a string.
        ;;; </summary>
        ;;; <param name="dataToEncode">String containing the data to encode.</param>
        ;;; <param name="addLineBreaks">Add line breaks after every 76th character.</param>
        ;;; <returns>Base64 encoded data.</returns>
        public static method Base64EncodeString, string
            required in dataToEncode    ,string
            required in addLineBreaks   ,boolean
            endparams

            stack record
                inLength    ,int
            endrecord

        proc

            if (inLength=dataToEncode.Length) then
            begin
                ;;Determine the length of the new memory handle which will hold
                ;;our completed base 64 string. If there are remaining bits
                ;;(which will be either 2 bits or 4 bits), then that will
                ;;equate to either 1 or 2 extra "Filler" characters needed at
                ;;the end of the data.
				data encodedData        ,D_HANDLE
                data bits24             ,strBits24
                data setsOf3            ,int    ,inLength/3
                data remainingChars     ,int    ,inLength-(setsOf3*3)
                data base64Chars        ,int    ,setsOf3*4
                data ix                 ,int
                data lineBreaksNeeded   ,int    ,0
                data outLength          ,int
                data byteCtr            ,int    ,0
                data b64ctr             ,int    ,0
                data b64LineLength      ,int    ,0

                ;;If there are remaining characters, they will be transposed
                ;;into 4 base64 characters with special "filler" alphas (the
                ;;'=' sign) making up the last 1-2 characters
                if (remainingChars)
                    base64Chars += 4

                ;;If inserting line breaks, add two characters for a CRLF for
                ;;each 76-characters
                if (addLineBreaks)
                    lineBreaksNeeded = base64Chars/76

                outLength = base64Chars + (lineBreaksNeeded*2)

                ;;Create the output handle
                encodedData = %mem_proc(DM_ALLOC|DM_BLANK,outLength)

                for ix from 1 thru inLength
                begin

                    ;;Load the binary value of the character into the 3
                    ;;"character" buffer
                    ;bits24((byteCtr*8)+1:8) = bin(^i(^m(str1byte[ix], dataToEncode)),1)
                    bits24((byteCtr*8)+1:8) = %bin(^i((a)dataToEncode(ix:1)),1)

                    ;;Have we loaded 3 characters into the buffer?
                    if ((byteCtr+=1)==3)
                    begin
                        ;;Yes; encode the data to 4 chars in the output array
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_1)+1:1)
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_2)+1:1)
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_3)+1:1)
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_4)+1:1)
                        ;;Insert line break if necessary
                        if (addLineBreaks&&((b64LineLength+=4)==76))
                        begin
                            ^m(str1byte[b64ctr+=1],encodedData) = %char(13)
                            ^m(str1byte[b64ctr+=1],encodedData) = %char(10)
                            b64LineLength = 0
                        end
                        byteCtr = 0
                    end
                end

                if (remainingChars)
                begin
                    xcall fill('0',bits24)

                    for ix from 1 thru remainingChars
                        bits24(((ix-1)*8)+1:8) = %bin(^i((a)dataToEncode(ix+(setsOf3*3):1)),1)

                    ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_1)+1:1)
                    ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_2)+1:1)

                    if (remainingChars==2) then
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_3)+1:1)
                    else
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(65:1)

                    ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(65:1)
					
                    if (addLineBreaks&&((b64LineLength+=4)==76))
					begin
						^m(str1byte[b64ctr+=1],encodedData) = %char(13)
						^m(str1byte[b64ctr+=1],encodedData) = %char(10)
						b64LineLength = 0
					end
                end

                ;;Turn the memory handle into a string and return the data
				;mreturn HandleToString(encodedData)
				mreturn %string_from_handle(encodedData)
            end
            else
                mreturn ""

        endmethod

        ;;; <summary>
        ;;; Takes data stored in a memory handle, base64 encodes it, and returns
        ;;; the encoded data in a System.String.
        ;;; </summary>
        ;;; <param name="dataToEncode">Memory handle containing the data to encode.</param>
        ;;; <param name="addLineBreaks">Add line breaks after every 76th character.</param>
        ;;; <returns>Base64 encoded data.</returns>
        public static method Base64EncodeHandle, string
			required in dataToEncode    ,D_HANDLE
            required in addLineBreaks   ,boolean
            endparams

            stack record
                inLength    ,int
            endrecord

        proc

            if (inLength = %mem_proc(DM_GETSIZE,dataToEncode)) then
            begin
                ;;Determine the length of the new memory handle which will hold
                ;;our completed base 64 string. If there are remaining bits
                ;;(which will be either 2 bits or 4 bits), then that will
                ;;equate to either 1 or 2 extra "Filler" characters needed at
                ;;the end of the data.
				data encodedData        ,D_HANDLE
                data bits24             ,strBits24
                data setsOf3            ,int    ,inLength/3
                data remainingChars     ,int    ,inLength-(setsOf3*3)
                data base64Chars        ,int    ,setsOf3*4
                data ix                 ,int
                data lineBreaksNeeded   ,int    ,0
                data outLength          ,int
                data byteCtr            ,int    ,0
                data b64ctr             ,int    ,0
                data b64LineLength      ,int    ,0

                ;;If there are remaining characters, they will be transposed
                ;;into 4 base64 characters with special "filler" alphas (the
                ;;'=' sign) making up the last 1-2 characters
                if (remainingChars)
                    base64Chars += 4

                ;;If inserting line breaks, add two characters for a CRLF for
                ;;each 76-characters
                if (addLineBreaks)
                    lineBreaksNeeded = base64Chars/76

                outLength = base64Chars + (lineBreaksNeeded*2)

                ;;Create the output handle
                encodedData = %mem_proc(DM_ALLOC|DM_BLANK,outLength)

                for ix from 1 thru inLength
                begin

                    ;;Load the binary value of the character into the 3
                    ;;"character" buffer
                    bits24((byteCtr*8)+1:8) = %bin(^i(^m(str1byte[ix], dataToEncode)),1)

                    ;;Have we loaded 3 characters into the buffer?
                    if ((byteCtr+=1)==3)
                    begin
                        ;;Yes; encode the data to 4 chars in the output array
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_1)+1:1)
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_2)+1:1)
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_3)+1:1)
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_4)+1:1)
                        ;;Insert line break if necessary
                        if (addLineBreaks&&((b64LineLength+=4)==76))
                        begin
                            ^m(str1byte[b64ctr+=1],encodedData) = %char(13)
                            ^m(str1byte[b64ctr+=1],encodedData) = %char(10)
                            b64LineLength = 0
                        end
                        byteCtr = 0
                    end
                end

                if (remainingChars)
                begin
                    xcall fill('0',bits24)

                    for ix from 1 thru remainingChars
                        bits24(((ix-1)*8)+1:8) = %bin(^i(^m(str1byte[ix+(setsOf3*3)],dataToEncode)),1)

                    ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_1)+1:1)
                    ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_2)+1:1)

                    if (remainingChars==2) then
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(^b(bits24.b64_3)+1:1)
                    else
                        ^m(str1byte[b64ctr+=1],encodedData) = b64Chars(65:1)

					^m(str1byte[b64ctr+=1],encodedData) = b64Chars(65:1)

					if (addLineBreaks&&((b64LineLength+=4)==76))
					begin
						^m(str1byte[b64ctr+=1],encodedData) = %char(13)
						^m(str1byte[b64ctr+=1],encodedData) = %char(10)
						b64LineLength = 0
					end
                end

                ;;Turn the memory handle into a string and return the data
                ;mreturn HandleToString(encodedData)
				mreturn %string_from_handle(encodedData)
            end
            else
                mreturn ""

        endmethod

        ;;; <summary>
        ;;; Duplicates the content of one area of dynamic memory into another.
        ;;; </summary>
        ;;; <param name="handleIn">Memory handle to be copied.</param>
        ;;; <param name="handleOut">Memory handle containing copy of data.</param>
        public static method CopyHandle, void
			required in  handleIn   ,D_HANDLE
			required out handleOut  ,D_HANDLE
            endparams

            structure chunk
                                    ,a D_32K
            endstructure

            stack record
                totalSize           ,i4
            endrecord

        proc

            ;;Get the size of the handle to be copied
            totalSize = %mem_proc(DM_GETSIZE,handleIn)

            ;;Setup the dynamic memory for the return data
            if (handleOut) then
            begin
                try
                begin
                    ;;Handle for output data has a value, try to resize it
                    handleOut = %mem_proc(DM_RESIZ,totalSize,handleOut)
                end
                catch (ex, @SynDataException)
                begin
                    ;;Bad handle, allocate a new one
                    handleOut = %mem_proc(DM_ALLOC|DM_STATIC,totalSize)
                end
                endtry
            end
            else
            begin
                ;;No handle for output data, allocate a new one
                handleOut = %mem_proc(DM_ALLOC|DM_STATIC,totalSize)
            end

            ;;If we're on a 64-bit system, or we're on a 32-bit system and the
            ;;size of the data is less than 64K then we can copy it in one go
.ifdef D_NETSTANDARD
            if (Environment.Is64BitProcess || (totalSize <= D_32BIT_MAX)) then
.else
            if ((D_ADDRSIZE == 8) || (totalSize <= D_32BIT_MAX)) then
.endc
                ^m(handleOut) = ^m(handleIn)
            else
            begin
                ;;We're on a 32-bit system and the data is over 64K so we'll
                ;;have to copy it in blocks less than 64K
                data blocks     ,int    ,totalSize / D_32K
                data characters ,int    ,totalSize - (blocks * D_32K)
                data ix         ,int

                ;;Copy the full blocks
                for ix from 1 thru blocks
                    ^m(chunk[ix],handleOut) = ^m(chunk[ix],handleIn)

                ;;Copy remaining characters
                if (characters)
                    ^m(chunk[blocks+1](1:characters),handleOut)
                    &       = ^m(chunk[blocks+1](1:characters),handleIn)
            end

            mreturn

        endmethod

        public static method FileToHandle, boolean
            required in  fileSpec   ,string
			required out fileData   ,D_HANDLE
            endparams

            stack record
                ok                  ,boolean
                ch                  ,int
            endrecord

            structure block
                            ,a D_32K
            endstructure

        proc
            ok = true

            ;;Open the input file
            try
            begin
				.ifdef OS_VMS
				open(ch=0,i,fileSpec,OPTIONS:"/stream")
				.else
				open(ch=0,i,fileSpec)
				.endc
			end
            catch (ex)
            begin
                ok = false
            end
            endtry

            if (ok)
            begin
                data diskBlocks ,int
                data diskBytes  ,int
                data blocks     ,int    ,0

                ;;Get the number of 512 byte blocks on disk
                xcall getfa(ch,"ALQ",diskBlocks)
                diskBytes = diskBlocks * 512

                ;;Allocate dynamic memory
                fileData = %mem_proc(DM_ALLOC|DM_STATIC|DM_BLANK,diskBytes+^size(block))

                ;;Read data from file in "block size" chunks
                try
                begin
					repeat
					begin
						;reads(ch,^m(block[blocks+=1],fileData))
						gets(ch,^m(block[blocks+=1],fileData))
					end
                end
                catch (ex, @EndOfFileException)
                begin
                    ;;We hit EOF, save away the final buffer of data
                    ;;Resize handle to exact size of file.
                    fileData = mem_proc(DM_RESIZ,((^size(block)*(blocks-=1))+%rsize),fileData)
                end
                endtry
            end

            if (ch&&chopen(ch))
                close ch

            mreturn ok

        endmethod

        public static method FileToString, boolean
            required in  fileSpec   ,string
            required out dataString ,string
            endparams

            stack record
                ok                  ,boolean
				dataHandle          ,D_HANDLE
            endrecord

        proc

            if (ok = StringTools.FileToHandle(fileSpec,dataHandle))
            begin
				;dataString = HandleToString(dataHandle)
				dataString = %string_from_handle(dataHandle)
                dataHandle = %mem_proc(DM_FREE,dataHandle)
            end

            mreturn ok

        endmethod

        public static method HandleToFile, boolean
			required in inHandle    ,D_HANDLE
            required in fileSpec    ,string
            endparams

            stack record ivars
                ok                  ,boolean
                ch                  ,int
            endrecord

            structure block
                                    ,a D_32K
            endstructure

        proc

            init ivars
            ok = true

            ;;Open the output file
            try
            begin
                open(ch=0,o,fileSpec)
            end
            catch (ex)
            begin
                ok = false
            end
            endtry

            if (ok)
            begin
                ;;Find out how much data we're dealing with, and calculate how
                ;;many puts will be required based on the current block size.
                data totalSize  ,int    ,%mem_proc(DM_GETSIZE,inHandle)

                ;;If we're on a 64-bit system, or if we're on a 32-bit system
                ;;and the size of the data is less than 64K, then we can write
                ;;the data out with a single PUTS.
.ifdef D_NETSTANDARD
                if (Environment.Is64BitProcess || (totalSize <= D_32BIT_MAX)) then
.else
                if ((D_ADDRSIZE==8)||(totalSize<=D_32BIT_MAX)) then
.endc
                begin
                    puts(ch,^m(inHandle))
                end
                else
                begin
                    data blocks     ,int    ,totalSize / D_32K
                    data characters ,int    ,totalSize - (blocks * D_32K)
                    data ix         ,int
                    ;;Write full blocks
                    for ix from 1 thru blocks
                        puts(ch,^m(block[ix],inHandle))
                    ;;Write remaining characters
                    if (characters)
                        puts(ch,^m(block[blocks+1](1:characters),inHandle))
                end
            end

            if (ch&&chopen(ch))
                close ch

            mreturn ok

        endmethod

; Use %STRING_FROM_HANDLE instead
;
;        public static method HandleToString, string
;            required in inHandle    ,D_HANDLE
;            endparams
;
;            structure block
;                                    ,a D_32BIT_MAX
;            endstructure
;
;            stack record
;                totalSize           ,int
;                outString           ,string
;            endrecord
;
;        proc
;
;            ;;Get the size of the handle to be copied
;            totalSize = %mem_proc(DM_GETSIZE,inHandle)
;
;            ;;If we're on a 64-bit system, or on a 32-bit system with data is
;            ;;less than 64K then we can copy the data all at once
;            if ((D_ADDRSIZE==8)||(totalSize<=D_32BIT_MAX)) then
;                outString = ^m(inHandle)
;            else
;            begin
;                ;;The data is over 64K so we'll have to copy it in 64k blocks
;                data blocks     ,int    ,totalSize / D_32BIT_MAX
;                data characters ,int    ,totalSize - (blocks * D_32BIT_MAX)
;                data ix, int
;                outString = ""
;
;                ;;Copy full blocks
;                for ix from 1 thru blocks
;                    outString = outString + ^m(block[ix],inHandle)
;
;                ;;Copy remaining characters
;                if (characters)
;                    outString = outString + ^m(block[blocks+1](1:characters),inHandle)
;            end
;
;            mreturn outString
;
;        endmethod

        public static method StringBetween, string
            required in inData      ,string
            required in startToken  ,string
            required in endToken    ,string
            endparams
            stack record
                outData             ,string
            endrecord
        proc
            outData = ""
            ;;Make sure the start token and end token are in the string
            if (inData.Contains(startToken)&&inData.Contains(endToken))
            begin
                data startPos       ,int
                data endPos         ,int
                startPos = inData.IndexOf(startToken,0) + startToken.Length
                endPos   = inData.LastIndexOf(endToken,inData.Length-1) -1
                outData  = inData.Substring(startPos,endPos-startPos+1)
            end
            mreturn outData
        endmethod

.ifdef D_NETSTANDARD
        public static method StringToFile, boolean
            required in inString    ,string
            required in fileSpec    ,string
            endparams
        proc
            try
            begin
                System.IO.File.WriteAllBytes(fileSpec,System.Text.Encoding.UTF8.GetBytes(inString))
            end
            catch (e, @Exception)
            begin
                mreturn false
            end
            endtry
            mreturn true
        endmethod
.else
        public static method StringToFile, boolean
            required in inString    ,string
            required in fileSpec    ,string
            endparams

            .define BLOCK_SIZE      65535

            stack record
                ok                  ,boolean
                ch                  ,int
            endrecord

        proc

            ok = true

            ;;Open the output file
            try
            begin
                open(ch=0,o,fileSpec)
            end
            catch (ex)
            begin
                ok = false
            end
            endtry

            if (ok)
            begin
                ;;If we're on a 64-bit system, or if we're on a 32-bit system
                ;;and the size of the data is less than 64K, then we can write
                ;;the data out with a single PUTS.
                if ((D_ADDRSIZE==8)||(inString.Length<=BLOCK_SIZE)) then
                begin
                    puts(ch,inString)
                end
                else
                begin
                    data blocks     ,int    ,inString.Length / BLOCK_SIZE
                    data characters ,int    ,inString.Length - (blocks*BLOCK_SIZE)
                    ;;Write full blocks
                    if (blocks)
                    begin
                        data ix, int
                        for ix from 1 thru blocks
                            puts(ch,inString((ix*BLOCK_SIZE)-(BLOCK_SIZE-1):BLOCK_SIZE))
                    end
                    ;;Write remaining characters
                    if (characters)
                        puts(ch,inString(((blocks+1)*BLOCK_SIZE)-(BLOCK_SIZE-1):characters))
                end
            end

            ;;Close the output file
            if (ch&&chopen(ch))
                close ch

            mreturn ok

        endmethod
.endc

; Use %HANDLE_FROM_STRING instead
;
;        public static method StringToHandle, void
;            required in  inString   ,string
;			required out outHandle  ,D_HANDLE
;            endparams
;
;            .define BLOCK_SIZE      65535
;
;            structure block
;                                    ,a BLOCK_SIZE
;            endstructure
;
;        proc
;
;            if ((inString==^null)||inString.Length==0)
;                mreturn
;
;            ;;Allocate memory
;            outHandle = %mem_proc(DM_ALLOC|DM_STATIC,inString.Length)
;
;            if (inString.Length <= BLOCK_SIZE)
;            then
;                ^m(outHandle) = inString
;            else
;            begin
;                ;;The data is over 64K so we'll have to copy it in 64K blocks
;                data blocks     ,int    ,inString.Length / BLOCK_SIZE
;                data characters ,int    ,inString.Length - (blocks*BLOCK_SIZE)
;                data ix         ,int
;
;                ;;Copy full blocks
;                for ix from 1 thru blocks
;                    ^m(block[ix],outHandle) =
;                    &   inString((ix*BLOCK_SIZE)-(BLOCK_SIZE-1):BLOCK_SIZE)
;
;                ;;Copy remaining data (less than a full block)
;                if (characters)
;                    ^m(block[blocks+1](1:characters),outHandle) =
;                    &   inString(((blocks+1)*BLOCK_SIZE)-(BLOCK_SIZE-1):characters)
;            end
;
;        endmethod

    endclass

endnamespace
