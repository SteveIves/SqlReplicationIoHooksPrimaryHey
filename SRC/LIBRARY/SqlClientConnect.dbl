;;*****************************************************************************
;;
;; Routine:     SqlClientConnect
;;
;; Description: Use SqlClient to connect to the database and configure the database environment.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Created:     29th January 2024
;;
;;*****************************************************************************
;;

.ifdef DBLNET

import ReplicationLibrary
import System.Data.SqlClient

function SqlClientConnect, boolean

    stack record
        length,     int
        dbstatus,   int
        dberrtxt,   a1024
    endrecord
proc
    data ok = true

    ;;Connect to the database

    Logger.VerboseLog("Connecting to database...")

    Settings.DatabaseConnection = new SqlConnection(Settings.DatabaseConnectString)

    try
    begin
        Settings.DatabaseConnection.Open()

        Logger.VerboseLog("Connected")
        Logger.VerboseLog("")

        ;Note: We do not need to set the database command execution timeout like we did
        ;in SQL Connection because it is set each time a SqlCommand is created.
    end
    catch (ex, @SqlException)
    begin
        Logger.ErrorLog("Failed to connect to database!")
        Logger.Log("Connect string was: " + Settings.DatabaseConnectString)
        Logger.Log("Error was : " + ex.Message)
        ok = false

        ;;If we're sending emails then send a message about the failure
        if (Settings.CanSendEmail())
        begin
            data body = new string[3]
            body[1] = "ERROR: Failed to connect to database!"
            body[2] = "Connect string was: " + Settings.DatabaseConnectString
            body[3] = "Error was :  " + dberrtxt(1,length)
            xcall SendEmail("ERROR: Replicator " + Settings.InstanceName + " failed to start!",body,false)
        end
    end
    endtry

    ;Enable SQL Server Auto-Commit (IMPLICIT TRANSACTIONS)?
    ;Should be ON by default, but we'll set it as we want it to be sure.

    if (ok)
    begin
        data sql, string

        using Settings.DatabaseCommitMode select
        (DatabaseCommitMode.Automatic),
        begin
            sql = "SET IMPLICIT_TRANSACTIONS ON"
        end
        (DatabaseCommitMode.Batch, DatabaseCommitMode.Manual),
        begin
            sql = "SET IMPLICIT_TRANSACTIONS OFF"
        end
        endusing

        try
        begin
            disposable data command = new SqlCommand(sql,Settings.DatabaseConnection) { 
            &    CommandTimeout = Settings.DatabaseTimeout
            &    }
            command.ExecuteNonQuery()
        end
        catch (ex, @SqlException)
        begin
            Logger.ErrorLog("Failed to configure implicit transaction mode! Error was " + ex.Message)
            ok = false

            ;;If we're sending emails then send a message about the failure
            if (Settings.CanSendEmail())
            begin
                data body = new string[2]
                body[1] = "ERROR: Failed to configure implicit transaction mode!"
                body[2] = "Error was :  " + ex.Message
                xcall SendEmail("ERROR: Replicator " + Settings.InstanceName + " failed to start!",body,false)
            end
        end
        endtry
    end

    ;In batch commit mode, begin the first transaction now

    if (ok && Settings.DatabaseCommitMode == DatabaseCommitMode.Batch)
    begin
        data transaction, boolean
        data errorMessage, string

        if (ok = %StartTransactionSqlClient(transaction,errorMessage)) then
        begin
            Counters.BatchCounter = 0
        end
        else
        begin
            Logger.ErrorLog(errorMessage)

            ;;If we're sending emails then send a message about the failure
            if (Settings.CanSendEmail())
            begin
                data body = new string[1]
                body[1] = errorMessage
                xcall SendEmail("ERROR: Replicator " + Settings.InstanceName + " failed to start!",body,false)
            end
        end
    end

    freturn ok

endfunction

.endc
