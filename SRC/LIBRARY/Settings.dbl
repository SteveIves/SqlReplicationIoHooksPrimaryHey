
.ifdef DBLNET
import Confluent.Kafka
import Microsoft.Data.SqlClient
.endc
import ReplicationLibrary
import System.Collections
import System.Text
import System.Text.Json

namespace ReplicationLibrary

    ;;; <summary>
    ;;; Represents various settings used within the replicator application.
    ;;; </summary>
.ifdef D_VMS
    public class Settings
.else
        public static class Settings
.endc
            ;;; <summary>
            ;;; Configure default settings
            ;;; Can't use a static constructor because VMS doesn't support them
            ;;; </summary>
            public static method Initialize, void
            proc
                ;Set defaults for internal properties
                DatabaseChannel         = 1
                InstructionChannel      = 0
                LogFileChannel          = 0
                RunningOnTerminal       = (%tnmbr >= 0)
                TerminalChannel         = 0
.ifdef DBLNET
            DatabaseConnection  = ^null
.endc
                ;If we're running on a terminal, open the terminal channel
                if (RunningOnTerminal)
                begin
                    data tmpchn, i4
                    open(tmpchn=0,o,"tt:")
                    Settings.TerminalChannel = tmpchn
                end

                EmailSettings.Initialize()

            endmethod

            ;---------------------------------------------------------------------------------------------------------
            ;Main instance settings

            private static mInstanceName, string

            ;;; <summary>
            ;;; The name of the replicator instance. The default instance name is DEFAULT. The instance name is used to
            ;;; discriminate between multiple instances of the replicator that might be active, each processing different
            ;;; data sets.
            ;;; </summary>
            public static property InstanceName, string
                method get
                proc
                    mreturn mInstanceName
                endmethod
                method set
                    record
                        now, a20
                    endrecord
                proc
                    now = %datetime
                    mInstanceName = value.ToUpper()
                    QueueFileName = "REPLICATOR_DATA:REPLICATION_" + mInstanceName + ".ISM"
                    LogFileName = "REPLICATOR_LOGDIR:REPLICATION_" + mInstanceName + "_" + now(1:8) + "_" + now(9:6) + ".LOG"
.ifdef DBLNET
                KafkaClientId = "REPLICATOR_" + mInstanceName
                KafkaTopicName = "REPLICATION_" + mInstanceName
                KafkaConsumerGroupName = "REPLICATION_" + mInstanceName + "_CONSUMERS"
.endc
                endmethod
            endproperty

            ;---------------------------------------------------------------------------------------------------------
            ;Instance configuration (set via ReplicatorConfig.json)

            ;;; <summary>
            ;;; The batch size to be used with bulk load operations.
            ;;; </summary>
            public static readwrite property BulkLoadBatchSize, int

            ;;; <summary>
            ;;; Database statement execution timeout for bulk load and indexing operations in seconds. The default value is 900 seconds (15 minutes).
            ;;; </summary>
            public static readwrite property BulkLoadTimeout, int

            ;;; <summary>
            ;;; If the replicator is in batch commit mode, how many rows constitute a batch?
            ;;; </summary>
            public static readwrite property CommitBatchSize, int

            ;;; <summary>
            ;;; The batch size to use when loading a database table via BCP
            ;;; </summary>
            public static readwrite property DatabaseBcpBatchSize, int, 25000

            ;;; <summary>
            ;;; The network packet size to use when loading a database table via BCP
            ;;; </summary>
            public static readwrite property DatabaseBcpPacketSize, int, 8192

            ;;; <summary>
            ;;; Database commit mode (Automatic, Manual or Batch).
            ;;; </summary>
            public static readwrite property DatabaseCommitMode, DatabaseCommitMode

            ;;; <summary>
            ;;; The name of the database connection to use
            ;;; </summary>
            public static readwrite property DatabaseConnectionName, string

            ;;; <summary>
            ;;; The name of the database within the SQL Server instance
            ;;; </summary>
            public static readwrite property DatabaseName, string ;,"SqlReplication"

            ;;; <summary>
            ;;; The password to be used to access the database
            ;;; </summary>
            public static readwrite property DatabasePassword, string

            ;;; <summary>
            ;;; How many seconds should replicator wait between database re-connect attempts?
            ;;; </summary>
            public static readwrite property DatabaseRetryDelay, int

            ;;; <summary>
            ;;; How many times should replicator attempt to re-connect to the database?
            ;;; </summary>
            public static readwrite property DatabaseRetryMax, int

            ;;; <summary>
            ;;; The name of the database schema that owns the tables
            ;;; </summary>
            public static readwrite property DatabaseSchema, string ;,"dbo"

            ;;; <summary>
            ;;; The name or IP address of the database server
            ;;; </summary>
            public static readwrite property DatabaseServer, string ;,"localhost"

            ;;; <summary>
            ;;; Database statement execution timeout in seconds. The default is 60 seconds.
            ;;; </summary>
            public static readwrite property DatabaseTimeout, int

            ;;; <summary>
            ;;; The database user to be used to access the database
            ;;; </summary>
            public static readwrite property DatabaseUser, string ;,"replicator"

            ;;; <summary>
            ;;; Use data compression for tables and indexes?
            ;;; </summary>
            public static readwrite property DataCompressionMode, DatabaseDataCompression

            ;;; <summary>
            ;;; Is the instance enabled?
            ;;; </summary>
            public static readwrite property Enabled, boolean

            ;;; <summary>
            ;;; How many seconds should we sleep after processing an error?
            ;;; </summary>
            public static readwrite property ErrorSleepTime, decimal

            ;;; <summary>
            ;;; Is the use of FileService enabled?
            ;;; </summary>
            public static readwrite property FileServiceEnabled, boolean

            ;;; <summary>
            ;;; The name or IP address of the system running FileService
            ;;; </summary>
            public static readwrite property FileServiceHost, string

            ;;; <summary>
            ;;; The IP port number that FileService is listening on
            ;;; </summary>
            public static readwrite property FileServicePort, int
.ifdef DBLNET
        ;;; <summary>
        ;;; The name(s) or IP addresses and ports of the Kafka servers to use (Kafka queue mode only)?
        ;;; Set automatically to REPLICATION_<InstanceName>
        ;;; </summary>
        public static readwrite property KafkaServers, string
.endc
            ;;; <summary>
            ;;; Where should export files be created locally?
            ;;; </summary>
            public static readwrite property LocalExportPath, string

            ;;; <summary>
            ;;; Log bulk load exceptions to a log file?
            ;;; </summary>
            public static readwrite property LogBulkLoadExceptions, boolean

            ;;; <summary>
            ;;; Include key data in debug logs?
            ;;; </summary>
            public static readwrite property LogKeyValues, boolean

            ;;; <summary>
            ;;; Should we report progress when bulk loading tables?
            ;;; </summary>
            public static readwrite property LogLoadProgress, boolean

            ;;; <summary>
            ;;; Maximum number of columns in a database table (SQL Connection only)
            ;;; </summary>
            public static readwrite property MaxColumns, int

            ;;; <summary>
            ;;; Maximum number of database cursors (SQL Connection only)
            ;;; </summary>
            public static readwrite property MaxCursors, int

            ;;; <summary>
            ;;; How many times should replicator attempt to re-connect to a remote queue file?
            ;;; </summary>
            public static readwrite property QueueReconnectAttempts, int

            ;;; <summary>
            ;;; How many seconds should replicator wait between remote queue file re-connect attempts?
            ;;; </summary>
            public static readwrite property QueueReconnectDelay, int

            ;;; <summary>
            ;;; Queue type (ISAM File, Kafka MQ).
            ;;; </summary>
            public static readwrite property QueueType, MessageQueueType

            ;;; <summary>
            ;;; How many seconds should we sleep when we run out of instructions to process?
            ;;; </summary>
            public static readwrite property SleepTime, int

            ;;; <summary>
            ;;; Where possible, should we re-use SqlCommand objects?  (SqlClient mode only)
            ;;; </summary>
            public static readwrite property SqlCommandReuse, boolean

            ;;; <summary>
            ;;; Should we stop processing and close if we encounter an error?
            ;;; </summary>
            public static readwrite property StopOnError, boolean

            ;;; <summary>
            ;;; Should we also log to the system log?
            ;;; </summary>
            public static readwrite property SystemLogging, boolean

            ;;; <summary>
            ;;; Are we doing verbose logging?
            ;;; </summary>
            public static readwrite property VerboseLogging, boolean

            ;------------------------------------------------------------------------------------------------
            ; Internal stuff below here

.region "Internal properties"

            ;;; <summary>
            ;;; A synergy namespace used to store information about SDMS channels that the replicator currently has open
            ;;; </summary>
            public static readwrite property ChannelInfo, i4

            ;;; <summary>
            ;;; The database channel that represents our connection to the database (SQL Connection only).
            ;;; </summary>
            public static readwrite property DatabaseChannel, i4

            ;;; <summary>
            ;;; Is the database currently connected?
            ;;; </summary>  
            public static readwrite property DatabaseConnected, boolean

            ;;; <summary>
            ;;; Are we using Synergy SQL Connection or Microsoft SqlClient to interact with the database
            ;;; </summary>
            public static readwrite property DatabaseConnectMode, DatabaseConnectionMode

            ;;; <summary>
            ;;; The database connections defined in the configuration file
            ;;; </summary>
            public static readwrite property DatabaseConnections, [#]@DatabaseConnection

            ;;; <summary>
            ;;; Database connect string
            ;;; </summary>
            public static readwrite property DatabaseConnectString, string

.ifdef DBLNET
        ;;; <summary>
        ;;; The connection to the database (Microsoft SqlClient only)
        ;;; </summary>
        public static readwrite property DatabaseConnection, @SqlConnection

        ;;; <summary>
        ;;; The current transaction (Microsoft SqlClient mode only)
        ;;; </summary>
        public static readwrite property CurrentTransaction, @SqlTransaction
.endc

            ;;; <summary>
            ;;; The main data directory where the replicator configuration (and maybe ISAM queue files) are located.
            ;;; </summary>
            public static readwrite property DataDirectory, string

            ;;; <summary>
            ;;; The channel number of the replication instruction file (ISAM queue mode only)
            ;;; </summary>
            public static readwrite property InstructionChannel, i4

.ifdef DBLNET

        ;;; <summary>
        ;;; A unique identifier for this consumer. (Kafka queue mode only)?
        ;;; Set automatically to REPLICATOR_<InstanceName>
        ;;; </summary>
        public static readwrite property KafkaClientId, string

        ;;; <summary>
        ;;; In Kafka queue mode this is the "consumer" that essentially is the
        ;;; connection to the Kafka queue (topic).
        ;;; </summary>
        public static readwrite property KafkaConsumer, @IConsumer<string,string>

        ;;; <summary>
        ;;; What is the name of the Kafka consumer group (Kafka queue mode only)?
        ;;; Set automatically to REPLICATION_<InstanceName>_CONSUMERS
        ;;; </summary>
        public static readwrite property KafkaConsumerGroupName, string

        ;;; <summary>
        ;;; What is the name of the Kafka topic (Kafka queue mode only)?
        ;;; Set automatically to REPLICATION_<InstanceName>
        ;;; </summary>
        public static readwrite property KafkaTopicName, string
.endc
            ;;; <summary>
            ;;; The file spec of the instances log file
            ;;; Set automatically to REPLICATOR_LOGDIR:REPLICATION_<InstanceName>_<yyyymmdd>_<hhmmss>.LOG"
            ;;; </summary>
            public static readwrite property LogFileName, string

            ;;; <summary>
            ;;; The channel that the replicator log file is open on.
            ;;; Set automatically when ValidateBasicEnvironment calls Logger.OpenLog()
            ;;; </summary>
            public static readwrite property LogFileChannel, i4

            ;;; <summary>
            ;;; The name of the replicator queue file (ISAM queue mode only).
            ;;; Set automatically to REPLICATOR_DATA:REPLICATION_<InstanceName>.ISM"
            ;;; </summary>
            public static readwrite property QueueFileName, string

            ;;; <summary>
            ;;; Are we attached to a terminal?
            ;;; Set automatically if terminal number >= 0.
            ;;; </summary>
            public static readwrite property RunningOnTerminal, boolean

            ;;; <summary>
            ;;; If running interactively, the channel number of the terminal.
            ;;; Channel opened and set automatically if RunningOnTerminal is true.
            ;;; </summary>
            public static readwrite property TerminalChannel, i4

            ;;; <summary>
            ;;; An array of valid instance names based on the instances defined in the JSON configuration file
            ;;; </summary>
            public static readwrite property ValidInstanceNames, [#]string

            ;;; <summary>
            ;;; An array of valid table names based on the TableMaps defined for the instance in the JSON configuration file
            ;;; </summary>
            public static readwrite property ValidTableNames, [#]string

.endregion

.region "Methods"

            ;;; <summary>
            ;;; Are we able to use bulk load?
            ;;; </summary>
            ;;; <returns>Returns true if we have all the data, but does not guarantee that bulk upload will work!</returns>
            public static method CanBulkLoad, boolean
            proc
                if (DatabaseIsRemote()) then
                begin
                    ;If the database is remote we need file service to be enabled, and have a host name or IP and port number
                    mreturn (
                    &    Settings.FileServiceEnabled
                    &    && !String.IsNullOrWhitespace(FileServiceHost)
                    &    && Settings.FileServicePort > 0
                    &    )
                end
                else
                begin
                    ;If the database is local we can always bulk load
                    mreturn true
                end
            endmethod

            ;;; <summary>
            ;;; Are we able to use bulk copy?
            ;;; </summary>
            ;;; <returns>Returns true if we have all the data, but does not guarantee that bulk upload will work!</returns>
            public static method CanBulkCopy, boolean
            proc
                ;TODO: * * * NEEDS IMPLEMENTING ASAP * * *
                mreturn true
            endmethod

            ;;; <summary>
            ;;; Is the database that we are connecting to with SQL Connection remote?
            ;;; </summary>
            ;;; <returns>Returns true if the database is remote, otherwise false.</returns>
            public static method DatabaseIsRemote, boolean
            proc
                using Settings.DatabaseConnectMode select
                (DatabaseConnectionMode.SqlConnection),
                begin
                    mreturn DatabaseConnectString.ToLower().StartsWith("net:")
                end
.ifdef DBLNET
            (DatabaseConnectionMode.SqlClient),
            begin
                data constr=DatabaseConnectString.ToLower()
                mreturn (!constr.Contains("data source=.") 
                &   && !constr.Contains("data source=localhost") 
                &   && !constr.Contains("data source=(local)") 
                &   && !constr.Contains(String.Format("data source={0}",Environment.MachineName.ToLower())))
            end
.endc
                endusing
            
            endmethod

            ;;; <summary>
            ;;; Utility method to read in a file from disk and return that file
            ;;; content parsed through JsonDocument.Parse
            ;;; </summary>
            ;;; <param name="filePath"></param>
            ;;; <returns></returns>
            public static method ParseConfigFile, @JsonDocument
                record
                    jsonFileContent, @StringBuilder
                    firstBrace, int
                    channel, int
                    buffer, a1024
                    plays,string
                endrecord
            proc
                jsonFileContent = new StringBuilder()
                open(channel=0,i,"REPLICATOR_DATA:ReplicatorConfig.json")

                while (true)
                begin
                    reads(channel,buffer,eof)
                    if (firstBrace < 1)
                    begin
                        xcall instr(1, buffer, '{', firstBrace)
                        if (firstBrace >= 1)
                            buffer = buffer(firstBrace:1024-firstBrace)
                    end
                    jsonFileContent.Append(%atrim(buffer))
                    nextloop
                eof,
                    jsonFileContent.Append(%atrim(buffer))
                    exitloop
                end
                close(channel)
                plays=jsonFileContent.ToString()
                mreturn JsonDocument.Parse(jsonFileContent.ToString())
            endmethod

            ;;; <summary>
            ;;; Loads settings from the JSON configuration file
            ;;; </summary>
            ;;; <param name="errorMessage">Returned error message (if return value is false)</param>
            ;;; <returns>Retuens true on success, or false</returns>
            public static method Load, boolean
                required out errorMessage, string
                stack record
                    ok,                 boolean
                    clValues,           @ArrayList
                    length,             int
                    envval,             a1024
                    envlen,             i4
                    doc,                @JsonDocument
                    instanceDefaults,   @InstanceDefaultSettings
.ifdef DBLNET
                    dbConnections,      JsonElement
                    dbConnection,       JsonElement
                    defaults,           JsonElement
                    instances,          JsonElement
                    instance,           JsonElement
                    setting,            JsonElement
                    emailsetting,       JsonElement
                    emailAddress,       JsonElement
                    tablemaps,          JsonElement
                    tablemap,           JsonElement
.else
                    dbConnections,      @JsonElement
                    dbConnection,       @JsonElement
                    defaults,           @JsonElement
                    instances,          @JsonElement
                    instance,           @JsonElement
                    setting,            @JsonElement
                    emailsetting,       @JsonElement
                    emailAddress,       @JsonElement
                    tablemaps,          @JsonElement
                    tablemap,           @JsonElement
.endc
                endrecord
                external function
                    xsubr,  ^val
                endexternal
            proc
                ok = true
                errorMessage = ""

                ;Parse the JSON configuration file

                try
                begin
                    doc = Settings.ParseConfigFile()
                end
                catch (e, @Exception)
                begin
                    errorMessage = "Failed to parse configuration file!"
                    ok = false
                end
                endtry

                ;--------------------------------------------------------------------------------------------------------
                ;DatabaseConnections

                if (ok)
                begin
                    if (!doc.RootElement.TryGetProperty("DatabaseConnections",dbConnections)) then
                    begin
                        errorMessage = "Configuration must have a DatabaseConnections property!"
                        ok = false
                    end
                    else if (dbConnections.ValueKind != JsonValueKind.Array) then
                    begin
                        errorMessage = "DatabaseConnections must be an array!"
                        ok = false
                    end
                    else if (dbConnections.GetArrayLength() == 0)
                    begin
                        errorMessage = "DatabaseConnections must contain at least one DatabaseConnection object!"
                        ok = false
                    end
                end

                if (ok)
                begin
                    ;Iterate and load the database connections
                    data connectionCount = dbConnections.GetArrayLength()
                    data connectionNumber, int

                    ;TODO: Compiler bug: ReplicationLibrary. should not be necessary but without it the compiler picke the wrong type
                    Settings.DatabaseConnections = new ReplicationLibrary.DatabaseConnection[connectionCount]

                    for connectionNumber from 0 thru connectionCount - 1
                    begin
                        data dbc = new DatabaseConnection()

                        dbConnection = dbConnections[connectionNumber]

                        if (dbConnection.ValueKind != JsonValueKind.Object)
                        begin
                            errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "] is not a DatabaseConnection object!"
                            ok = false
                        end

                        ;Name
                        if (ok)
                        begin
                            if (!dbConnection.TryGetProperty("Name",setting)) then
                            begin
                                errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "] has no Name!"
                                ok = false
                            end
                            else if (setting.ValueKind != JsonValueKind.String) then
                            begin
                                errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Name is not a string!"
                                ok = false
                            end
                            else if (String.IsNullOrWhitespace(setting.GetString())) then
                            begin
                                errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Name has no value!"
                                ok = false
                            end
                            else
                            begin
                                dbc.Name = setting.GetString()
                            end
                        end

                        ;Mode
                        if (ok)
                        begin
                            if (!dbConnection.TryGetProperty("Mode",setting)) then
                            begin
                                errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "] has no Mode!"
                                ok = false
                            end
                            else if (setting.ValueKind != JsonValueKind.String) then
                            begin
                                errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Mode is not a string!"
                                ok = false
                            end
                            else if (String.IsNullOrWhitespace(setting.GetString())) then
                            begin
                                errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Mode has no value!"
                                ok = false
                            end
                            else
                            begin
                                using setting.GetString().ToUpper() select
                                ("SQLCONNECTION"),
                                    dbc.Mode = DatabaseConnectionMode.SqlConnection
                                ("SQLCLIENT"),
                                    dbc.Mode = DatabaseConnectionMode.SqlClient
                                ("SDMS"),
                                    dbc.Mode = DatabaseConnectionMode.SDMS
                                (),
                                begin
                                    errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].Mode has an invalid value!"
                                    ok = false
                                end
                                endusing
                            end
                        end

                        ;ConnectString (Used for environment variables in SDMS mode)
                        if (!dbConnection.TryGetProperty("ConnectString",setting)) then
                        begin
                            errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "] has no ConnectString!"
                            ok = false
                        end
                        else if (setting.ValueKind != JsonValueKind.String) then
                        begin
                            errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].ConnectString is not a string!"
                            ok = false
                        end
                        else if (String.IsNullOrWhitespace(setting.GetString())) then
                        begin
                            errorMessage = "DatabaseConnections[" + %string(connectionNumber+1) + "].ConnectString has no value!"
                            ok = false
                        end
                        else
                        begin
                            dbc.ConnectString = setting.GetString()
                        end

                        if (!ok)
                            exitloop

                        Settings.DatabaseConnections[connectionNumber+1] = dbc
                    end
                end

                ;--------------------------------------------------------------------------------------------------------
                ;InstanceDefaults

                if (ok)
                begin
                    if (!doc.RootElement.TryGetProperty("InstanceDefaults",defaults)) then
                    begin
                        errorMessage = "Configuration must have an InstanceDefaults property!"
                        ok = false
                    end
                    else if (defaults.ValueKind != JsonValueKind.Object) then
                    begin
                        errorMessage = "InstanceDefaults must be an object!"
                        ok = false
                    end
                    else
                    begin
                        try
                        begin
                            instanceDefaults = new InstanceDefaultSettings(defaults)
                        end
                        catch (ex, @Exception)
                        begin
                            errorMessage = ex.Message
                            ok = false
                        end
                        endtry
                    end
                end

                ;--------------------------------------------------------------------------------------------------------
                ;Instances

                if (ok)
                begin
                    if (!doc.RootElement.TryGetProperty("Instances",instances)) then
                    begin
                        errorMessage = "Configuration must have an Instances property!"
                        ok = false
                    end
                    else if (instances.ValueKind != JsonValueKind.Array) then
                    begin
                        errorMessage = "Instances must be an array!"
                        ok = false
                    end
                    else if (instances.GetArrayLength() == 0)
                    begin
                        errorMessage = "Instances must contain at least one object!"
                        ok = false
                    end
                end

                ;Find the instance configuration for our instance name

                if (ok)
                begin
                    data instanceCount = instances.GetArrayLength()
                    data instanceNumber = 0
                    data ourInstanceNumber = -1

                    Settings.ValidInstanceNames = new string[instanceCount]

                    for instanceNumber from 0 thru instanceCount - 1
                    begin
                        instance = instances[instanceNumber]

                        ;Does this element contain the settings for our instance?

                        if (!instance.TryGetProperty("InstanceName",setting))
                        begin
                            errorMessage = "Instance[" + %string(instanceNumber+1) + "] has no InstanceName!"
                            ok = false
                            exitloop
                        end

                        if (setting.ValueKind != JsonValueKind.String)
                        begin
                            errorMessage = "Instance[" + %string(instanceNumber+1) + "] InstanceName is not a string!"
                            ok = false
                            exitloop
                        end

                        ;Add this instance to the array of valid instance names
                        Settings.ValidInstanceNames[instanceNumber+1] = setting.GetString().ToUpper()

                        ;Is this the instance we're looking for?
                        if (setting.GetString().ToUpper() == Settings.InstanceName) 
                        begin
                            ;Yes
                            ourInstanceNumber = instanceNumber
                        end
                    end

                    ;Did we find our instance settings?
                    if (ok && (ourInstanceNumber!=-1)) then
                    begin
                        instance = instances[ourInstanceNumber]
                    end
                    else
                    begin
                        errorMessage = "No settings found for instance " + Settings.InstanceName
                        ok = false
                    end
                end

                ;--------------------------------------------------------------------------------------------------------
                ;Apply default settings to the new instance configuration

                if (ok)
                begin
                    Settings.BulkLoadBatchSize      = instanceDefaults.BulkLoadBatchSize
                    Settings.BulkLoadTimeout        = instanceDefaults.BulkLoadTimeout
                    Settings.CommitBatchSize        = instanceDefaults.CommitBatchSize
                    Settings.DatabaseBcpBatchSize   = instanceDefaults.DatabaseBcpBatchSize
                    Settings.DatabaseBcpPacketSize  = instanceDefaults.DatabaseBcpPacketSize
                    Settings.DatabaseCommitMode     = instanceDefaults.DatabaseCommitMode
                    Settings.DatabaseConnectionName = instanceDefaults.DatabaseConnectionName
                    begin
                        data dbc, @DatabaseConnection
                        foreach dbc in Settings.DatabaseConnections
                        begin
                            if (dbc.Name.ToUpper().Equals(Settings.DatabaseConnectionName.ToUpper()))
                            begin
                                Settings.DatabaseConnectString = dbc.ConnectString
                                Settings.DatabaseConnectMode = dbc.Mode
                            end
                        end
                    end
                    Settings.DatabaseName           = instanceDefaults.DatabaseName
                    Settings.DatabasePassword       = instanceDefaults.DatabasePassword
                    Settings.DatabaseRetryDelay     = instanceDefaults.DatabaseRetryDelay
                    Settings.DatabaseRetryMax       = instanceDefaults.DatabaseRetryMax
                    Settings.DatabaseSchema         = instanceDefaults.DatabaseSchema
                    Settings.DatabaseServer         = instanceDefaults.DatabaseServer
                    Settings.DatabaseTimeout        = instanceDefaults.DatabaseTimeout
                    Settings.DatabaseUser           = instanceDefaults.DatabaseUser
                    Settings.DataCompressionMode    = instanceDefaults.DataCompressionMode
                    Settings.ErrorSleepTime         = instanceDefaults.ErrorSleepTime
                    Settings.FileServiceEnabled     = instanceDefaults.FileServiceEnabled
                    Settings.FileServiceHost        = instanceDefaults.FileServiceHost
                    Settings.FileServicePort        = instanceDefaults.FileServicePort
.ifdef DBLNET
                    Settings.KafkaServers           = instanceDefaults.KafkaServers
.endc
                    Settings.LocalExportPath        = instanceDefaults.LocalExportPath
                    Settings.LogBulkLoadExceptions  = instanceDefaults.LogBulkLoadExceptions
                    Settings.LogKeyValues           = instanceDefaults.LogKeyValues
                    Settings.LogLoadProgress        = instanceDefaults.LogLoadProgress
                    Settings.MaxColumns             = instanceDefaults.MaxColumns
                    Settings.MaxCursors             = instanceDefaults.MaxCursors
                    Settings.QueueReconnectAttempts = instanceDefaults.QueueReconnectAttempts
                    Settings.QueueReconnectDelay    = instanceDefaults.QueueReconnectDelay
                    Settings.QueueType              = instanceDefaults.QueueType
                    Settings.SleepTime              = instanceDefaults.SleepTime
                    Settings.SqlCommandReuse        = instanceDefaults.SqlCommandReuse
                    Settings.StopOnError            = instanceDefaults.StopOnError
                    Settings.SystemLogging          = instanceDefaults.SystemLogging
                    Settings.VerboseLogging         = instanceDefaults.VerboseLogging
                end

                ;--------------------------------------------------------------------------------------------------------
                ;Apply instance specific settings

                if (ok)
                begin
                    ;Enabled
                    if (instance.TryGetProperty("Enabled",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "Enabled must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            Settings.Enabled = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;BulkLoadBatchSize
                    if (instance.TryGetProperty("BulkLoadBatchSize",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1000) then
                        begin
                            errorMessage = "BulkLoadBatchSize must have an integer value >= 1000!"
                            ok = false
                        end
                        else
                        begin
                            Settings.BulkLoadBatchSize = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;BulkLoadTimeout
                    if (instance.TryGetProperty("BulkLoadTimeout",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<60) then
                        begin
                            errorMessage = "BulkLoadTimeout must have an integer value >= 60!"
                            ok = false
                        end
                        else
                        begin
                            Settings.BulkLoadTimeout = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;CommitBatchSize
                    if (instance.TryGetProperty("CommitBatchSize",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<100) then
                        begin
                            errorMessage = "CommitBatchSize must have an integervalue >= 100!"
                            ok = false
                        end
                        else
                        begin
                            Settings.CommitBatchSize = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;DatabaseBcpBatchSize
                    if (ok)
                    begin
                        if (instance.TryGetProperty("DatabaseBcpBatchSize",setting))
                        begin
                            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<100  || setting.GetInt32()>50000) then
                            begin
                                errorMessage = "DatabaseBcpBatchSize must have an integer value between 100 and 50000!"
                                ok = false
                            end
                            else
                            begin
                                Settings.DatabaseBcpBatchSize = setting.GetInt32()
                            end
                        end
                    end

                    ;DatabaseBcpPacketSize
                    if (ok)
                    begin
                        if (instance.TryGetProperty("DatabaseBcpPacketSize",setting))
                        begin
                            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<4096 || setting.GetInt32()>65535) then
                            begin
                                errorMessage = "DatabaseBcpPacketSize must have an integer value between 4096 and 65535!"
                                ok = false
                            end
                            else
                            begin
                                Settings.DatabaseBcpPacketSize = setting.GetInt32()
                            end
                        end
                    end

                    ;DatabaseCommitMode
                    if (instance.TryGetProperty("DatabaseCommitMode",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                        begin
                            ok = false
                        end
                        else
                        begin
                            using setting.GetString().ToUpper() select
                            ("AUTOMATIC"),
                                Settings.DatabaseCommitMode = DatabaseCommitMode.Automatic
                            ("BATCH"),
                                Settings.DatabaseCommitMode = DatabaseCommitMode.Batch
                            ("MANUAL"),
                                Settings.DatabaseCommitMode = DatabaseCommitMode.Manual
                            (),
                                ok = false
                            endusing
                        end
                        if (!ok)
                        begin
                            errorMessage = "DatabaseCommitMode must be Automatic, Batch or Manual!"
                        end
                    end
                    if (!ok) exit

                    ;DatabaseConnectionName
                    if (instance.TryGetProperty("DatabaseConnectionName",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                        begin
                            errorMessage = "DatabaseConnectionName must have a non-blank string value!"
                            ok = false
                        end
                        else
                        begin
                            data dbc, @DatabaseConnection
                            Settings.DatabaseConnectionName = setting.GetString()
                            Settings.DatabaseConnectString = ^null

                            foreach dbc in Settings.DatabaseConnections
                            begin
                                if (dbc.Name.ToUpper().Equals(Settings.DatabaseConnectionName.ToUpper()))
                                begin
                                    Settings.DatabaseConnectString = dbc.ConnectString
                                    Settings.DatabaseConnectMode = dbc.Mode
                                end
                            end

                            if (String.IsNullOrWhitespace(Settings.DatabaseConnectString))
                            begin
                                errorMessage = "DatabaseConnectionName does not match an entry in DatabaseConnections!"
                                ok = false
                            end
                        end
                    end
                    if (!ok) exit

                    ;DatabaseName
                    if (ok)
                    begin
                        if (instance.TryGetProperty("DatabaseName",setting))
                        begin
                            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                            begin
                                errorMessage = "DatabaseName must have a non-blank string value!"
                                ok = false
                            end
                            else
                            begin
                                Settings.DatabaseName = setting.GetString()
                            end
                        end
                    end

                    ;DatabasePassword
                    if (ok)
                    begin
                        if (instance.TryGetProperty("DatabasePassword",setting))
                        begin
                            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                            begin
                                errorMessage = "DatabasePassword must have a non-blank string value!"
                                ok = false
                            end
                            else
                            begin
                                Settings.DatabasePassword = setting.GetString()
                            end
                        end
                    end

                    ;DatabaseRetryDelay
                    if (instance.TryGetProperty("DatabaseRetryDelay",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "DatabaseRetryDelay have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.DatabaseRetryDelay = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;DatabaseRetryMax
                    if (instance.TryGetProperty("DatabaseRetryMax",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "DatabaseRetryMax have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.DatabaseRetryMax = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;DatabaseSchema
                    if (ok)
                    begin
                        if (instance.TryGetProperty("DatabaseSchema",setting))
                        begin
                            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                            begin
                                errorMessage = "DatabaseSchema must have a non-blank string value!"
                                ok = false
                            end
                            else
                            begin
                                Settings.DatabaseSchema = setting.GetString()
                            end
                        end
                    end

                    ;DatabaseServer
                    if (ok)
                    begin
                        if (instance.TryGetProperty("DatabaseServer",setting))
                        begin
                            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                            begin
                                errorMessage = "DatabaseServer must have a non-blank string value!"
                                ok = false
                            end
                            else
                            begin
                                Settings.DatabaseServer = setting.GetString()
                            end
                        end
                    end

                    ;DatabaseTimeout
                    if (instance.TryGetProperty("DatabaseTimeout",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "DatabaseTimeout must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.DatabaseTimeout = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;DatabaseUser
                    if (ok)
                    begin
                        if (instance.TryGetProperty("DatabaseUser",setting))
                        begin
                            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                            begin
                                errorMessage = "DatabaseUser must have a non-blank string value!"
                                ok = false
                            end
                            else
                            begin
                                Settings.DatabaseUser = setting.GetString()
                            end
                        end
                    end

                    ;DataCompressionMode
                    if (instance.TryGetProperty("DataCompressionMode",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                        begin
                            ok = false
                        end
                        else
                        begin
                            using setting.GetString().ToUpper() select
                            ("NONE"),
                                Settings.DataCompressionMode = DatabaseDataCompression.None
                            ("PAGE"),
                                Settings.DataCompressionMode = DatabaseDataCompression.Page
                            ("ROW"),
                                Settings.DataCompressionMode = DatabaseDataCompression.Row
                            (),
                                ok = false
                            endusing
                        end
                    end
                    if (!ok)
                    begin
                        errorMessage = "DataCompressionMode must be None, Page or Row!"
                    end
                    if (!ok) exit

                    ;ErrorSleepTime
                    if (instance.TryGetProperty("ErrorSleepTime",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetDecimal()<=0) then
                        begin
                            errorMessage = "ErrorSleepTime must have a positive decimal value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.ErrorSleepTime = setting.GetDecimal()
                        end
                    end
                    if (!ok) exit

                    ;FileServiceEnabled
                    if (instance.TryGetProperty("FileServiceEnabled",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "FileServiceEnabled must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            Settings.FileServiceEnabled = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;FileServiceHost
                    if (instance.TryGetProperty("FileServiceHost",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.String) then
                        begin
                            errorMessage = "FileServiceHost must have a string value (ip address or DNS name)!"
                            ok = false
                        end
                        else
                        begin
                            Settings.FileServiceHost = setting.GetString()
                        end
                    end
                    if (!ok) exit

                    ;FileServicePort
                    if (instance.TryGetProperty("FileServicePort",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<=0) then
                        begin
                            errorMessage = "FileServicePort must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.FileServicePort = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;KafkaServers
.ifdef DBLNET
                    if (ok)
                    begin
                        if (instance.TryGetProperty("KafkaServers",setting))
                        begin
                            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                            begin
                                errorMessage = "KafkaServers must have a non-blank string value!"
                                ok = false
                            end
                            else
                            begin
                                Settings.KafkaServers = setting.GetString()
                            end
                        end
                    end
.endc
                    ;LocalExportPath
                    if (instance.TryGetProperty("LocalExportPath",setting))
                    begin
                        if (setting.ValueKind != JsonValueKind.String) then
                        begin
                            ok = false
                        end
                        else if (!String.IsNullOrWhitespace(setting.GetString()))
                        begin
                            ;Check that we can create a file in the directory
                            data tmpch, i4
                            try
                            begin
                                data tmpfile = setting.GetString() + %datetime + ".tmp"
                                open(tmpch=0,o,tmpfile)
                                Settings.LocalExportPath = setting.GetString()
                            end
                            catch (e, @Exception)
                            begin
                                ok = false
                            end
                            finally
                            begin
                                if (tmpch && %chopen(tmpch))
                                    close tmpch
                            end
                            endtry
                        end
                    end
                    if (!ok)
                    begin
                        errorMessage = "LocalExportPath must have a string value and be a valid path!"
                    end
                    if (!ok) exit

                    ;LogBulkLoadExceptions
                    if (instance.TryGetProperty("LogBulkLoadExceptions",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "LogBulkLoadExceptions must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            Settings.LogBulkLoadExceptions = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;LogKeyValues
                    if (instance.TryGetProperty("LogKeyValues",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "LogKeyValues must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            Settings.LogKeyValues = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;LogLoadProgress
                    if (instance.TryGetProperty("LogLoadProgress",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "LogLoadProgress must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            Settings.LogLoadProgress = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;MaxColumns
                    if (instance.TryGetProperty("MaxColumns",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "MaxColumns must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.MaxColumns = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;MaxCursors
                    if (instance.TryGetProperty("MaxCursors",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "MaxCursors must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.MaxCursors = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;QueueReconnectAttempts
                    if (instance.TryGetProperty("QueueReconnectAttempts",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "QueueReconnectAttempts must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.QueueReconnectAttempts = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;QueueReconnectDelay
                    if (instance.TryGetProperty("QueueReconnectDelay",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "QueueReconnectDelay must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.QueueReconnectDelay = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;QueueType
                    if (instance.TryGetProperty("QueueType",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                        begin
                            ok = false
                        end
                        else
                        begin
                            using setting.GetString().ToUpper() select
                            ("ISAMFILE"),
                                Settings.QueueType = MessageQueueType.IsamFile
                            ("KAFKA"),
.ifdef DBLNET
                                Settings.QueueType = MessageQueueType.Kafka
.else
                                ok = false
.endc
                            (),
                                ok = false
                            endusing
                        end
                    end
                    if (!ok)
                    begin
                        errorMessage = "QueueType must be IsamFile or Kafka (.NET only)!"
                    end
                    if (!ok) exit

                    ;SleepTime
                    if (instance.TryGetProperty("SleepTime",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "SleepTime must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            Settings.SleepTime = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;SqlCommandReuse
                    if (instance.TryGetProperty("SqlCommandReuse",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "SqlCommandReuse must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            Settings.SqlCommandReuse = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;StopOnError
                    if (instance.TryGetProperty("StopOnError",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "StopOnError must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            Settings.StopOnError = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;SystemLogging
                    if (instance.TryGetProperty("SystemLogging",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "SystemLogging must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            Settings.SystemLogging = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;VerboseLogging
                    if (instance.TryGetProperty("VerboseLogging",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "VerboseLogging must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            Settings.VerboseLogging = setting.GetBoolean()
                        end
                    end
                end

                ;--------------------------------------------------------------------------------------------------------
                ;Email settings

                if (ok)
                begin
                    if (doc.RootElement.TryGetProperty("EmailSettings",emailsetting))
                    begin
                        if (emailsetting.ValueKind != JsonValueKind.Object)
                        begin
                            errorMessage = "EmailSettings must be an object containing other email settings!"
                            ok = false
                        end
                    end
                    if (!ok) exit

                    ;Enabled
                    if (emailsetting.TryGetProperty("Enabled",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "EmailSettings.Enabled must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.SmtpUseSSL = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;SmtpServer
                    if (emailsetting.TryGetProperty("SmtpServer",setting))
                    begin
                        if (setting.ValueKind != JsonValueKind.String) then
                        begin
                            errorMessage = "EmailSettings.SmtpServer must be a string containing a DNS name or IP address!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.SmtpServer = setting.GetString()
                        end
                    end
                    if (!ok) exit

                    ;SmtpPort
                    if (emailsetting.TryGetProperty("SmtpPort",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "EmailSettings.SmtpPort must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.SmtpPort = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;SmtpUsername
                    if (emailsetting.TryGetProperty("SmtpUsername",setting))
                    begin
                        if (setting.ValueKind != JsonValueKind.String) then
                        begin
                            errorMessage = "EmailSettings.SmtpUsername must have a string value!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.SmtpUsername = setting.GetString()
                        end
                    end
                    if (!ok) exit

                    ;SmtpPassword
                    if (emailsetting.TryGetProperty("SmtpPassword",setting))
                    begin
                        if (setting.ValueKind != JsonValueKind.String) then
                        begin
                            errorMessage = "EmailSettings.SmtpPassword must have a string value!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.SmtpPassword = setting.GetString()
                        end
                    end
                    if (!ok) exit

                    ;SmtpUseSSL
                    if (emailsetting.TryGetProperty("SmtpUseSSL",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                        begin
                            errorMessage = "EmailSettings.SmtpUseSSL must be true or false!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.SmtpUseSSL = setting.GetBoolean()
                        end
                    end
                    if (!ok) exit

                    ;SenderAddress
                    if (emailsetting.TryGetProperty("SenderAddress",setting))
                    begin
                        if (setting.ValueKind != JsonValueKind.String) then
                        begin
                            errorMessage = "EmailSettings.SenderAddress must have a string value!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.SenderAddress = setting.GetString()
                        end
                    end
                    if (!ok) exit

                    ;SenderName
                    if (emailsetting.TryGetProperty("SenderName",setting))
                    begin
                        if (setting.ValueKind != JsonValueKind.String) then
                        begin
                            errorMessage = "EmailSettings.SenderName must have a string value!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.SenderName = setting.GetString()
                        end
                    end
                    if (!ok) exit

                    ;Recipients
                    if (!emailsetting.TryGetProperty("Recipients",setting) || setting.ValueKind!=JsonValueKind.Array || setting.GetArrayLength()==0) then
                    begin
                        ok = false
                    end
                    else
                    begin
                        data addressCount = setting.GetArrayLength()
                        data addressNumber, int

                        EmailSettings.Recipients = new String[addressCount]

                        for addressNumber from 0 thru addressCount - 1
                        begin
                            emailAddress = setting[addressNumber]

                            if (emailAddress.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(emailAddress.GetString())) then
                            begin
                                ok = false
                            end
                            else
                            begin
                                EmailSettings.Recipients[addressNumber+1] = emailAddress.GetString()
                            end
                        end
                    end
                    if (!ok)
                    begin
                        errorMessage = "EmailSettings.Recipients must be an array containing at least one email address!"
                    end
                    if (!ok) exit

                    ;ErrorsBeforePause
                    if (emailsetting.TryGetProperty("ErrorsBeforePause",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "EmailSettings.ErrorsBeforePause must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.ErrorsBeforePause = setting.GetInt32()
                        end
                    end
                    if (!ok) exit

                    ;ErrorPauseMinutes
                    if (emailsetting.TryGetProperty("ErrorPauseMinutes",setting))
                    begin
                        if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                        begin
                            errorMessage = "EmailSettings.ErrorPauseMinutes must have a positive integer value!"
                            ok = false
                        end
                        else
                        begin
                            EmailSettings.ErrorPauseMinutes = setting.GetInt32()
                        end
                    end
                    if (!ok) exit
                end

                ;--------------------------------------------------------------------------------------------------------
                ;TableMaps

                if (ok)
                begin
                    if (ok)
                    begin
                        if (!doc.RootElement.TryGetProperty("TableMaps",tablemaps)) then
                        begin
                            errorMessage = "Configuration must have a Instances TableMaps!"
                            ok = false
                        end
                        else if (tablemaps.ValueKind != JsonValueKind.Array) then
                        begin
                            errorMessage = "TableMaps must be an array!"
                            ok = false
                        end
                        else if (tablemaps.GetArrayLength() == 0)
                        begin
                            errorMessage = "TableMaps must contain at least one object!"
                            ok = false
                        end
                    end

                    ;Find all table maps for our instance name

                    if (ok)
                    begin
                        data tableMapsCount = tablemaps.GetArrayLength()
                        data tableMapNumber = 0
                        data ourTableNames = new ArrayList()

                        for tableMapNumber from 0 thru tableMapsCount - 1
                        begin
                            tablemap = tablemaps[tableMapNumber]

                            ;Check there is an Instance property
                            if (!tablemap.TryGetProperty("Instance",setting))
                            begin
                                errorMessage = "TableMap[" + %string(tableMapNumber+1) + "] has no Instance property!"
                                ok = false
                                exitloop
                            end

                            ;Check the Instance property is a string
                            if (setting.ValueKind != JsonValueKind.String)
                            begin
                                errorMessage = "TableMap[" + %string(tableMapNumber+1) + "].Instance is not a string!"
                                ok = false
                                exitloop
                            end

                            ;Check if the table mapping is for our instance
                            if (!setting.GetString().ToUpper().Equals(Settings.InstanceName))
                            begin
                                ;This mapping is not for our instance
                                nextloop
                            end

                            ;Check there is an Enabled property
                            if (!tablemap.TryGetProperty("Enabled",setting))
                            begin
                                errorMessage = "TableMap[" + %string(tableMapNumber+1) + "] has no Enabled property!"
                                ok = false
                                exitloop
                            end

                            ;Check the Enabled property is a boolean
                            if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False)
                            begin
                                errorMessage = "TableMap[" + %string(tableMapNumber+1) + "].Enabled is not boolean!"
                                ok = false
                                exitloop
                            end

                            ;Check whether the mapping is enabled?
                            if (setting.GetBoolean() == false)
                            begin
                                ;The current mapping is disabled
                                nextloop
                            end

                            ;Check that there is a FileName property, and it's a non-blank string
                            if (!tablemap.TryGetProperty("FileName",setting)) then
                            begin
                                errorMessage = "TableMap[" + %string(tableMapNumber+1) + "] has no FileName property!"
                                ok = false
                            end
                            else if (setting.ValueKind != JsonValueKind.String) then
                            begin
                                errorMessage = "TableMap[" + %string(tableMapNumber+1) + "].FileName is not a string!"
                                ok = false
                            end
                            else if (String.IsNullOrWhitespace(setting.GetString())) then
                            begin
                                errorMessage = "TableMap[" + %string(tableMapNumber+1) + "].FileName has no value!"
                                ok = false
                            end
                            else
                            begin
                                ;Found one!
                                ourTableNames.Add(setting.GetString().ToUpper())
                            end
                        end

                        ;Did we find our instance settings?
                        if (ok && (ourTableNames.Count>0)) then
                        begin
                            data ix, int
                            Settings.ValidTableNames = new String[ourTableNames.Count]
                            for ix from 0 thru ourTableNames.Count - 1
                            begin
                                Settings.ValidTableNames[ix+1] = (string)ourTableNames[ix]
                            end
                        end
                        else
                        begin
                            errorMessage = "No table mappings were found for instance " + Settings.InstanceName
                            ok = false
                        end
                    end
                end

                ;--------------------------------------------------------------------------------------------------------
                ;Validations

.ifdef DBLNET
                if (ok && Settings.QueueType==MessageQueueType.Kafka && String.IsNullOrWhitespace(Settings.KafkaServers))
                begin
                    errorMessage = "Can't use Kafka queue mode because KafkaServers has not been set!"
                    ok = false
                end

                ;Regardless of what configuration data says, there is no commit mode in SDMS mode
                if (ok && Settings.DatabaseConnectMode == DatabaseConnectionMode.SDMS)
                begin
                    Settings.DatabaseCommitMode = DatabaseCommitMode.None
                end
.else
                if (ok && Settings.DatabaseConnectMode == DatabaseConnectionMode.SqlClient)
                begin
                    errorMessage = "SqlClient mode is only supported in .NET!"
                    ok = false
                end

                if (ok && Settings.DatabaseConnectMode == DatabaseConnectionMode.SDMS)
                begin
                    errorMessage = "SDMS mode is only supported in .NET!"
                    ok = false
                end
.endc
                if (ok && String.IsNullOrWhitespace(Settings.DatabaseConnectString) && Settings.DatabaseConnectMode != DatabaseConnectionMode.SDMS)
                begin
                    errorMessage = "No database connection string is defined!"
                    ok = false
                end

                mreturn ok
            
            endmethod

.endregion

        endclass

        structure strStructureData
            structure_name,     a32     ;Name of structure
            structure_size,     i4      ;Record length
            structure_keynum,   i4      ;Key number of unique key being used
            structure_type,     a10     ;Type (DBL ISAM, RELATIVE)
        endstructure

        ; Do not change these values, they are processed via their integer value in the SqlIO routines!
        public enum DatabaseCommitMode
            None,               0       ;For SDMS mode
            Automatic,          1
            Batch,              2
            Manual,             3
        endenum

        ; Do not change these values, they are processed via their integer value in the SqlIO routines!
        public enum DatabaseDataCompression
            None,       1
            Row,        2
            Page,       3
        endenum

        public enum MessageQueueType
            IsamFile,           1
            Kafka,              2
        endenum

        endnamespace
