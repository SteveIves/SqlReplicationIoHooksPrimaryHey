
import System.Collections
.ifdef DBLNET
import System.Data.SqlClient
.endc
import System.Text
import System.Text.Json

namespace ReplicationLibrary

    ;;; <summary>
    ;;; Represents various settings used within the replicator application.
    ;;; </summary>
.ifdef D_VMS
    public class Settings
.else
    public static class Settings
.endc

        ;;; <summary>
        ;;; Configure default settings
        ;;; Can't use a static constructor because VMS doesn't support them
        ;;; </summary>
        public static method Initialize, void
        proc
            ;Instance name is ALWAYS set by %ValidateBasicEnvironment
            InstanceName            = "DEFAULT"

            ;Set defaults for properties configurable via ReplicatorConfig.json
            BulkLoadBatchSize       = 10000
            BulkLoadTimeout         = 900
            CommitBatchSize         = 1000
            DatabaseCommitMode      = DatabaseCommitMode.Batch
            DatabaseConnectMode     = DatabaseConnectionMode.SqlConnection
            DatabaseConnectString   = ""
            DatabaseRetryDelay      = 30
            DatabaseRetryMax        = 10
            DatabaseTimeout         = 60
            DataCompressionMode     = DatabaseDataCompression.None
            EmailSender             = ^null
            EmailServer             = ^null
            Enabled                 = true
            ErrorEmail              = ^null
            ErrorSleepTime          = 0.01
            FileServiceHost         = ^null
            FileServicePort         = 0
            LocalExportPath         = ^null
            LogBulkLoadExceptions   = false
            LogKeyValues            = false
            LogLoadProgress         = false
            MaxColumns              = 254
            MaxCursors              = 128
            QueueReconnectAttempts  = 10
            QueueReconnectDelay     = 30
            QueueType               = MessageQueueType.IsamFile
            SleepTime               = 2
            StopOnError             = false
            SystemLogging           = false
            VerboseLogging          = false

            ;Set defaults for internal properties
            DatabaseChannel         = 1
.ifdef DBLNET
            DatabaseConnection  = ^null
.endc
            InstructionChannel      = 0
            LogFileChannel          = 0
            RunningOnTerminal       = (%tnmbr >= 0)
            TerminalChannel         = 0

        endmethod

        ;---------------------------------------------------------------------------------------------------------
        ;Main instance settings

        private static mInstanceName, string

        ;;; <summary>
        ;;; The name of the replicator instance. The default instance name is DEFAULT. The instance name is used to
        ;;; discriminate between multiple instances of the replicator that might be active, each processing different
        ;;; data sets.
        ;;; </summary>
        public static property InstanceName, string
            method get
            proc
                mreturn mInstanceName
            endmethod
            method set
                record
                    now, a20
                endrecord
            proc
                now = %datetime
                mInstanceName = value.ToUpper()
                QueueFileName = "REPLICATOR_DATA:REPLICATION_" + mInstanceName + ".ISM"
                LogFileName = "REPLICATOR_LOGDIR:REPLICATION_" + mInstanceName + "_" + now(1:8) + "_" + now(9:6) + ".LOG"
                KafkaTopicName = "REPLICATION_" + mInstanceName
            endmethod
        endproperty

        ;---------------------------------------------------------------------------------------------------------
        ;Instance configuration (set via ReplicatorConfig.json)

        ;;; <summary>
        ;;; The batch size to be used with bulk load operations.
        ;;; </summary>
        public static readwrite property BulkLoadBatchSize, int

        ;;; <summary>
        ;;; Database statement execution timeout for bulk load and indexing operations in seconds. The default value is 900 seconds (15 minutes).
        ;;; </summary>
        public static readwrite property BulkLoadTimeout, int

        ;;; <summary>
        ;;; If the replicator is in batch commit mode, how many rows constitute a batch?
        ;;; </summary>
        public static readwrite property CommitBatchSize, int

        ;;; <summary>
        ;;; Database commit mode (Automatic, Manual or Batch).
        ;;; </summary>
        public static readwrite property DatabaseCommitMode, DatabaseCommitMode

        ;;; <summary>
        ;;; Are we using Synergy SQL Connection or Microsoft SqlClient to interact with the database
        ;;; </summary>
        public static readwrite property DatabaseConnectMode, DatabaseConnectionMode

        ;;; <summary>
        ;;; Database connection string.
        ;;; </summary>
        public static readwrite property DatabaseConnectString, string

        ;;; <summary>
        ;;; How many seconds should replicator wait between database re-connect attempts?
        ;;; </summary>
        public static readwrite property DatabaseRetryDelay, int

        ;;; <summary>
        ;;; How many times should replicator attempt to re-connect to the database?
        ;;; </summary>
        public static readwrite property DatabaseRetryMax, int

        ;;; <summary>
        ;;; Database statement execution timeout in seconds. The default is 60 seconds.
        ;;; </summary>
        public static readwrite property DatabaseTimeout, int

        ;;; <summary>
        ;;; Use data compression for tables and indexes?
        ;;; </summary>
        public static readwrite property DataCompressionMode, DatabaseDataCompression

        ;;; <summary>
        ;;; The email address to be used as the sender of status messages.
        ;;; </summary>
        public static readwrite property EmailSender, string

        ;;; <summary>
        ;;; The DNS name or IP address of the SMTP server to use to send email messages.
        ;;; The SMTP server must be configured to accept messages from unauthenticated sources.
        ;;; </summary>
        public static readwrite property EmailServer, string

        ;;; <summary>
        ;;; Is the instance enabled?
        ;;; </summary>
        public static readwrite property Enabled, boolean

        ;;; <summary>
        ;;; The email address or addresses to send status messages to.
        ;;; One or more email addresses seperated by commas.
        ;;; </summary>
        public static readwrite property ErrorEmail, string

        ;;; <summary>
        ;;; How many seconds should we sleep after processing an error?
        ;;; </summary>
        public static readwrite property ErrorSleepTime, decimal

        ;;; <summary>
        ;;; The name or IP address of the system running FileService
        ;;; </summary>
        public static readwrite property FileServiceHost, string

        ;;; <summary>
        ;;; The IP port number that FileService is listening on
        ;;; </summary>
        public static readwrite property FileServicePort, int

        ;;; <summary>
        ;;; Where should export files be created locally?
        ;;; </summary>
        public static readwrite property LocalExportPath, string

        ;;; <summary>
        ;;; Log bulk load exceptions to a log file?
        ;;; </summary>
        public static readwrite property LogBulkLoadExceptions, boolean

        ;;; <summary>
        ;;; Include key data in debug logs?
        ;;; </summary>
        public static readwrite property LogKeyValues, boolean

        ;;; <summary>
        ;;; Should we report progress when bulk loading tables?
        ;;; </summary>
        public static readwrite property LogLoadProgress, boolean

        ;;; <summary>
        ;;; Maximum number of columns in a database table
        ;;; </summary>
        public static readwrite property MaxColumns, int

        ;;; <summary>
        ;;; Maximum number of database cursors
        ;;; </summary>
        public static readwrite property MaxCursors, int

        ;;; <summary>
        ;;; How many times should replicator attempt to re-connect to a remote queue file?
        ;;; </summary>
        public static readwrite property QueueReconnectAttempts, int

        ;;; <summary>
        ;;; How many seconds should replicator wait between remote queue file re-connect attempts?
        ;;; </summary>
        public static readwrite property QueueReconnectDelay, int

        ;;; <summary>
        ;;; Queue type (ISAM File, Kafka MQ).
        ;;; </summary>
        public static readwrite property QueueType, MessageQueueType

        ;;; <summary>
        ;;; How many seconds should we sleep when we run out of instructions to process?
        ;;; </summary>
        public static readwrite property SleepTime, int

        ;;; <summary>
        ;;; Should we stop processing and close if we encounter an error?
        ;;; </summary>
        public static readwrite property StopOnError, boolean

        ;;; <summary>
        ;;; Should we also log to the system log?
        ;;; </summary>
        public static readwrite property SystemLogging, boolean

        ;;; <summary>
        ;;; Are we doing verbose logging?
        ;;; </summary>
        public static readwrite property VerboseLogging, boolean

        ;------------------------------------------------------------------------------------------------
        ; Internal stuff below here

.region "Internal properties"

        ;;; <summary>
        ;;; A synergy namespace used to store information about SDMS channels that the replicator currently has open
        ;;; </summary>
        public static readwrite property ChannelInfo, i4

        ;;; <summary>
        ;;; The SQL Connection database channel that represents our connection to the database.
        ;;; </summary>
        public static readwrite property DatabaseChannel, i4

.ifdef DBLNET
        ;;; <summary>
        ;;; If using Microsoft SqlClient, this is the connection to the database
        ;;; </summary>
        public static readwrite property DatabaseConnection, @SqlConnection
.endc

        ;;; <summary>
        ;;; The main data directory where the replicator configuration (and maybe ISAM queue files) are located.
        ;;; </summary>
        public static readwrite property DataDirectory, string

        ;;; <summary>
        ;;; The channel number of the replication instruction file.
        ;;; </summary>
        public static readwrite property InstructionChannel, i4

        ;;; <summary>
        ;;; What is the name of the Kafka topic (when in Kafka mode)?
        ;;; </summary>
        public static readwrite property KafkaTopicName, string

        ;;; <summary>
        ;;; The file spec of the instances log file
        ;;; </summary>
        public static readwrite property LogFileName, string

        ;;; <summary>
        ;;; The channel that the replicator log file is open on.
        ;;; </summary>
        public static readwrite property LogFileChannel, i4

        ;;; <summary>
        ;;; The name of the replicator queue file (when is ISAM mode).
        ;;; If running in interactive mode this will be TT:
        ;;; </summary>
        public static readwrite property QueueFileName, string

        ;;; <summary>
        ;;; Are we attached to a terminal?
        ;;; </summary>
        public static readwrite property RunningOnTerminal, boolean

        ;;; <summary>
        ;;; If running interactively, the channel number of the terminal.
        ;;; </summary>
        public static readwrite property TerminalChannel, i4

.endregion

.region "Methods"

        ;;; <summary>
        ;;; Are we able to use bulk load?
        ;;; </summary>
        ;;; <returns>Returns true if we have all the data, but does not guarantee that bulk upload will work!</returns>
        public static method CanBulkLoad, boolean
        proc
            ;TODO: ENHANCEMENT: On windows we can also bulk load IF the database is on the same server as the replicator
            using Settings.DatabaseConnectMode select
            (DatabaseConnectionMode.SqlConnection),
            begin
                mreturn (!DatabaseConnectString.ToLower().StartsWith("net:") || (FileServiceHost!=^null && FileServicePort > 0))
            end
            (DatabaseConnectionMode.SqlClient),
            begin
                mreturn !String.IsNullOrWhitespace(FileServiceHost) && Settings.FileServicePort > 0
            end
            (),
            begin
                mreturn false
            end
            endusing
        endmethod

        ;;; <summary>
        ;;; Are we able to send email messages. In order for this to return true we must have values
        ;;; for EmailError, EmailServer, EmailSender and EmailDomain.
        ;;; </summary>
        ;;; <returns>Returns true if we have all the data, but does not guarantee that email can be sent!</returns>
        public static method CanSendEmail, boolean
        proc
            mreturn (ErrorEmail != ^null && ErrorEmail.Length>0 && EmailServer != ^null && EmailServer.Length>0 && EmailSender != ^null && EmailSender.Length>0)
        endmethod

        ;;; <summary>
        ;;; Utility method to read in a file from disk and return that file
        ;;; content parsed through JsonDocument.Parse
        ;;; </summary>
        ;;; <param name="filePath"></param>
        ;;; <returns></returns>
        public static method ParseConfigFile, @JsonDocument
            record
                jsonFileContent, @StringBuilder
                firstBrace, int
                channel, int
                buffer, a1024
                plays,string
            endrecord
        proc
            jsonFileContent = new StringBuilder()
            open(channel=0,i,"REPLICATOR_DATA:ReplicatorConfig.json")

            while (true)
            begin
                reads(channel,buffer,eof)
                if (firstBrace < 1)
                begin
                    xcall instr(1, buffer, '{', firstBrace)
                    if (firstBrace >= 1)
                        buffer = buffer(firstBrace:1024-firstBrace)
                end
                jsonFileContent.Append(%atrim(buffer))
                nextloop
            eof,
                jsonFileContent.Append(%atrim(buffer))
                exitloop
            end
            close(channel)
            plays=jsonFileContent.ToString()
            mreturn JsonDocument.Parse(jsonFileContent.ToString())
        endmethod

.endregion

    endclass

    structure strStructureData
        structure_name,     a32    ;;Name of structure
        structure_size,     i4     ;;Record length
        structure_keynum,   i4     ;;Key number of unique key being used
        structure_type,     a10    ;;Type (DBL ISAM, RELATIVE)
    endstructure

    ;; Do not change these values, they are processed via their integer value in the SqlIO routines!
    public enum DatabaseCommitMode
        Automatic,          1
        Batch,              2
        Manual,             3
    endenum

    ;; Do not change these values, they are processed via their integer value in the SqlIO routines!
    public enum DatabaseDataCompression
        None,       1
        Row,        2
        Page,       3
    endenum

    public enum MessageQueueType
        IsamFile,           1
        Kafka,              2
    endenum

    public enum DatabaseConnectionMode
        SqlConnection,      1
        SqlClient,          2
    endenum

endnamespace
