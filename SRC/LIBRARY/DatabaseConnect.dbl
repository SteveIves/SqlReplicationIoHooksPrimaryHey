;;*****************************************************************************
;;
;; Routine:     DatabaseConnect
;;
;; Description: Connect to the database and configure the database environment.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Created:     30th December 2019
;;
;;*****************************************************************************
;;

import ReplicationLibrary

function DatabaseConnect, boolean

    .include "CONNECTDIR:ssql.def"

    stack record
        ok,         boolean
        length,     int
        dbstatus,   int
        dberrtxt,   a1024
    endrecord
proc
    ;;Connect to the database

    Logger.VerboseLog("Connecting to database...")
    if (%ssc_connect(Settings.DatabaseChannel,Settings.DatabaseConnectString)==SSQL_NORMAL) then
    begin
        Logger.VerboseLog("Connected")
        Logger.VerboseLog("")
        ok = true

        ;;Set the SQL statement execution timeout
        if (%ssc_cmd(Settings.DatabaseChannel,,SSQL_TIMEOUT,%string(Settings.DatabaseTimeout))!=SSQL_NORMAL)
        begin
            dbstatus = %ssc_getemsg(Settings.DatabaseChannel,dberrtxt,length)
            Logger.ErrorLog("Failed to set database execution timeout to " + %string(Settings.DatabaseTimeout) + " seconds!")
            Logger.Log("Error was : " + dberrtxt(1,length))
            ok = false

            ;;If we're sending emails then let's record the error
            if (Settings.CanSendEmail())
            begin
                data body = new string[3]
                body[1] = "ERROR: Failed to set database timeout!"
                body[2] = "Specified timeout value was " + %string(Settings.DatabaseTimeout) + " seconds"
                body[3] = "Error was :  " + dberrtxt(1,length)
                xcall SendEmail("ERROR: Replicator " + Settings.InstanceName + " failed to set database timeout!",body,false,^null)
            end
        end
    end
    else
    begin
        ;;Failed to connect
        dbstatus = %ssc_getemsg(Settings.DatabaseChannel,dberrtxt,length)
        Logger.ErrorLog("Failed to connect to database!")
        Logger.Log("Connect string was: " + Settings.DatabaseConnectString)
        Logger.Log("Error was : " + dberrtxt(1,length))
        ok = false

        ;;If we're sending emails then let's record the connect failure
        if (Settings.CanSendEmail())
        begin
            data body = new string[3]
            body[1] = "ERROR: Failed to connect to database!"
            body[2] = "Connect string was: " + Settings.DatabaseConnectString
            body[3] = "Error was :  " + dberrtxt(1,length)
            xcall SendEmail("ERROR: Replicator " + Settings.InstanceName + " failed to connect to database!",body,false,^null)
        end
    end

    ;;Enable SQL Server Auto-Commit mode?

    if (ok)
    begin
        using Settings.DatabaseCommitMode select
        (DatabaseCommitMode.Automatic),
        begin
            ;Should be ON by default, but just in case it's not
            dbstatus = %ssc_cmd(Settings.DatabaseChannel,,SSQL_ODBC_AUTOCOMMIT,"yes")
        end
        (DatabaseCommitMode.Batch),
        begin
            ;Should be OFF by default, but just in case it's not
            dbstatus = %ssc_cmd(Settings.DatabaseChannel,,SSQL_ODBC_AUTOCOMMIT,"no")
            ;In batch mode, begin the first stransation now
            dbstatus = %ssc_commit(Settings.DatabaseChannel,SSQL_TXON)
            Counters.BatchCounter = 0
        end
        (DatabaseCommitMode.Manual),
        begin
            ;Should be OFF by default, but just in case it's not
            dbstatus = %ssc_cmd(Settings.DatabaseChannel,,SSQL_ODBC_AUTOCOMMIT,"no")
        end
        endusing
    end

    freturn ok

endfunction

