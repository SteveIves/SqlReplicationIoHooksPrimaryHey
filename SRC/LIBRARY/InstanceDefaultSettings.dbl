
import System.Text
import System.Text.Json

namespace ReplicationLibrary

    public class InstanceDefaultSettings

        public method InstanceDefaultSettings
.ifdef DBLNET
            required in defaults, JsonElement
.else
            required in defaults, @JsonElement
.endc
            required out errorMessage, string
            stack record
                ok, boolean
.ifdef DBLNET
                setting,            JsonElement
.else
                setting,            @JsonElement
.endc
            endrecord 
        proc
            ok = true
            errorMessage = ""

            ;TODO: Compiler bug? Can't set these two as initial values!
            this.DatabaseConnectionName = "DEFAULT"
            this.DatabaseName = "SqlReplication"
            this.DatabasePassword = ""
            this.DatabaseSchema = "dbo"
            this.DatabaseServer = "localhost"
            this.DatabaseServer = "replicator"
            this.FileServiceHost = "localhost"

            ;BulkLoadBatchSize

            if (ok)
            begin
                if (defaults.TryGetProperty("BulkLoadBatchSize",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1000) then
                    begin
                        errorMessage = "InstanceDefaults.BulkLoadBatchSize must have an integer value >= 1000!"
                        ok = false
                    end
                    else
                    begin
                        BulkLoadBatchSize = setting.GetInt32()
                    end
                end
            end

            ;BulkLoadTimeout

            if (ok)
            begin
                if (defaults.TryGetProperty("BulkLoadTimeout",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<60) then
                    begin
                        errorMessage = "InstanceDefaults.BulkLoadTimeout must have an integer value >= 60!"
                        ok = false
                    end
                    else
                    begin
                        BulkLoadTimeout = setting.GetInt32()
                    end
                end
            end

            ;CommitBatchSize

            if (ok)
            begin
                if (defaults.TryGetProperty("CommitBatchSize",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<100) then
                    begin
                        errorMessage = "InstanceDefaults.CommitBatchSize must have an integer value >= 100!"
                        ok = false
                    end
                    else
                    begin
                        CommitBatchSize = setting.GetInt32()
                    end
                end
            end

            ;DatabaseBcpBatchSize

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseBcpBatchSize",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<100  || setting.GetInt32()>50000) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseBcpBatchSize must have an integer value between 100 and 50000!"
                        ok = false
                    end
                    else
                    begin
                        DatabaseBcpBatchSize = setting.GetInt32()
                    end
                end
            end

            ;DatabaseBcpPacketSize

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseBcpPacketSize",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<4096 || setting.GetInt32()>65535) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseBcpPacketSize must have an integer value between 4096 and 65535!"
                        ok = false
                    end
                    else
                    begin
                        DatabaseBcpPacketSize = setting.GetInt32()
                    end
                end
            end

            ;DatabaseCommitMode

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseCommitMode",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    begin
                        ok = false
                    end
                    else
                    begin
                        using setting.GetString().ToUpper() select
                        ("AUTOMATIC"),
                            DatabaseCommitMode = DatabaseCommitMode.Automatic
                        ("BATCH"),
                            DatabaseCommitMode = DatabaseCommitMode.Batch
                        ("MANUAL"),
                            DatabaseCommitMode = DatabaseCommitMode.Manual
                        (),
                            ok = false
                        endusing
                    end
                    if (!ok)
                    begin
                        errorMessage = "InstanceDefaults.DatabaseCommitMode must be Automatic, Batch or Manual!"
                    end
                end
            end

            ;DatabaseConnectionName

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseConnectionName",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseConnectionName must have a non-blank string value!"
                        ok = false
                    end
                    else
                    begin
                        data dbc, @DatabaseConnection
                        data connectionNameIsValid = false

                        foreach dbc in Settings.DatabaseConnections
                        begin
                            if (dbc.Name.ToUpper().Equals(setting.GetString().ToUpper()))
                                begin
                                connectionNameIsValid = true
                                exitloop
                            end
                        end

                        if (connectionNameIsValid) then
                        begin
                            DatabaseConnectionName = setting.GetString()
                        end
                        else
                        begin
                            errorMessage = "InstanceDefaults.DatabaseConnectionName does not match an entry in DatabaseConnections!"
                            ok = false
                        end
                    end
                end
            end

            ;DatabaseName

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseName",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseName must have a non-blank string value!"
                        ok = false
                    end
                    else
                    begin
                        DatabaseName = setting.GetString()
                    end
                end
            end

            ;DatabasePassword

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabasePassword",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    begin
                        errorMessage = "InstanceDefaults.DatabasePassword must have a non-blank string value!"
                        ok = false
                    end
                    else
                    begin
                        DatabasePassword = setting.GetString()
                    end
                end
            end

            ;DatabaseRetryDelay

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseRetryDelay",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseRetryDelay have a positive integer value!"
                        ok = false
                    end
                    else
                    begin
                        DatabaseRetryDelay = setting.GetInt32()
                    end
                end
            end

            ;DatabaseRetryMax

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseRetryMax",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseRetryMax have a positive integer value!"
                        ok = false
                    end
                    else
                    begin
                        DatabaseRetryMax = setting.GetInt32()
                    end
                end
            end

            ;DatabaseSchema

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseSchema",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseSchema must have a non-blank string value!"
                        ok = false
                    end
                    else
                    begin
                        DatabaseSchema = setting.GetString()
                    end
                end
            end

            ;DatabaseServer

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseServer",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseServer must have a non-blank string value!"
                        ok = false
                    end
                    else
                    begin
                        DatabaseServer = setting.GetString()
                    end
                end
            end

            ;DatabaseTimeout

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseTimeout",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseTimeout must have a positive integer value!"
                        ok = false
                    end
                    else
                    begin
                        DatabaseTimeout = setting.GetInt32()
                    end
                end
            end

            ;DatabaseUser

            if (ok)
            begin
                if (defaults.TryGetProperty("DatabaseUser",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    begin
                        errorMessage = "InstanceDefaults.DatabaseUser must have a non-blank string value!"
                        ok = false
                    end
                    else
                    begin
                        DatabaseUser = setting.GetString()
                    end
                end
            end

            ;DataCompressionMode

            if (ok)
            begin
                if (defaults.TryGetProperty("DataCompressionMode",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    begin
                        ok = false
                    end
                    else
                    begin
                        using setting.GetString().ToUpper() select
                        ("NONE"),
                            DataCompressionMode = DatabaseDataCompression.None
                        ("PAGE"),
                            DataCompressionMode = DatabaseDataCompression.Page
                        ("ROW"),
                            DataCompressionMode = DatabaseDataCompression.Row
                        (),
                            ok = false
                        endusing
                    end
                end
                if (!ok)
                begin
                    errorMessage = "InstanceDefaults.DataCompressionMode must be None, Page or Row!"
                end
            end

            ;ErrorSleepTime

            if (ok)
            begin
                if (defaults.TryGetProperty("ErrorSleepTime",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetDecimal()<=0) then
                    begin
                        errorMessage = "ErrorSleepTime must have a positive decimal value!"
                        ok = false
                    end
                    else
                    begin
                        ErrorSleepTime = setting.GetDecimal()
                    end
                end
            end

            ;FileServiceEnabled

            if (ok)
            begin
                if (defaults.TryGetProperty("FileServiceEnabled",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                    begin
                        errorMessage = "InstanceDefaults.FileServiceEnabled must be true or false!"
                        ok = false
                    end
                    else
                    begin
                        FileServiceEnabled = setting.GetBoolean()
                    end
                end
            end

            ;FileServiceHost

            if (ok)
            begin
                if (defaults.TryGetProperty("FileServiceHost",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String) then
                    begin
                        errorMessage = "InstanceDefaults.FileServiceHost must have a string value (ip address or DNS name)!"
                        ok = false
                    end
                    else
                    begin
                        FileServiceHost = setting.GetString()
                    end
                end
            end

            ;FileServicePort

            if (ok)
            begin
                if (defaults.TryGetProperty("FileServicePort",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<=0) then
                    begin
                        errorMessage = "InstanceDefaults.FileServicePort must have a positive integer value!"
                        ok = false
                    end
                    else
                    begin
                        FileServicePort = setting.GetInt32()
                    end
                end
            end

            ;KafkaServers
.ifdef DBLNET
            if (ok)
            begin
                if (defaults.TryGetProperty("KafkaServers",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String) then
                    begin
                        errorMessage = "InstanceDefaults.KafkaServers must have a string value (list of ip address or DNS names and ports)!"
                        ok = false
                    end
                    else
                    begin
                        KafkaServers = setting.GetString()
                    end
                end
            end
.endc
            ;LocalExportPath

            if (ok)
            begin
                if (defaults.TryGetProperty("LocalExportPath",setting))
                begin
                    if (setting.ValueKind != JsonValueKind.String) then
                    begin
                        ok = false
                    end
                    else if (!String.IsNullOrWhitespace(setting.GetString()))
                    begin
                        ;Check that we can create a file in the directory
                        data tmpch, i4
                        try
                        begin
                            data tmpfile = setting.GetString() + %datetime + ".tmp"
                            open(tmpch=0,o,tmpfile)
                            LocalExportPath = setting.GetString()
                        end
                        catch (e, @Exception)
                        begin
                            ok = false
                        end
                        finally
                        begin
                            if (tmpch && %chopen(tmpch))
                                close tmpch
                        end
                        endtry
                    end
                end
                if (!ok)
                begin
                    errorMessage = "InstanceDefaults.LocalExportPath must have a string value and be a valid path!"
                end
            end

            ;LogBulkLoadExceptions

            if (ok)
            begin
                if (defaults.TryGetProperty("LogBulkLoadExceptions",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                    begin
                        errorMessage = "LogBulkLoadExceptions must be true or false!"
                        ok = false
                    end
                    else
                    begin
                        LogBulkLoadExceptions = setting.GetBoolean()
                    end
                end
            end

            ;LogKeyValues

            if (ok)
            begin
                if (defaults.TryGetProperty("LogKeyValues",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                    begin
                        errorMessage = "InstanceDefaults.LogKeyValues must be true or false!"
                        ok = false
                    end
                    else
                    begin
                        LogKeyValues = setting.GetBoolean()
                    end
                end
            end

            ;LogLoadProgress

            if (ok)
            begin
                if (defaults.TryGetProperty("LogLoadProgress",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                    begin
                        errorMessage = "InstanceDefaults.LogLoadProgress must be true or false!"
                        ok = false
                    end
                    else
                    begin
                        LogLoadProgress = setting.GetBoolean()
                    end
                end
            end

            ;MaxColumns

            if (ok)
            begin
                if (defaults.TryGetProperty("MaxColumns",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                    begin
                        errorMessage = "InstanceDefaults.MaxColumns must have a positive integer value!"
                        ok = false
                    end
                    else
                    begin
                        MaxColumns = setting.GetInt32()
                    end
                end
            end

            ;MaxCursors

            if (ok)
            begin
                if (defaults.TryGetProperty("MaxCursors",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                    begin
                        errorMessage = "InstanceDefaults.MaxCursors must have a positive integer value!"
                        ok = false
                    end
                    else
                    begin
                        MaxCursors = setting.GetInt32()
                    end
                end
            end

            ;QueueReconnectAttempts

            if (ok)
            begin
                if (defaults.TryGetProperty("QueueReconnectAttempts",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                    begin
                        errorMessage = "InstanceDefaults.QueueReconnectAttempts must have a positive integer value!"
                        ok = false
                    end
                    else
                    begin
                        QueueReconnectAttempts = setting.GetInt32()
                    end
                end
            end

            ;QueueReconnectDelay

            if (ok)
            begin
                if (defaults.TryGetProperty("QueueReconnectDelay",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                    begin
                        errorMessage = "InstanceDefaults.QueueReconnectDelay must have a positive integer value!"
                        ok = false
                    end
                    else
                    begin
                        QueueReconnectDelay = setting.GetInt32()
                    end
                end
            end

            ;QueueType

            if (ok)
            begin
                if (defaults.TryGetProperty("QueueType",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    begin
                        ok = false
                    end
                    else
                    begin
                        using setting.GetString().ToUpper() select
                        ("ISAMFILE"),
                            QueueType = MessageQueueType.IsamFile
                        ("KAFKA"),
.ifdef DBLNET
                            Settings.QueueType = MessageQueueType.Kafka
.else
                            ok = false
.endc
                        (),
                            ok = false
                        endusing
                    end
                end
                if (!ok)
                begin
                    errorMessage = "InstanceDefaults.QueueType must be IsamFile or Kafka (.NET only)!"
                end
            end

            ;SleepTime

            if (ok)
            begin
                if (defaults.TryGetProperty("SleepTime",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1) then
                    begin
                        errorMessage = "InstanceDefaults.SleepTime must have a positive integer value!"
                        ok = false
                    end
                    else
                    begin
                        SleepTime = setting.GetInt32()
                    end
                end
            end

            ;SqlCommandReuse

            if (ok)
            begin
                if (defaults.TryGetProperty("SqlCommandReuse",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                    begin
                        errorMessage = "InstanceDefaults.SqlCommandReuse must be true or false!"
                        ok = false
                    end
                    else
                    begin
                        SqlCommandReuse = setting.GetBoolean()
                    end
                end
            end

            ;StopOnError

            if (ok)
            begin
                if (defaults.TryGetProperty("StopOnError",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                    begin
                        errorMessage = "InstanceDefaults.StopOnError must be true or false!"
                        ok = false
                    end
                    else
                    begin
                        StopOnError = setting.GetBoolean()
                    end
                end
            end

            ;SystemLogging

            if (ok)
            begin
                if (defaults.TryGetProperty("SystemLogging",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                    begin
                        errorMessage = "InstanceDefaults.SystemLogging must be true or false!"
                        ok = false
                    end
                    else
                    begin
                        SystemLogging = setting.GetBoolean()
                    end
                end
            end

            ;VerboseLogging

            if (ok)
            begin
                if (defaults.TryGetProperty("VerboseLogging",setting))
                begin
                    if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False) then
                    begin
                        errorMessage = "InstanceDefaults.VerboseLogging must be true or false!"
                        ok = false
                    end
                    else
                    begin
                        VerboseLogging = setting.GetBoolean()
                    end
                end
            end


        endmethod

        ;;; <summary>
        ;;; The batch size to be used with bulk load operations.
        ;;; </summary>
        public readwrite property BulkLoadBatchSize, int, 10000

        ;;; <summary>
        ;;; Database statement execution timeout for bulk load and indexing operations in seconds. The default value is 900 seconds (15 minutes).
        ;;; </summary>
        public readwrite property BulkLoadTimeout, int, 900

        ;;; <summary>
        ;;; If the replicator is in batch commit mode, how many rows constitute a batch?
        ;;; </summary>
        public readwrite property CommitBatchSize, int, 1000

        ;;; <summary>
        ;;; The batch size to use when loading a database table via BCP
        ;;; </summary>
        public readwrite property DatabaseBcpBatchSize, int, 25000

        ;;; <summary>
        ;;; The network packet size to use when loading a database table via BCP
        ;;; </summary>
        public readwrite property DatabaseBcpPacketSize, int, 8192

        ;;; <summary>
        ;;; Database commit mode (Automatic, Manual or Batch).
        ;;; </summary>
        public readwrite property DatabaseCommitMode, DatabaseCommitMode, DatabaseCommitMode.Batch

        ;;; <summary>
        ;;; The name of the database connection to use
        ;;; </summary>
        public readwrite property DatabaseConnectionName, string ;,"DEFAULT"

        ;;; <summary>
        ;;; The name of the database within the SQL Server instance
        ;;; </summary>
        public readwrite property DatabaseName, string ;,"SqlReplication"

        ;;; <summary>
        ;;; The password to be used to access the database
        ;;; </summary>
        public readwrite property DatabasePassword, string

        ;;; <summary>
        ;;; How many seconds should replicator wait between database re-connect attempts?
        ;;; </summary>
        public readwrite property DatabaseRetryDelay, int, 30

        ;;; <summary>
        ;;; How many times should replicator attempt to re-connect to the database?
        ;;; </summary>
        public readwrite property DatabaseRetryMax, int, 10

        ;;; <summary>
        ;;; The name of the database schema that owns the tables
        ;;; </summary>
        public readwrite property DatabaseSchema, string ;,"dbo"

        ;;; <summary>
        ;;; The name or IP address of the database server
        ;;; </summary>
        public readwrite property DatabaseServer, string ;,"localhost"

        ;;; <summary>
        ;;; Database statement execution timeout in seconds. The default is 60 seconds.
        ;;; </summary>
        public readwrite property DatabaseTimeout, int, 60

        ;;; <summary>
        ;;; The database user to be used to access the database
        ;;; </summary>
        public readwrite property DatabaseUser, string ;,"replicator"

        ;;; <summary>
        ;;; Use data compression for tables and indexes?
        ;;; </summary>
        public readwrite property DataCompressionMode, DatabaseDataCompression, DatabaseDataCompression.None

        ;;; <summary>
        ;;; How many seconds should we sleep after processing an error?
        ;;; </summary>
        public readwrite property ErrorSleepTime, decimal, 0.01

        ;;; <summary>
        ;;; Is the use of FileService enabled?
        ;;; </summary>
        public readwrite property FileServiceEnabled, boolean, false

        ;;; <summary>
        ;;; The name or IP address of the system running FileService
        ;;; </summary>
        public readwrite property FileServiceHost, string

        ;;; <summary>
        ;;; The IP port number that FileService is listening on
        ;;; </summary>
        public readwrite property FileServicePort, int, 8080

.ifdef DBLNET
        ;;; <summary>
        ;;; The name(s) or IP addresses and ports of the Kafka servers to use (Kafka queue mode only)?
        ;;; Set automatically to REPLICATION_<InstanceName>
        ;;; </summary>
        public readwrite property KafkaServers, string
.endc

        ;;; <summary>
        ;;; Where should export files be created locally?
        ;;; </summary>
        public readwrite property LocalExportPath, string
        ;TODO: Need to default this!!!

        ;;; <summary>
        ;;; Log bulk load exceptions to a log file?
        ;;; </summary>
        public readwrite property LogBulkLoadExceptions, boolean, false

        ;;; <summary>
        ;;; Include key data in debug logs?
        ;;; </summary>
        public readwrite property LogKeyValues, boolean, false

        ;;; <summary>
        ;;; Should we report progress when bulk loading tables?
        ;;; </summary>
        public readwrite property LogLoadProgress, boolean, false

        ;;; <summary>
        ;;; Maximum number of columns in a database table (SQL Connection only)
        ;;; </summary>
        public readwrite property MaxColumns, int, 254

        ;;; <summary>
        ;;; Maximum number of database cursors (SQL Connection only)
        ;;; </summary>
        public readwrite property MaxCursors, int, 128

        ;;; <summary>
        ;;; How many times should replicator attempt to re-connect to a remote queue file?
        ;;; </summary>
        public readwrite property QueueReconnectAttempts, int, 10

        ;;; <summary>
        ;;; How many seconds should replicator wait between remote queue file re-connect attempts?
        ;;; </summary>
        public readwrite property QueueReconnectDelay, int, 30

        ;;; <summary>
        ;;; Queue type (ISAM File, Kafka MQ).
        ;;; </summary>
        public readwrite property QueueType, MessageQueueType, MessageQueueType.IsamFile

        ;;; <summary>
        ;;; How many seconds should we sleep when we run out of instructions to process?
        ;;; </summary>
        public readwrite property SleepTime, int, 2

        ;;; <summary>
        ;;; Where possible, should we re-use SqlCommand objects?  (SqlClient mode only)
        ;;; </summary>
        public readwrite property SqlCommandReuse, boolean, false

        ;;; <summary>
        ;;; Should we stop processing and close if we encounter an error?
        ;;; </summary>
        public readwrite property StopOnError, boolean, false

        ;;; <summary>
        ;;; Should we also log to the system log?
        ;;; </summary>
        public readwrite property SystemLogging, boolean, false

        ;;; <summary>
        ;;; Are we doing verbose logging?
        ;;; </summary>
        public readwrite property VerboseLogging, boolean, false

    endclass

endnamespace
