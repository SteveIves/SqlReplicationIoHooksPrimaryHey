;*****************************************************************************
;
; File:         InstanceDefaultSettings.dbl
;
; Description:  Represents the default settings for replicator instances
;
; Author:       Steve Ives, Synergex Professional Services Group
;
;*****************************************************************************
;
; Copyright (c) 2024, Synergex International, Inc.
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
; * Redistributions of source code must retain the above copyright notice,
;   this list of conditions and the following disclaimer.
;
; * Redistributions in binary form must reproduce the above copyright notice,
;   this list of conditions and the following disclaimer in the documentation
;   and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
;******************************************************************************

import System.Text
import System.Text.Json

namespace ReplicationLibrary

    public class InstanceDefaultSettings

        public method InstanceDefaultSettings
.ifdef DBLNET
            required in defaults, JsonElement
.else
            required in defaults, @JsonElement
.endc
            stack record
.ifdef DBLNET
                setting, JsonElement
.else
                setting, @JsonElement
.endc
            endrecord 
        proc

            ;TODO: Compiler bug? Can't set these two as initial values!
            this.DatabaseConnectionName = "DEFAULT"
            this.DatabaseName = "SqlReplication"
            this.DatabasePassword = ""
            this.DatabaseSchema = "dbo"
            this.DatabaseServer = "localhost"
            this.DatabaseServer = "replicator"
            this.FileServiceHost = "localhost"

            ;BulkLoadBatchSize
            if (defaults.TryGetProperty("BulkLoadBatchSize",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1000)
                    throw new ApplicationException("InstanceDefaults.BulkLoadBatchSize must have an integer value >= 1000!")
                BulkLoadBatchSize = setting.GetInt32()
            end

            ;BulkLoadTimeout
            if (defaults.TryGetProperty("BulkLoadTimeout",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<60)
                    throw new ApplicationException("InstanceDefaults.BulkLoadTimeout must have an integer value >= 60!")
                BulkLoadTimeout = setting.GetInt32()
            end

            ;CommitBatchSize
            if (defaults.TryGetProperty("CommitBatchSize",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<100)
                    throw new ApplicationException("InstanceDefaults.CommitBatchSize must have an integer value >= 100!")
                CommitBatchSize = setting.GetInt32()
            end

            ;DatabaseBcpBatchSize
            if (defaults.TryGetProperty("DatabaseBcpBatchSize",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<100  || setting.GetInt32()>50000)
                    throw new ApplicationException("InstanceDefaults.DatabaseBcpBatchSize must have an integer value between 100 and 50000!")
                DatabaseBcpBatchSize = setting.GetInt32()
            end

            ;DatabaseBcpPacketSize
            if (defaults.TryGetProperty("DatabaseBcpPacketSize",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<4096 || setting.GetInt32()>65535)
                    throw new ApplicationException("InstanceDefaults.DatabaseBcpPacketSize must have an integer value between 4096 and 65535!")
                DatabaseBcpPacketSize = setting.GetInt32()
            end

            ;DatabaseCommitMode

            if (defaults.TryGetProperty("DatabaseCommitMode",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
                    throw new ApplicationException("InstanceDefaults.DatabaseCommitMode must be Automatic, Batch or Manual!")
                using setting.GetString().ToUpper() select
                ("AUTOMATIC"),
                    DatabaseCommitMode = DatabaseCommitMode.Automatic
                ("BATCH"),
                    DatabaseCommitMode = DatabaseCommitMode.Batch
                ("MANUAL"),
                    DatabaseCommitMode = DatabaseCommitMode.Manual
                (),
                    throw new ApplicationException("InstanceDefaults.DatabaseCommitMode must be Automatic, Batch or Manual!")
                endusing
            end

            ;DatabaseConnectionName
            if (defaults.TryGetProperty("DatabaseConnectionName",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    throw new ApplicationException("InstanceDefaults.DatabaseConnectionName must have a non-blank string value!")
                else
                begin
                    data dbc, @DatabaseConnection
                    data connectionNameIsValid = false

                    foreach dbc in Settings.DatabaseConnections
                    begin
                        if (dbc.Name.ToUpper().Equals(setting.GetString().ToUpper()))
                        begin
                            connectionNameIsValid = true
                            exitloop
                        end
                    end

                    if (connectionNameIsValid) then
                    begin
                        DatabaseConnectionName = setting.GetString()
                    end
                    else
                    begin
                        throw new ApplicationException("InstanceDefaults.DatabaseConnectionName does not match an entry in DatabaseConnections!")
                    end
                end
            end

            ;DatabaseName
            if (defaults.TryGetProperty("DatabaseName",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
                    throw new ApplicationException("InstanceDefaults.DatabaseName must have a non-blank string value!")
                DatabaseName = setting.GetString()
            end

            ;DatabasePassword
            if (defaults.TryGetProperty("DatabasePassword",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
                    throw new ApplicationException("InstanceDefaults.DatabasePassword must have a non-blank string value!")
                DatabasePassword = setting.GetString()
            end

            ;DatabaseRetryDelay
            if (defaults.TryGetProperty("DatabaseRetryDelay",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1)
                    throw new ApplicationException("InstanceDefaults.DatabaseRetryDelay have a positive integer value!")
                DatabaseRetryDelay = setting.GetInt32()
            end

            ;DatabaseRetryMax
            if (defaults.TryGetProperty("DatabaseRetryMax",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1)
                    throw new ApplicationException("InstanceDefaults.DatabaseRetryMax have a positive integer value!")
                DatabaseRetryMax = setting.GetInt32()
            end

            ;DatabaseSchema
            if (defaults.TryGetProperty("DatabaseSchema",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
                    throw new ApplicationException("InstanceDefaults.DatabaseSchema must have a non-blank string value!")
                DatabaseSchema = setting.GetString()
            end

            ;DatabaseServer
            if (defaults.TryGetProperty("DatabaseServer",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
                    throw new ApplicationException("InstanceDefaults.DatabaseServer must have a non-blank string value!")
                DatabaseServer = setting.GetString()
            end

            ;DatabaseTimeout
            if (defaults.TryGetProperty("DatabaseTimeout",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1)
                    throw new ApplicationException("InstanceDefaults.DatabaseTimeout must have a positive integer value!")
                DatabaseTimeout = setting.GetInt32()
            end

            ;DatabaseUser
            if (defaults.TryGetProperty("DatabaseUser",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
                    throw new ApplicationException("InstanceDefaults.DatabaseUser must have a non-blank string value!")
                DatabaseUser = setting.GetString()
            end

            ;DataCompressionMode
            if (defaults.TryGetProperty("DataCompressionMode",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
                    throw new ApplicationException("InstanceDefaults.DataCompressionMode must be None, Page or Row!")
                using setting.GetString().ToUpper() select
                ("NONE"),
                    DataCompressionMode = DatabaseDataCompression.None
                ("PAGE"),
                    DataCompressionMode = DatabaseDataCompression.Page
                ("ROW"),
                    DataCompressionMode = DatabaseDataCompression.Row
                (),
                    throw new ApplicationException("InstanceDefaults.DataCompressionMode must be None, Page or Row!")
                endusing
            end

            ;ErrorSleepTime
            if (defaults.TryGetProperty("ErrorSleepTime",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetDecimal()<=0)
                    throw new ApplicationException("ErrorSleepTime must have a positive decimal value!")
                ErrorSleepTime = setting.GetDecimal()
            end

            ;FileServiceEnabled
            if (defaults.TryGetProperty("FileServiceEnabled",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False)
                    throw new ApplicationException("InstanceDefaults.FileServiceEnabled must be true or false!")
                FileServiceEnabled = setting.GetBoolean()
            end

            ;FileServiceHost
            if (defaults.TryGetProperty("FileServiceHost",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String)
                    throw new ApplicationException("InstanceDefaults.FileServiceHost must have a string value (ip address or DNS name)!")
                FileServiceHost = setting.GetString()
            end

            ;FileServicePort
            if (defaults.TryGetProperty("FileServicePort",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<=0)
                    throw new ApplicationException("InstanceDefaults.FileServicePort must have a positive integer value!")
                FileServicePort = setting.GetInt32()
            end

            ;KafkaServers
            if (defaults.TryGetProperty("KafkaServers",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String)
                    throw new ApplicationException("InstanceDefaults.KafkaServers must have a string value (list of ip address or DNS names and ports)!")
                KafkaServers = setting.GetString()
            end

            ;LocalExportPath
            if (defaults.TryGetProperty("LocalExportPath",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString())) then
                    throw new ApplicationException("InstanceDefaults.LocalExportPath must have a string value and be a valid path!")
                else
                begin
                    ;Check that we can create a file in the directory
                    data tmpch = 0
                    data tmpFile = setting.GetString() + %datetime + ".tmp"
                    try
                    begin
                        open(tmpch,o,tmpfile)
                        LocalExportPath = setting.GetString()
                    end
                    catch (e, @Exception)
                    begin
                        throw new ApplicationException("InstanceDefaults.LocalExportPath must be a valid path!")
                    end
                    finally
                    begin
                        if (tmpch)
                        begin
                            close tmpch
                        end
                        if (File.Exists(tmpFile))
                        begin
                            File.Delete(tmpFile)
                        end
                    end
                    endtry
                end
            end

            ;LogBulkLoadExceptions
            if (defaults.TryGetProperty("LogBulkLoadExceptions",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False)
                    throw new ApplicationException("LogBulkLoadExceptions must be true or false!")
                LogBulkLoadExceptions = setting.GetBoolean()
            end

            ;LogKeyValues
            if (defaults.TryGetProperty("LogKeyValues",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False)
                    throw new ApplicationException("InstanceDefaults.LogKeyValues must be true or false!")
                LogKeyValues = setting.GetBoolean()
            end

            ;LogLoadProgress
            if (defaults.TryGetProperty("LogLoadProgress",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False)
                    throw new ApplicationException("InstanceDefaults.LogLoadProgress must be true or false!")
                LogLoadProgress = setting.GetBoolean()
            end

            ;MaxColumns
            if (defaults.TryGetProperty("MaxColumns",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1)
                    throw new ApplicationException("InstanceDefaults.MaxColumns must have a positive integer value!")
                MaxColumns = setting.GetInt32()
            end

            ;MaxCursors
            if (defaults.TryGetProperty("MaxCursors",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1)
                    throw new ApplicationException("InstanceDefaults.MaxCursors must have a positive integer value!")
                MaxCursors = setting.GetInt32()
            end

            ;QueueReconnectAttempts
            if (defaults.TryGetProperty("QueueReconnectAttempts",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1)
                    throw new ApplicationException("InstanceDefaults.QueueReconnectAttempts must have a positive integer value!")
                QueueReconnectAttempts = setting.GetInt32()
            end

            ;QueueReconnectDelay
            if (defaults.TryGetProperty("QueueReconnectDelay",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1)
                    throw new ApplicationException("InstanceDefaults.QueueReconnectDelay must have a positive integer value!")
                QueueReconnectDelay = setting.GetInt32()
            end

            ;QueueType
            if (defaults.TryGetProperty("QueueType",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
                    throw new ApplicationException("InstanceDefaults.QueueType must be IsamFile or Kafka!")
                using setting.GetString().ToUpper() select
                ("ISAMFILE"),
                    QueueType = MessageQueueType.IsamFile
                ("KAFKA"),
                    QueueType = MessageQueueType.Kafka
                (),
                    throw new ApplicationException("InstanceDefaults.QueueType must be IsamFile or Kafka")
                endusing
            end

            ;SleepTime
            if (defaults.TryGetProperty("SleepTime",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32()<1)
                    throw new ApplicationException("InstanceDefaults.SleepTime must have a positive integer value!")
                SleepTime = setting.GetInt32()
            end

            ;SqlCommandReuse
            if (defaults.TryGetProperty("SqlCommandReuse",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False)
                    throw new ApplicationException("InstanceDefaults.SqlCommandReuse must be true or false!")
                SqlCommandReuse = setting.GetBoolean()
            end

            ;StopOnError
            if (defaults.TryGetProperty("StopOnError",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False)
                    throw new ApplicationException("InstanceDefaults.StopOnError must be true or false!")
                StopOnError = setting.GetBoolean()
            end

            ;SystemLogging
            if (defaults.TryGetProperty("SystemLogging",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False)
                    throw new ApplicationException("InstanceDefaults.SystemLogging must be true or false!")
                SystemLogging = setting.GetBoolean()
            end

            ;VerboseLogging
            if (defaults.TryGetProperty("VerboseLogging",setting))
            begin
                if (setting.ValueKind!=JsonValueKind.True && setting.ValueKind!=JsonValueKind.False)
                    throw new ApplicationException("InstanceDefaults.VerboseLogging must be true or false!")
                VerboseLogging = setting.GetBoolean()
            end

        endmethod

        ;;; <summary>
        ;;; The batch size to be used with bulk load operations.
        ;;; </summary>
        public readwrite property BulkLoadBatchSize, int, 10000

        ;;; <summary>
        ;;; Database statement execution timeout for bulk load and indexing operations in seconds. The default value is 900 seconds (15 minutes).
        ;;; </summary>
        public readwrite property BulkLoadTimeout, int, 900

        ;;; <summary>
        ;;; If the replicator is in batch commit mode, how many rows constitute a batch?
        ;;; </summary>
        public readwrite property CommitBatchSize, int, 1000

        ;;; <summary>
        ;;; The batch size to use when loading a database table via BCP
        ;;; </summary>
        public readwrite property DatabaseBcpBatchSize, int, 25000

        ;;; <summary>
        ;;; The network packet size to use when loading a database table via BCP
        ;;; </summary>
        public readwrite property DatabaseBcpPacketSize, int, 8192

        ;;; <summary>
        ;;; Database commit mode (Automatic, Manual or Batch).
        ;;; </summary>
        public readwrite property DatabaseCommitMode, DatabaseCommitMode, DatabaseCommitMode.Batch

        ;;; <summary>
        ;;; The name of the database connection to use
        ;;; </summary>
        public readwrite property DatabaseConnectionName, string ;,"DEFAULT"

        ;;; <summary>
        ;;; The name of the database within the SQL Server instance
        ;;; </summary>
        public readwrite property DatabaseName, string ;,"SqlReplication"

        ;;; <summary>
        ;;; The password to be used to access the database
        ;;; </summary>
        public readwrite property DatabasePassword, string

        ;;; <summary>
        ;;; How many seconds should replicator wait between database re-connect attempts?
        ;;; </summary>
        public readwrite property DatabaseRetryDelay, int, 30

        ;;; <summary>
        ;;; How many times should replicator attempt to re-connect to the database?
        ;;; </summary>
        public readwrite property DatabaseRetryMax, int, 10

        ;;; <summary>
        ;;; The name of the database schema that owns the tables
        ;;; </summary>
        public readwrite property DatabaseSchema, string ;,"dbo"

        ;;; <summary>
        ;;; The name or IP address of the database server
        ;;; </summary>
        public readwrite property DatabaseServer, string ;,"localhost"

        ;;; <summary>
        ;;; Database statement execution timeout in seconds. The default is 60 seconds.
        ;;; </summary>
        public readwrite property DatabaseTimeout, int, 60

        ;;; <summary>
        ;;; The database user to be used to access the database
        ;;; </summary>
        public readwrite property DatabaseUser, string ;,"replicator"

        ;;; <summary>
        ;;; Use data compression for tables and indexes?
        ;;; </summary>
        public readwrite property DataCompressionMode, DatabaseDataCompression, DatabaseDataCompression.None

        ;;; <summary>
        ;;; How many seconds should we sleep after processing an error?
        ;;; </summary>
        public readwrite property ErrorSleepTime, decimal, 0.01

        ;;; <summary>
        ;;; Is the use of FileService enabled?
        ;;; </summary>
        public readwrite property FileServiceEnabled, boolean, false

        ;;; <summary>
        ;;; The name or IP address of the system running FileService
        ;;; </summary>
        public readwrite property FileServiceHost, string

        ;;; <summary>
        ;;; The IP port number that FileService is listening on
        ;;; </summary>
        public readwrite property FileServicePort, int, 8080

        ;;; <summary>
        ;;; The name(s) or IP addresses and ports of the Kafka servers to use (Kafka queue mode only)?
        ;;; Set automatically to REPLICATION_<InstanceName>
        ;;; </summary>
        public readwrite property KafkaServers, string

        ;;; <summary>
        ;;; The name of the Kafka topic to use to request remot file unload operations
        ;;; </summary>
        public readwrite property KafkaUnloadRequestTopic, string

        ;;; <summary>
        ;;; The name of the Kafka topic to use to receive unload completion messages
        ;;; </summary>
        public readwrite property KafkaUnloadResponseTopic, string

        ;;; <summary>
        ;;; Where should export files be created locally?
        ;;; </summary>
        public readwrite property LocalExportPath, string
        ;TODO: Need to default this!!!

        ;;; <summary>
        ;;; Log bulk load exceptions to a log file?
        ;;; </summary>
        public readwrite property LogBulkLoadExceptions, boolean, false

        ;;; <summary>
        ;;; Include key data in debug logs?
        ;;; </summary>
        public readwrite property LogKeyValues, boolean, false

        ;;; <summary>
        ;;; Should we report progress when bulk loading tables?
        ;;; </summary>
        public readwrite property LogLoadProgress, boolean, false

        ;;; <summary>
        ;;; Maximum number of columns in a database table (SQL Connection only)
        ;;; </summary>
        public readwrite property MaxColumns, int, 254

        ;;; <summary>
        ;;; Maximum number of database cursors (SQL Connection only)
        ;;; </summary>
        public readwrite property MaxCursors, int, 128

        ;;; <summary>
        ;;; How many times should replicator attempt to re-connect to a remote queue file?
        ;;; </summary>
        public readwrite property QueueReconnectAttempts, int, 10

        ;;; <summary>
        ;;; How many seconds should replicator wait between remote queue file re-connect attempts?
        ;;; </summary>
        public readwrite property QueueReconnectDelay, int, 30

        ;;; <summary>
        ;;; Queue type (ISAM File, Kafka MQ).
        ;;; </summary>
        public readwrite property QueueType, MessageQueueType, MessageQueueType.IsamFile

        ;;; <summary>
        ;;; How many seconds should we sleep when we run out of instructions to process?
        ;;; </summary>
        public readwrite property SleepTime, int, 2

        ;;; <summary>
        ;;; Where possible, should we re-use SqlCommand objects?  (SqlClient mode only)
        ;;; </summary>
        public readwrite property SqlCommandReuse, boolean, false

        ;;; <summary>
        ;;; Should we stop processing and close if we encounter an error?
        ;;; </summary>
        public readwrite property StopOnError, boolean, false

        ;;; <summary>
        ;;; Should we also log to the system log?
        ;;; </summary>
        public readwrite property SystemLogging, boolean, false

        ;;; <summary>
        ;;; Are we doing verbose logging?
        ;;; </summary>
        public readwrite property VerboseLogging, boolean, false

    endclass

endnamespace
