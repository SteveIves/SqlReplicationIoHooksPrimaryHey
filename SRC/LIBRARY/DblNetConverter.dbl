;;*****************************************************************************
;;
;; File:        DblNetConverter.dbl
;;
;; Description: Converts DBL native types to their Synergy .NET equivalent
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;;*****************************************************************************
;;
;; Copyright (c) 2024, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.ifdef DBLNET

namespace ReplicationLibrary

    public static class DblNetConverter

        ;AlphaToString
        public static method AlphaToString, string
            required in aValue, a
        proc
            mreturn %atrimtostring(aValue)
        endmethod

        ;NotImplemented
        public static method NotImplemented, void
            required in aValue, a
        proc
            throw new NotImplementedException("DblNetConverter does not yet implement support for fields of this type!")
        endmethod

        ;YYMMDDToDateTime
        public static method YYMMDDToDateTime, DateTime
            required in yymmdd, d6
        proc
            mreturn new DateTime((int)(2000+yymmdd(1,2)),(int)yymmdd(3,4),(int)yymmdd(5,6))
        endmethod

        ;YYYYMMDDToDateTime
        public static method YYYYMMDDToDateTime, DateTime
            required in yyyymmdd, d8
        proc
            mreturn new DateTime((int)yyyymmdd(1,4),(int)yyyymmdd(5,6),(int)yyyymmdd(7,8))
        endmethod

        ;YYYYJJJToDateTime
        public static method YYYYJJJToDateTime, DateTime
            required in yyyyjjj, d7
        proc
            data firstOfYear = new DateTime((int)yyyyjjj(1,4),(int)1,(int)1)
            mreturn firstOfYear.AddDays((int)(yyyyjjj(5,7)-1))
        endmethod

        ;YYJJJToDateTime
        public static method YYJJJToDateTime, DateTime
            required in yyjjj, d5
        proc
            data firstOfYear = new DateTime((int)(2000+yyjjj(1,2)),(int)1,(int)1)
            mreturn firstOfYear.AddDays((int)(yyjjj(3,5)-1))
        endmethod

        ;DateToNullableDateTime
        public static method DateToNullableDateTime, Nullable<DateTime>
            required in dateValue, d
        proc
            using ^size(dateValue) select
            (8),    mreturn dateValue == 0 ? new Nullable<DateTime>() : new DateTime((int)dateValue(1,4),(int)dateValue(5,6),(int)dateValue(7,8))
            (6),    mreturn dateValue == 0 ? new Nullable<DateTime>() : new DateTime((int)(2000+dateValue(1,2)),(int)dateValue(3,4),(int)dateValue(5,6))
            (),     throw new NotImplementedException("DblNetConverter does not yet implement support for date fields of this type!")
            endusing
        endmethod

        ;HHMMSSToTimeSpan
        public static method HHMMSSToTimeSpan, TimeSpan
            required in hhmmss, d6
        proc
            mreturn new TimeSpan((int)hhmmss(1,2),(int)hhmmss(3,4),(int)hhmmss(5,6))
        endmethod

        ;HHMMToTimeSpan
        public static method HHMMToTimeSpan, TimeSpan
            required in hhmm, d4
        proc
            mreturn new TimeSpan((int)hhmm(1,2),(int)hhmm(3,4),0)
        endmethod

        ;ImpliedToDecimal
        public static method ImpliedToDecimal, decimal
            required in impliedValue, d.
        proc
            mreturn Convert.ToDecimal(impliedValue)
        endmethod

        ;SmallDecimalToInt
        public static method SmallDecimalToInt, int
            required in decimalValue, d
        proc
            mreturn Convert.ToInt32(decimalValue)
        endmethod

        ;LargeDecimalToLong
        public static method LargeDecimalToLong, long
            required in decimalValue, d
        proc
            mreturn Convert.ToInt64(decimalValue)
        endmethod

        ;I1ToSByte
        public static method I1ToSByte, sbyte
            required in i1value, i1
        proc
            mreturn Convert.ToSByte(i1value)
        endmethod

        ;I2ToShort
        public static method I2ToShort, short
            required in i2value, i2
        proc
            mreturn Convert.ToInt16(i2value)
        endmethod

        ;I4ToInt
        public static method I4ToInt, int
            required in i4value, i4
        proc
            mreturn Convert.ToInt32(i4value)
        endmethod

        ;I8ToLong
        public static method I8ToLong, long
            required in i8value, i8
        proc
            mreturn Convert.ToInt64(i8value)
        endmethod

        ;BooleanToBoolean
        public static method BooleanToBoolean, boolean
            required in booleanValue, boolean
        proc
            mreturn booleanValue
        endmethod

        ;NumberToByte
        public static method NumberToByte, byte
            required in number, n
        proc
            mreturn Convert.ToByte(number)
        endmethod

        ;NumberToShort
        public static method NumberToShort, short
            required in number, n
        proc
            mreturn Convert.ToInt16(number)
        endmethod

        ;NumberToInt
        public static method NumberToInt, int
            required in number, n
        proc
            mreturn Convert.ToInt32(number)
        endmethod

        ;NumberToLong
        public static method NumberToLong, long
            required in number, n
        proc
            mreturn Convert.ToInt64(number)
        endmethod

        ;NumberToSByte
        public static method NumberToSByte, sbyte
            required in number, n
        proc
            mreturn Convert.ToSByte(number)
        endmethod

        ;NumberToUShort
        public static method NumberToUShort, ushort
            required in number, n
        proc
            mreturn Convert.ToUInt16(number)
        endmethod

        ;NumberToUInt
        public static method NumberToUInt, uint
            required in number, n
        proc
            mreturn Convert.ToUInt32(number)
        endmethod

        ;NumberToULong
        public static method NumberToULong, ulong
            required in number, n
        proc
            mreturn Convert.ToUInt64(number)
        endmethod

        ;NumberToBoolean
        public static method NumberToBoolean, boolean
            required in number, n
        proc
            mreturn number == 0 ? false : true
        endmethod

        ;NumberToDouble
        public static method NumberToDouble, double
            required in number, n
        proc
            mreturn Convert.ToDouble(number)
        endmethod

        ;NumberToSingle
        public static method NumberToSingle, single
            required in number, n
        proc
            mreturn Convert.ToSingle(number)
        endmethod

    endclass

endnamespace

.endc