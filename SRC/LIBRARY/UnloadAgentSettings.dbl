
import System.Collections
import System.Text
import System.Text.Json
import Synergex.SynergyDE.Select

namespace ReplicationLibrary

    public class UnloadAgentSettings

        private static configFileSpec, string

        public readwrite property KafkaBrokers, string
        public readwrite property ConsumerGroup, string
        public readwrite property RequestTopic, string
        public readwrite property RequestTimeoutMs, int
        public readwrite property ResponseTopic, string
        public readwrite property ResponseTimeoutMs, int
        public readwrite property UnloadAgentDirectory, string
        public readwrite property VerboseLogging, boolean
        public readwrite property DclLogging, boolean
        public readwrite property EnvironmentVariables, [#]@EnvironmentVariable

        ;;; <summary>
        ;;; Loads settings from the JSON configuration file
        ;;; </summary>
        ;;; <param name="errorMessage">Returned error message (if return value is false)</param>
        ;;; <returns>Retuens true on success, or false</returns>
        public static method Load, @UnloadAgentSettings
            required out errorMessage, string
            stack record
                doc,    @JsonDocument
                setting, @JsonElement
                envvars, @JsonElement
                instance, @UnloadAgentSettings
            endrecord
        proc
            errorMessage = ""

            ;Parse the JSON configuration file

            configFileSpec = "REPLICATOR_UNLOAD:AGENT.CONFIG"
            doc = UnloadAgentSettings.ParseConfigFile(errorMessage)

            if (doc == ^null)
                mreturn ^null

            instance = new UnloadAgentSettings()

            ;--------------------------------------------------------------------------------------------------------
            ;KafkaBrokers

            if (!doc.RootElement.TryGetProperty("KafkaBrokers",setting))
            begin
                errorMessage = "KafkaBrokers is not defined in " + configFileSpec
                mreturn ^null
            end
            
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
            begin
                errorMessage = "KafkaBrokers setting must be a non-blank string!"
                mreturn ^null
            end

            instance.KafkaBrokers = setting.GetString()

            ;--------------------------------------------------------------------------------------------------------
            ;ConsumerGroup
            ;Note that if a consumer group name is sent to KAFKA_INIT then a TWO-WAY pipe is created, but if no
            ;consumer group is passed then a one-way outbould only connection is created.

            if (!doc.RootElement.TryGetProperty("ConsumerGroup",setting))
            begin
                errorMessage = "ConsumerGroup is not defined in " + configFileSpec
                mreturn ^null
            end
            
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
            begin
                errorMessage = "ConsumerGroup setting must be a non-blank string!"
                mreturn ^null
            end

            instance.ConsumerGroup = setting.GetString()

            ;--------------------------------------------------------------------------------------------------------
            ;RequestTopic

            if (!doc.RootElement.TryGetProperty("RequestTopic",setting))
            begin
                errorMessage = "RequestTopic is not defined in " + configFileSpec
                mreturn ^null
            end
            
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
            begin
                errorMessage = "RequestTopic setting must be a non-blank string!"
                mreturn ^null
            end

            instance.RequestTopic = setting.GetString()

            ;--------------------------------------------------------------------------------------------------------
            ;RequestTimeoutMs

            if (!doc.RootElement.TryGetProperty("RequestTimeoutMs",setting))
            begin
                errorMessage = "RequestTimeoutMs is not defined in " + configFileSpec
                mreturn ^null
            end
            
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32() < 1)
            begin
                errorMessage = "RequestTimeoutMs setting must be a positive integer!"
                mreturn ^null
            end

            instance.RequestTimeoutMs = setting.GetInt32()

            ;--------------------------------------------------------------------------------------------------------
            ;ResponseTopic

            if (!doc.RootElement.TryGetProperty("ResponseTopic",setting))
            begin
                errorMessage = "ResponseTopic is not defined in " + configFileSpec
                mreturn ^null
            end
            
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
            begin
                errorMessage = "ResponseTopic setting must be a non-blank string!"
                mreturn ^null
            end

            instance.ResponseTopic = setting.GetString()

            ;--------------------------------------------------------------------------------------------------------
            ;ResponseTimeoutMs

            if (!doc.RootElement.TryGetProperty("ResponseTimeoutMs",setting))
            begin
                errorMessage = "ResponseTimeoutMs is not defined in " + configFileSpec
                mreturn ^null
            end
            
            if (setting.ValueKind!=JsonValueKind.Number || setting.GetInt32() < 1)
            begin
                errorMessage = "ResponseTimeoutMs setting must be a positive integer!"
                mreturn ^null
            end

            instance.ResponseTimeoutMs = setting.GetInt32()

            ;--------------------------------------------------------------------------------------------------------
            ;UnloadAgentDirectory

            if (!doc.RootElement.TryGetProperty("UnloadAgentDirectory",setting))
            begin
                errorMessage = "UnloadAgentDirectory is not defined in " + configFileSpec
                mreturn ^null
            end
            
            if (setting.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(setting.GetString()))
            begin
                errorMessage = "UnloadAgentDirectory setting must be a non-blank string!"
                mreturn ^null
            end

            instance.UnloadAgentDirectory = setting.GetString()

            ;--------------------------------------------------------------------------------------------------------
            ;VerboseLogging

            if (!doc.RootElement.TryGetProperty("VerboseLogging",setting))
            begin
                errorMessage = "VerboseLogging is not defined in " + configFileSpec
                mreturn ^null
            end
            
            if (setting.ValueKind!=JsonValueKind.true && setting.ValueKind!=JsonValueKind.false)
            begin
                errorMessage = "VerboseLogging setting must be a boolean value!"
                mreturn ^null
            end

            instance.VerboseLogging = setting.GetBoolean()

            ;--------------------------------------------------------------------------------------------------------
            ;DclLogging

            if (!doc.RootElement.TryGetProperty("DclLogging",setting))
            begin
                errorMessage = "DclLogging is not defined in " + configFileSpec
                mreturn ^null
            end
            
            if (setting.ValueKind!=JsonValueKind.true && setting.ValueKind!=JsonValueKind.false)
            begin
                errorMessage = "DclLogging setting must be a boolean value!"
                mreturn ^null
            end

            instance.DclLogging = setting.GetBoolean()

            ;--------------------------------------------------------------------------------------------------------
            ;EnvironmentVariables (optional)

            if (doc.RootElement.TryGetProperty("EnvironmentVariables",envvars))
            begin
                data elements, i4
                data element, i4

                if (envvars.ValueKind!=JsonValueKind.Array)
                begin
                    errorMessage = "EnvironmentVariables setting must be an array!"
                    mreturn ^null
                end

                elements = envvars.GetArrayLength()
                instance.EnvironmentVariables = new EnvironmentVariable[elements]

                for element from 1 thru elements
                begin
                    data envvar, @JsonElement, envvars[element-1]
                    data envvarName, @JsonElement
                    data envvarValue, @JsonElement

                    if (envvar.ValueKind!=JsonValueKind.Object)
                    begin
                        errorMessage = "Invalid environment variable definition!"
                        mreturn ^null
                    end

                    if (!envvar.TryGetProperty("Name",envvarName))
                    begin
                        errorMessage = "Invalid environment variable definition!"
                        mreturn ^null
                    end

                    if (envvarName.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(envvarName.GetString()))
                    begin
                        errorMessage = "Invalid environment variable definition!"
                        mreturn ^null
                    end

                    if (!envvar.TryGetProperty("Value",envvarValue))
                    begin
                        errorMessage = "Invalid environment variable definition!"
                        mreturn ^null
                    end

                    if (envvarValue.ValueKind!=JsonValueKind.String || String.IsNullOrWhitespace(envvarValue.GetString()))
                    begin
                        errorMessage = "Invalid environment variable definition!"
                        mreturn ^null
                    end

                    instance.EnvironmentVariables[element] = new EnvironmentVariable() { Name=envvarName.GetString(), Value=envvarValue.GetString() }

                end

            end

            ;--------------------------------------------------------------------------------------------------------
            ;Validations




            mreturn instance
            
        endmethod

        ;;; <summary>
        ;;; Parse the configuration file into a JsonDocument
        ;;; </summary>
        ;;; <param name="errorMessage">Returned error message if a null document is returned</param>
        ;;; <returns>Returns a JsonDocument object, or ^null if the parse fails.</returns>
        private static method ParseConfigFile, @JsonDocument
            required out errorMessage, string
            record
                channel, i4
                buffer, a1024
                jsonFileContent, @StringBuilder
            endrecord
        proc
            errorMessage = ""
            jsonFileContent = new StringBuilder()
            channel = 0

            try
            begin
                data firstBrace = 0

                open(channel,i,configFileSpec)

                while (true)
                begin
                    reads(channel,buffer)
                    if (firstBrace < 1)
                    begin
                        xcall instr(1, buffer, '{', firstBrace)
                        if (firstBrace >= 1)
                            buffer = buffer(firstBrace:1024-firstBrace)
                    end
                    jsonFileContent.Append(%atrim(buffer))
                end
            end
            catch (e, @EndOfFileException)
            begin
                jsonFileContent.Append(%atrim(buffer))
            end
            catch (e, @Exception)
            begin
                errorMessage = "Failed to parse " + configFileSpec
                mreturn ^null
            end
            finally
            begin
                if (channel)
                    close(channel)
            end
            endtry

            mreturn JsonDocument.Parse(jsonFileContent.ToString())

        endmethod

    endclass

    public class EnvironmentVariable

        public readwrite property Name, string

        public readwrite property Value, string

    endclass

endnamespace
