;*****************************************************************************
;
; File:         LoadTestManager.dbl
;
; Type:         Class
;
; Description:  Manages SQL replication load tests
;
;*****************************************************************************
;
; Copyright (c) 2024, Synergex International, Inc.
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
; * Redistributions of source code must retain the above copyright notice,
;   this list of conditions and the following disclaimer.
;
; * Redistributions in binary form must reproduce the above copyright notice,
;   this list of conditions and the following disclaimer in the documentation
;   and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
;*****************************************************************************

.ifdef DBLNET

import ReplicationLibrary
import System
import System.Linq
import System.Threading.Tasks
import System.Threading

namespace ReplicationLibrary

    ;;; <summary>
    ;;; Manages SQL replication load tests
    ;;; </summary>
    public class LoadTestManager

        private mTableName, string
        private mQueueMode, MessageQueueType
        private mWorkerTypes, int
        private mTaskCount, int
        private mSecondsToRun, int

        ;;; <summary>
        ;;; Constructs a new LoadTestManager instance
        ;;; </summary>
        ;;; <param name="tasksPerWorker"></param>
        ;;; <param name="secondsToRun"></param>
        public method LoadTestManager
            tableName, string
            queueMode, MessageQueueType
            taskCount, int
            secondsToRun, int
        proc
            mTableName = tableName
            mQueueMode = queueMode
            mTaskCount = taskCount
            mSecondsToRun = secondsToRun
        endmethod

        ;;; <summary>
        ;;; Start running tests
        ;;; </summary>
        public async method RunTests, @Task
        proc
            ;Create a CancellationTokenSource to control termination
            data cancellationSource = new CancellationTokenSource()

            ;Create arrays to hold references to the worker objects and associated tasks
            data workers = new @ILoadTestWorker[mTaskCount]
            data tasks = new @Task[mTaskCount]

            ;Start the load test tasks
            data taskNumber = 0
            using mTableName select
            ("EMPLOYEE"),
            begin
                Console.WriteLine("Starting {0} EMPLOYEE workers...", mTaskCount)
                repeat
                begin
                    workers[taskNumber+=1] = new EmployeeLoadTester(taskNumber,mQueueMode,cancellationSource.Token)
                    tasks[taskNumber] = Task.Run(workers[taskNumber].DoWork, cancellationSource.Token)
                    if (taskNumber==mTaskCount)
                        exitloop
                end
            end
            endusing

            ;Tell the CancellationTokenSource to cancel the tasks after the specified period
            cancellationSource.CancelAfter(mSecondsToRun*1000)

            ;Wait for all tasks to finish
            await Task.WhenAll(tasks)

            ;Dispose the tasks to ensure data file channels are closed immediately
            foreach data worker in workers.OfType<IDisposable>()
            begin
                worker?.Dispose()
            end

        endmethod

    endclass

endnamespace

.endc