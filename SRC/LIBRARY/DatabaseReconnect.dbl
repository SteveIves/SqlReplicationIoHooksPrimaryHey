;;*****************************************************************************
;;
;; Routine:     DatabaseReconnect
;;
;; Description: Attempt to reconnect to the database following an earlier failure.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Created:     30th December 2019
;;
;;*****************************************************************************
;;

import ReplicationLibrary
import System.Collections

function DatabaseReconnect, boolean
    required in theException, @DatabaseCommunicationException

    .include "CONNECTDIR:ssql.def"
    .include "DBLDIR:namspc.def"
    .include "REPLICATOR_INCLUDE:SmtpMail.def"

    stack record
        reconnected,        boolean
        tableName,          string
        dberrtxt,           a512
        length,             int
        dbstatus,           int
        connectionAttempt,  int
    endrecord

proc
    reconnected = false

    Logger.Log("ERROR: Database connection failed!")
    Logger.Log("Routine " + theException.FailingRoutine + " detected error " + %string(theException.DatabaseErrorNumber) + " " + theException.DatabaseErrorMessage )

    if (Settings.DatabaseConnectMode == DatabaseConnectionMode.SqlConnection)
    begin
        ;;Attempt to close any open cursors - no errors will be generated regardless of what happens

        Logger.Log(" - Attempting to close cursors")

        foreach tableName in Settings.ValidTableNames
        begin
            xcall xsubr(tableName + "Close",Settings.DatabaseChannel)
        end
    end

    ;;Attempt to disconnect from the database - no errors will be generated regardless of what happens

    xcall DatabaseDisconnect

    ;;Attempt to re-connect to the database

    if (Settings.DatabaseRetryMax < 1)
    begin
        ;;Re-connect has been disabled!
        Logger.Log("Database re-connect disabled by DatabaseRetryMax")
        freturn false
    end

    Logger.Log("Attempting reconnect (" + %string(Settings.DatabaseRetryMax) + " attempts, " + %string(Settings.DatabaseRetryDelay) + "s interval)")

    for connectionAttempt from 1 thru Settings.DatabaseRetryMax
    begin
        if (Settings.DatabaseRetryDelay)
        begin
            sleep Settings.DatabaseRetryDelay
        end
            
        Logger.Log("Attempt " + %string(connectionAttempt) + "...")

        if (reconnected = %DatabaseConnect) then
        begin
            Logger.Log("Reconnected")

            ;;Send email notification re re-connect success
            if (EmailSettings.CanSendEmail())
            begin
                data subject, string, "SQL replicator " + %atrim(Settings.InstanceName) + " reconnected to database."
                xcall SendEmail(subject,^null,false)
            end

            exitloop
        end
        else if (EmailSettings.CanSendEmail())
        begin
            ;;Send email notification re re-connect failure
            data subject, string, "ERROR: SQL replicator " + %atrim(Settings.InstanceName) + " reconnect attempt " + %string(connectionAttempt) + " failed!"
            xcall SendEmail(subject,^null,false)
        end
    end

    if (!reconnected)
    begin
        Logger.ErrorLog("ERROR: Failed to reconnect to database!")
        if (EmailSettings.CanSendEmail())
        begin
            ;;Send email notification re re-connect failure
            data subject, string, "ERROR: SQL replicator " + %atrim(Settings.InstanceName) + " reconnect failed!"
            xcall SendEmail(subject,^null,false)
        end
        freturn false
    end

    freturn true

endfunction

