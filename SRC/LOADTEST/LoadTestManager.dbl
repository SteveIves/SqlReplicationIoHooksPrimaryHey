;*****************************************************************************
;
; File:         LoadTestManager.dbl
;
; Type:         Class
;
; Description:  Manages SQL replication load tests
;
;*****************************************************************************
;
; Copyright (c) 2024, Synergex International, Inc.
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
; * Redistributions of source code must retain the above copyright notice,
;   this list of conditions and the following disclaimer.
;
; * Redistributions in binary form must reproduce the above copyright notice,
;   this list of conditions and the following disclaimer in the documentation
;   and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
;*****************************************************************************

import NetLoadTester
import System
import System.Linq
import System.Threading.Tasks
import System.Threading

namespace NetLoadTester

    ;;; <summary>
    ;;; Manages SQL replication load tests
    ;;; </summary>
    public class LoadTestManager

        private mQueueMode, string
        private mWorkerTypes, int
        private mTasksPerWorker, int
        private mTotalTasks, int
        private mSecondsToRun, int

        ;;; <summary>
        ;;; Constructs a new LoadTestManager instance
        ;;; </summary>
        ;;; <param name="tasksPerWorker"></param>
        ;;; <param name="secondsToRun"></param>
        public method LoadTestManager
            queueMode, string
            tasksPerWorker, int
            secondsToRun, int
        proc
            mQueueMode = queueMode
            mWorkerTypes = 1
            mTasksPerWorker = tasksPerWorker
            mSecondsToRun = secondsToRun
            mTotalTasks = mWorkerTypes * mTasksPerWorker
        endmethod

        ;;; <summary>
        ;;; Start running tests
        ;;; </summary>
        public async method StartTests, @Task
        proc
            ;Create a CancellationTokenSource to control termination
            data cancellationSource = new CancellationTokenSource()

            ;Create arrays to hold references to the worker objects and associated tasks
            data workers = new @IWorkerTask[mTotalTasks]
            data tasks = new @Task[mTotalTasks]

            data taskNumber = 0
            
            ;Start the DEPARTMENT tasks
            ;Console.WriteLine("Starting {0} DEPARTMENT workers...", mTasksPerWorker)
            ;repeat
            ;begin
            ;    workers[taskNumber+=1] = new DepartmentLoadTester(taskNumber,completionSource)
            ;    tasks[taskNumber] = Task.Run(doWork)
            ;    if (taskNumber==mTasksPerWorker)
            ;        exitloop
            ;end
            ;
            ;sleep 0.5

            ;Start the EMPLOYEE tasks
            Console.WriteLine("Starting {0} EMPLOYEE workers...", mTasksPerWorker)
            repeat
            begin
                workers[taskNumber+=1] = new EmployeeLoadTester(taskNumber,mQueueMode,cancellationSource.Token)
                tasks[taskNumber] = Task.Run(workers[taskNumber].DoWork, cancellationSource.Token)
                if (taskNumber==mTotalTasks)
                    exitloop
            end

            ;Tell the CancellationTokenSource to cancel the tasks after the specified period
            cancellationSource.CancelAfter(mSecondsToRun*1000)

            ;Wait for all tasks to finish
            await Task.WhenAll(tasks)

            ;Dispose the tasks to ensure the channels are closed now
            foreach data worker in workers.OfType<IDisposable>()
            begin
                worker?.Dispose()
            end

        endmethod

    endclass
endnamespace
