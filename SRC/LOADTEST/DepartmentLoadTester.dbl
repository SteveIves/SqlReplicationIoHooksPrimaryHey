;*****************************************************************************
;
; File:         NetLoadTester.dbl
;
; Type:         Class
;
; Description:  Random read/write I/O to the EMPLOYEE file
;
;*****************************************************************************
;
; Copyright (c) 2024, Synergex International, Inc.
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
; * Redistributions of source code must retain the above copyright notice,
;   this list of conditions and the following disclaimer.
;
; * Redistributions in binary form must reproduce the above copyright notice,
;   this list of conditions and the following disclaimer in the documentation
;   and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
;*****************************************************************************

import System
import System.Threading
import System.Threading.Tasks

namespace NetLoadTester

    .include "DEPARTMENT" repository, structure="strDepartment", end

    ;;; <summary>
    ;;; Random read/write I/O to REPLICATOR_DATA:DEPARTMENT.ISM
    ;;; </summary>
    public class DepartmentLoadTester implements IWorkerTask, IDisposable

        private mThreadNumber, int
        private mCompletionSource, @TaskCompletionSource<boolean>
        private mChn, i4

        public method DepartmentLoadTester
            threadNumber, int
            completionSource, @TaskCompletionSource<boolean>
        proc
            mThreadNumber = threadNumber
            mCompletionSource = completionSource
            open(mChn=0,U:I,"REPLICATOR_DATA:DEPARTMENT.ISM")
            Console.WriteLine("Task {0} has opened REPLICATOR_DATA:DEPARTMENT.ISM onchannel {1}", mThreadNumber, mChn)
        endmethod

        public virtual method IDisposable.Dispose, void
            endparams
        proc
            Console.WriteLine("Task {0} is closing channel {1}", mThreadNumber, mChn)
            if (mChn && %chopen(mChn))
            begin
                close mChn
            end
        endmethod

        public method DoWork, void
        proc
            Console.WriteLine("Task {0} is starting processing", mThreadNumber)
            while (!mCompletionSource.Task.IsCompleted)
            begin
                Thread.Sleep(50)
            end
        endmethod

    endclass

endnamespace
