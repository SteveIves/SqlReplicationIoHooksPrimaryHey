;;*****************************************************************************
;;
;; Routine:     SqlClientConnect
;;
;; Description: Use SqlClient to connect to the database and configure the database environment.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Created:     29th January 2024
;;
;;*****************************************************************************
;;

.ifdef DBLNET

import replicator
import ReplicationLibrary
import System.Data.SqlClient

function SqlClientConnect, boolean

    stack record
        length,     int
        dbstatus,   int
        dberrtxt,   a1024
    endrecord
proc
    data ok = true

    ;;Connect to the database

    Logger.Log("Connecting to database...")

    Settings.DatabaseConnection = new SqlConnection(Settings.DatabaseConnectString)

    try
    begin
        Settings.DatabaseConnection.Open()
        Logger.Log("Connected")
    end
    catch (ex, @SqlException)
    begin
        Logger.ErrorLog("Failed to connect to database!")
        Logger.Log("Connect string was: " + Settings.DatabaseConnectString)
        Logger.Log("Error message was : " + ex.Message)
        ok = false

        ;;If we're sending emails then let's record the connect failure
        if (Settings.CanSendEmail())
        begin
            data body = new string[3]
            body[1] = "ERROR: Failed to connect to database!"
            body[2] = "Connect string was: " + Settings.DatabaseConnectString
            body[3] = "Error message was :  " + dberrtxt(1,length)
            xcall SendEmail("ERROR: Replicator " + Settings.InstanceName + " failed to connect to database!",body,false,^null)
        end
    end
    endtry

    ;TODO: Do we need to set the database command execution timeout like we did in SQL Connection?

    ;;Enable SQL Server Auto-Commit?

    if (ok)
    begin
        using Settings.DatabaseCommitMode select

        (DatabaseCommitMode.Automatic),
        begin
            Logger.Log("Commit mode: AUTOMATIC")
            ;TODO: Set AUTO COMMIT MODE
            ;dbstatus = %ssc_cmd(Settings.DatabaseChannel,,SSQL_ODBC_AUTOCOMMIT,"yes")
        end

        (DatabaseCommitMode.Batch),
        begin
            Logger.Log("Commit mode: BATCH")
            Logger.VerboseLog(" - Start transaction")
            ;TODO: Need to start a transaction
            ;dbstatus = %ssc_commit(Settings.DatabaseChannel,SSQL_TXON)
            Counters.BatchCounter = 0
        end

        (DatabaseCommitMode.Manual),
        begin
            Logger.Log("Commit mode: MANUAL")
        end

        endusing
    end

    ;;Report custom bulk load batch size

    if (ok)
    begin
        if (Settings.BulkLoadBatchSize > 0)
        begin
            Logger.Log("Bulk load batch size: " + %string(Settings.BulkLoadBatchSize))
        end
    end

    ;;Report if data compression is enabled

    if (ok)
    begin
        using Settings.DataCompressionMode select
        (DatabaseDataCompression.None),
            Logger.Log("Compression: NONE")
        (DatabaseDataCompression.Row),
            Logger.Log("Compression: ROW")
        (DatabaseDataCompression.Page),
            Logger.Log("Compression: PAGE")
        endusing
    end

    freturn ok

endfunction

.endc
