
import ReplicationLibrary

;;; <summary>
;;; The main entry point for the application.
;;; </summary>
main UnloadAgent
.align
    record
        ok, boolean
        kafkaConnected, boolean
        chIn, i4
        chOut, i4
        chInOpen, i4
        chOutOpen, i4
        iobuffer, a32768
        errorText, a256
        errorMessage, string
        agentSettings, @UnloadAgentSettings
    endrecord

    external function
        xsubr, ^val
        KAFKA_INIT, i
        KAFKA_SHUTDOWN, i
        KAFKA_SEND, i
        KAFKA_POLL, i
        KAFKA_SUBSCRIBE, i
        KAFKA_RECEIVE, i
        KAFKA_LATEST_OFFSET, i
        KAFKA_COMMIT, i
    endexternal

proc
    ok = true

    ;Make sure we're on OpenVMS

    begin
        data system, i4
        xcall envrn(system)
        if (system != 6)
        begin
            Console.WriteLine("This program is for use on OpenVMS. On other platforms use NetUnloadAgent")
            sleep 3
            stop
        end
    end

    ;Load configuration

    Console.WriteLine("Loading configuration...")
    agentSettings = UnloadAgentSettings.Load(errorMessage)
    if (agentSettings == ^null)
    begin
        Console.WriteLine("ERROR: Failed to load configuration. Error was: " + errorMessage)
        ok = false
    end

    ;Set environment variables defined in the configuration file

    if (ok && agentSettings.EnvironmentVariables != ^null)
    begin
        data envvar, @EnvironmentVariable
        data sts, i4
        foreach envvar in agentSettings.EnvironmentVariables
        begin
            data p1, string, envvar.Name
            data p2, string, envvar.Value
            xcall setlog(envvar.Name,envvar.Value,sts)
        end
    end

    ;Connect to Kafka 

    if (ok)
    begin
        Console.WriteLine("Connecting to Kafka...")

        if (%KAFKA_INIT(agentSettings.KafkaServers,agentSettings.ConsumerGroup,errorText) == -1) then
        begin
            Console.WriteLine("ERROR: Failed to connect to Kafka. Error was " + %atrim(errorText))
            ok = false
        end
        else
        begin
            kafkaConnected = true
        end
    end

    ;Subscribe to the topic for inbound messages

    if (ok)
    begin
        Console.WriteLine("Subscribing to topic " + agentSettings.ConsumerTopic + " for inbound messages...")

        if (%KAFKA_SUBSCRIBE(agentSettings.ConsumerTopic,errorText) == -1)
        begin
            Console.WriteLine("ERROR: Failed to subscribe to topic. Error was: " + %atrim(errorText))
            ok = false
        end
    end

    ;Listen for messages. Kafka messages have an (optional) key and a value, but out API does not use key. We will respond to:
    ;Message            Action
    ;EXIT               Stop processing and exit
    ;UNLOAD <table>     Export and upload a file

    if (ok)
    begin
        repeat
        begin
            data topic, a40
            data message, a40
            data messageSize, i4
            data partition, i4
            data offset, i8
            data receiveStatus, i4

            ok = true

            receiveStatus = %KAFKA_RECEIVE(agentSettings.ConsumerTimeoutMs,topic,message,messageSize,partition,offset,errorText)

            if (receiveStatus == -1) then
            begin
                Console.WriteLine("ERROR: Failed to receive message. Error was: " + %atrim(errorText))
                ;TODO: What to do now? Disconnect, reconnect & try again?



            end
            else if (receiveStatus == -2) then
            begin
                ;Failed to receive message because the timeout period expired. Chance to do routine processing, otherwise just try again.
                nextloop
            end
            else if (topic!=agentSettings.ConsumerTopic) then
            begin
                ;Should never happen because we only subscribed to a single topic, but just incase,
                ;we'll commit the message so that we never receive it again
                if (%KAFKA_COMMIT(agentSettings.ConsumerTopic,partition,offset,errorText) == 0) then
                    nextloop
                else
                begin
                    ;TODO: Failed to commit JUNK message. Now what? Disconnect, reconnect, try again?



                end
            end
            else if (messageSize>=4 && message == "EXIT") then
            begin
                Console.WriteLine("Shutdown instruction received!")
                ;;Commit the message
                if (%KAFKA_COMMIT(agentSettings.ConsumerTopic,partition,offset,errorText) == 0) then
                    exitloop
                else
                begin
                    ;TODO: Failed to commit EXIT message. Now what? Disconnect, reconnect, try again?



                end
            end
            else if (messageSize>8 && message=="UNLOAD") then
            begin
                data fileSpec, string
                data exportFile, string
                data exportFileSpec, string
                data zipName, string 
                data zipSpec, string
                data fileType, string
                data fileExported = false
                data fileZipped = false
                data fileUploaded = false
                data recordLength, int

                ;Extact the table name from the message
                
                data tableName, string, message(8,messageSize)

                ;Do we have a table name?

                if (String.IsNullOrWhitespace(tableName))
                begin
                    ;Bad request


                end

                ;Do we recognize the table name? ;We don't have vaidi table names in our config!

;                if (validTableName)
;                begin
;                    ;Bad request
;
;
;                end

                Console.WriteLine("Unload instruction received for table " + tableName)

                ;Determine the file type and record length

                begin
                    data tmpFileSpec, a80
                    xcall xsubr(tableName+"File",tmpFileSpec)
                    fileSpec = %atrimtostring(tmpFileSpec)
                end

                recordLength = %xsubr(tableName+"Length")

                ;Set the export and zip file names

                begin
                    exportFile = tableName + ".TXT"
                    exportFileSpec =agentSettings.ExportDirectory + exportFile
                    zipName = tableName + ".ZIP"
                    zipSpec = agentSettings.ZipFileDirectory + zipName
                end

                ;Determine the file type

                begin
                    data tmptype, a8
                    xcall xsubr(tableName+"Type",tmptype)
                    fileType = tmptype
                end

                ;Open the input file

                if (ok)
                begin
                    Console.WriteLine(" - Opening input file " + fileSpec)

                    chIn = %xsubr(tableName+"OpenInput",errorText)

                    if (chIn) then
                    begin
                        chInOpen = true
                    end
                    else
                    begin
                        chInOpen = false
                        ok = false
                        Console.WriteLine(" - Failed to open input file " + fileSpec + " Error was: " + %atrim(errorText))
                    end
                end

                ;Open the output file

                if (ok)
                begin
                    Console.WriteLine(" - Opening output file " + exportFileSpec)

                    try
                    begin
                        open(chOut=0,o:s,exportFileSpec)
                        chOutOpen = true
                    end
                    catch (e, @Exception)
                    begin
                        chOutOpen = false
                        ok = false
                        Console.WriteLine(" - Failed to open input file " + exportFileSpec + " Error was " + e.Message)
                    end
                    endtry
                end

                ;Export the input file content

                if (ok)
                begin
                    data recs = 0
                    Console.WriteLine(" - Exporting data...")

                    repeat
                    begin
                        ;TODO: Need stop take into account dd_tag values?
                        reads(chIn,iobuffer(1:recordLength),eof)
                        recs += 1
                        writes(chOut,iobuffer(1:recordLength))
                    end
                eof,
                    fileExported = true

                    Console.WriteLine(" - " + %string(recs) + " records exported")
                end

                ;Close the input and output files

                if (chInOpen && chIn)
                begin
                    close chIn
                    clear chIn
                end

                if (chOutOpen && chOut)
                begin
                    close chOut
                    clear chOut
                end

                ;Verify that the output file is present

                if (ok && fileExported)
                begin
                    data tmpch, int

                    Console.WriteLine(" - Verifying export file...")

                    try
                    begin
                        open(tmpch=0,i:s,exportFileSpec)
                    end
                    catch (e, @Exception)
                    begin
                        ok = false
                        Console.WriteLine(" - Failed to export file " + fileSpec + " to " + exportFileSpec + " Error was: " + e.Message)
                        fileExported = false
                        clear tmpch
                    end
                    finally
                    begin
                        if (tmpch)
                        begin
                            close tmpch
                        end
                    end
                    endtry
                end

                ;Compress the unloaded file

;                    if (fileExported)
;                    begin
;                        ;TODO: zip the file
;                        data zipCommand = "zip -q -D " + zipSpec + " " + exportFileSpec
;                        fileZipped = true
;                    end

                ;Delete the uncompressed file

;                    if (fileExported && fileZipped)
;                    begin
;                        xcall delet(exportFileSpec)
;                    end

                ;Upload the compressed file to an S3 bucket

;                    if (fileZipped)
;                    begin
;                        ;TODO: Upload the ZIP file to S3
;                        nop
;                    end

                ;Report the outcome to the outbound Kafka topic
 
;                    if (ok && fileUploaded) then
;                    begin
;                        ;Send "load file ready"
;                        if (!%KafkaPublish(publisher,"UPLOADED",(a)fileSpec))
;                        begin
;                            ;TODO: What to do on a publish fail?
;                            nop
;                        end
;                    end
;                    else
;                    begin
;                        ;Send "export failed"
;                        if (!%KafkaPublish(publisher,"UPLOADFAILED",(a)fileSpec))
;                        begin
;                            ;TODO: What to do on a publish fail?
;                            nop
;                        end
;                    end

                ;Delete the compressed file

;                    if (fileZipped)
;                    begin
;                        try
;                        begin
;                            xcall delet(zipSpec)
;                        end
;                        catch (e, @Exception)
;                        begin
;                            nop
;                        end
;                        endtry
;                    end
            end
            else
            begin
                ;Junk message. We can't just ignore it or we'll receive it again, so commit it.
                if (%KAFKA_COMMIT(agentSettings.ConsumerTopic,partition,offset,errorText) == 0) then
                    nextloop
                else
                begin
                    ;TODO: Failed to commit JUNK message. Now what? Disconnect, reconnect, try again?



                end
            end
        end
    end

    ;Disconnect from Kafka

    if (kafkaConnected)
    begin
        Console.WriteLine("Disconnecting from Kafka...")

        if (%KAFKA_SHUTDOWN(errorText)) then
        begin
            kafkaConnected = false
        end
        else
        begin
            Console.WriteLine("ERROR: Failed to disconnect from Kafka! Error message was: " + %atrim(errorText))
            ok = false
        end
        
    end

    Console.WriteLine("Stopping")
    stop

endmain
