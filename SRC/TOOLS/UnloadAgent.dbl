
import ReplicationLibrary

;;; <summary>
;;; The main entry point for the application.
;;; </summary>
main UnloadAgent
.align
    record
        ok, boolean
        kafkaConnected, boolean
        chIn, i4
        chOut, i4
        chInOpen, i4
        chOutOpen, i4
        kafkaApiResponse, i4
        iobuffer, a32768
        errorText, a256
        errorMessage, string
        agentSettings, @UnloadAgentSettings
        validTables, [#]string
    endrecord

    external function
        xsubr, ^val
        KAFKA_INIT, i
        KAFKA_SHUTDOWN, i
        KAFKA_SEND_BLOCKING, i
        KAFKA_SUBSCRIBE, i
        KAFKA_RECEIVE, i
        KAFKA_COMMIT, i
    endexternal

    .define verboselog(x) if (agentSettings.VerboseLogging) log(x)

proc
    xcall flags(87004000,1)
    xcall setctl("C",0,"Y",0)

    if (false)
    begin
        xcall UnloadAgentFakeCalls
    end

    ;Make sure we're on OpenVMS

    begin
        data system, i4
        xcall envrn(system)
        if (system != 6)
        begin
            Console.WriteLine("This program is for use on OpenVMS. On other platforms use NetUnloadAgent")
            sleep 3
            stop
        end
    end

    ;Load configuration

    agentSettings = UnloadAgentSettings.Load(errorMessage)
    if (agentSettings == ^null)
    begin
        Console.WriteLine("ERROR: Failed to load configuration. Error was: " + errorMessage)
        sleep 3
        stop
    end

    ;Validate that we can move to UnloadAgentDirectory

    if (!%syn_setdir(agentSettings.UnloadAgentDirectory))
    begin
        Console.WriteLine("ERROR: Failed to move to UnloadAgentDirectory")
        sleep 3
        stop
    end

    ;Further validate by creating a temporary file in UnloadAgentDirectory

    try
    begin
        data tmpch = 0
        open(tmpch,o:s,%datetime+".TMP")
        purge tmpch
    end
    catch (e, @Exception)
    begin
        Console.WriteLine("ERROR: Failed to create file in UnloadAgentDirectory")
        sleep 3
        stop
    end
    endtry

    ;Validate that COMPRESS.COM, S3UPLOAD.COM and S3UPLOAD.PY are present

    try
    begin
        data tmpch, i4
        open(tmpch=0,i,"COMPRESS.COM")
        close tmpch
        open(tmpch=0,i,"S3UPLOAD.COM")
        close tmpch
        open(tmpch=0,i,"S3UPLOAD.PY")
        close tmpch
    end
    catch (e, @Exception)
    begin
        Console.WriteLine("ERROR: COMPRESS.COM, S3UPLOAD.COM or S3UPLOAD.PY are not present in UnloadAgentDirectory")
        sleep 3
        stop
    end
    endtry

    ;Set environment variables defined in the configuration file

    if (agentSettings.EnvironmentVariables != ^null)
    begin
        data envvar, @EnvironmentVariable
        data sts, i4
        foreach envvar in agentSettings.EnvironmentVariables
        begin
            data p1, string, envvar.Name
            data p2, string, envvar.Value
            xcall setlog(envvar.Name,envvar.Value,sts)
        end
    end

    ;Report configuration

    Console.WriteLine("")
    Console.WriteLine("")
    Console.WriteLine("File Unload Agent")
    Console.WriteLine("")
    Console.WriteLine("Working directory : " + agentSettings.UnloadAgentDirectory)
    Console.WriteLine("Kafka brokers     : " + agentSettings.KafkaBrokers)
    Console.WriteLine("Consumer group    : " + agentSettings.ConsumerGroup)
    Console.WriteLine("Request topic     : " + agentSettings.RequestTopic)
    Console.WriteLine("Request timeout   : " + %string(agentSettings.RequestTimeoutMs) + " ms")
    Console.WriteLine("Response topic    : " + agentSettings.ResponseTopic)
    Console.WriteLine("Response timeout  : " + %string(agentSettings.ResponseTimeoutMs) + " ms")
    Console.WriteLine("Verbose logging   : " + (agentSettings.VerboseLogging ? "Enabled" : "Disabled"))
    Console.WriteLine("")

    ;Connect to Kafka 

    verboselog("Connecting to Kafka")

    if (%KAFKA_INIT(agentSettings.KafkaBrokers,agentSettings.ConsumerGroup,errorText) == 0) then
        kafkaConnected = true
    else
        log("ERROR: Connect failed: " + errorText)

    ok = true

    try
    begin
        ;Subscribe to the topic for inbound messages

        if (ok)
        begin
            verboselog("Subscribing to request topic " + agentSettings.RequestTopic)

            if (%KAFKA_SUBSCRIBE(agentSettings.RequestTopic,errorText) == -1)
            begin
                log("ERROR: Failed to subscribe to request topic " + errorText)
                ok = false
            end
        end

        ; Listen for messages. Kafka messages have an optional key and a value. We do not use the KEY.
        ;
        ; The messages we support are:
        ;
        ;   Purpose:            ReplicationAgent provides UnloadAgent with a list of valid table (file) names
        ;   Request:            TABLES <TABLE1>,<TABLE2>,...,<TABLEn>
        ;   Success response:   TABLES SUCCESS
        ;   Failure response:   TABLES ERROR <error message>
        ;
        ;   Purpose:            ReplicationAgent asks UnloadAgent to unload, compress, and upload a file
        ;   Request:            UNLOAD <TABLE>
        ;   Success response:   UNLOAD <TABLE> SUCCESS <zipFileName> <exportFileName>
        ;   Failure response:   UNLOAD <TABLE> ERROR  <error message>
        ;
        ;   Purpose:            Management utilities instructs ReplicationAgent to terminate
        ;   Request:            STOP
        ;   Success response:   STOP SUCCESS
        ;   Failure response:   n/a

        if (ok)
        begin
            verboselog("Entering receive loop")

            repeat
            begin
                data topic, a40
                data message, a4096, ""
                data messageSize, i4, ^size(message)
                data partition, i4
                data offset, i8
                data receiveStatus, i4

                ok = true

                receiveStatus = %KAFKA_RECEIVE(agentSettings.RequestTimeoutMs,topic,message,messageSize,partition,offset,errorText)

                upcase message

                ;------------------------------------------------------------------------------------------------------------------------
                ;Receive timeout (normal)

                if (receiveStatus == -2) then
                begin
                    ;Chance to do routine processing, otherwise just try again.
                    nextloop
                end

                ;------------------------------------------------------------------------------------------------------------------------
                ;Hard error (network error, etc.)

                else if (receiveStatus == -1) then
                begin
                    verboselog("KAFKA_RECEIVE returned status -1")

                    if (%instr(1,errorText,"topic not available")) then
                    begin
                        ;Nothing we can do about this, we're dead!
                        log("ERROR: Topic " + agentSettings.RequestTopic + " does not exist")
                        exitloop
                    end
                    else
                    begin
                        log("ERROR: Receive failed: " + errorText)
;TODO: Now what? Disconnect, reconnect, try again?
                    end
                end

                ;------------------------------------------------------------------------------------------------------------------------
                ;Messsage from unsubscribed topic (should never happenbut just incase)

                else if (%atrim(topic).ne.agentSettings.RequestTopic) then
                begin
                    log("ERROR: Message from unsubscribed topic: " + topic)

                    if (%KAFKA_COMMIT(agentSettings.RequestTopic,partition,offset+1,errorText) == 0) then
                    begin
                        nextloop
                    end
                    else
                    begin
                        log("ERROR: Failed to commit request: " + errorText)
;TODO: Now what? Disconnect, reconnect, try again?
                    end
                end

                ;------------------------------------------------------------------------------------------------------------------------
                ;Is it a TABLES message?

                else if (messageSize>7 && message.eq."TABLES ") then
                begin
                    data tableList, string, %atrimtostring(message(8:messageSize))

                    log("Recv " + %atrim(message))

                    tableList = tableList.Replace(" ","")

                    if (!tableList.Contains(",")) then
                    begin
                        data responseMessage, string, "Badly formatted message"

                        ok = false
                        log("ERROR: " + responseMessage)
                        
                        ;Send a failure message to the UnloadResponse topic
                            
                        responseMessage = "TABLES ERROR " + responseMessage

                        ;Send failure message to UnloadResponse topic

                        verboselog("Sending " + responseMessage)

                        kafkaApiResponse = %KAFKA_SEND_BLOCKING(agentSettings.ResponseTopic,responseMessage,agentSettings.ResponseTimeoutMs,errorText)

                        using kafkaApiResponse select
                        (0),
                        begin
                            log("Sent " + responseMessage)
                        end
                        (-2),
                        begin
                            ;No ACK received before timeout expired
                            log("ERROR: Response sent but not acknowledged by timeout")
;TODO: Now what. Retry?
                        end
                        (-1),
                        begin
                            ;Hard failure (e.g. network error)
                            log("ERROR: Failed to send TABLES ERROR response")
;TODO: Now what? Disconnect, reconnect, try again?
                        end
                        endusing
                    end
                    else
                    begin
                        validTables = tableList.Split(",")
                    end

                    ;Verify that we have code for all of the tables by calling the "Length" routine for each

                    if (ok)
                    begin
                        data ix, i4
                        data failed = false
                        data recordLength, i4
                        data tmpMessage, string, "Invalid tables: "
                        for ix from 1 thru validTables.Length
                        begin
                            try
                            begin
                                recordLength = %xsubr(validTables[ix]+"Length")
                            end
                            catch (e, @Exception)
                            begin
                                ;We have no "Length" routine for validTables[ix]
                                failed = true
                                tmpMessage = tmpMessage + validTables[ix] + ","
                            end
                            endtry
                        end

                        if (failed) then
                        begin
                            data responseMessage, string
                            
                            tmpMessage = tmpMessage.Substring(0, tmpMessage.Length-1)
                            ok = false
                            log("ERROR: " + tmpMessage)

                            responseMessage = "TABLES ERROR " + tmpMessage

                            ;Send failure message to UnloadResponse topic

                            verboselog("Sending " + responseMessage)

                            kafkaApiResponse = %KAFKA_SEND_BLOCKING(agentSettings.ResponseTopic,responseMessage,agentSettings.ResponseTimeoutMs,errorText)

                            using kafkaApiResponse select
                            (0),
                            begin
                                log("Sent " + responseMessage)
                            end
                            (-2),
                            begin
                                ;No ACK received before timeout expired
                                log("ERROR: Response sent but not acknowledged by timeout")
;TODO: Now what. Retry?
                            end
                            (-1),
                            begin
                                ;Hard failure (e.g. network error)
                                log("ERROR: Failed to send TABLES ERROR response")
;TODO: Now what? Disconnect, reconnect, try again?
                            end
                            endusing
                        end
                        else
                        begin
                            ;Send success message to UnloadResponse topic
                            data responseMessage = "TABLES SUCCESS"

                            verboselog("Sending " + responseMessage)

                            kafkaApiResponse = %KAFKA_SEND_BLOCKING(agentSettings.ResponseTopic,responseMessage,agentSettings.ResponseTimeoutMs,errorText)

                            using kafkaApiResponse select
                            (0),
                            begin
                                log("Sent " + responseMessage)
                            end
                            (-2),
                            begin
                                ;No ACK received before timeout expired
                                log("ERROR: Response sent but not acknowledged by timeout")
;TODO: Now what. Retry?
                            end
                            (-1),
                            begin
                                ;Hard failure (e.g. network error)
                                log("ERROR: Failed to send " + responseMessage + " response")
;TODO: Now what? Disconnect, reconnect, try again?
                            end
                            endusing
                        end
                    end

                    ;Commit the inbound message so we don't receive it again

                    if (%KAFKA_COMMIT(agentSettings.RequestTopic,partition,offset+1,errorText) == 0) then
                    begin
                        nextloop
                    end
                    else
                    begin
                        log("ERROR: Failed to commit request: " + errorText)
;TODO: Now what? Disconnect, reconnect, try again?
                    end
                end

                ;------------------------------------------------------------------------------------------------------------------------
                ;Is it a STOP message?

                else if (messageSize>=4 && message.eq."STOP") then
                begin
                    data responseMessage = "STOP SUCCESS"

                    log("Recv STOP")

                    verboselog("Sending " + responseMessage)

                    kafkaApiResponse = %KAFKA_SEND_BLOCKING(agentSettings.ResponseTopic,responseMessage,agentSettings.ResponseTimeoutMs,errorText)

                    ;Send success message to UnloadResponse topic
                    using kafkaApiResponse select
                    (0),
                    begin
                        log("Sent " + responseMessage)
                    end
                    (-2),
                    begin
                        ;No ACK received before timeout expired
                        log("ERROR: Response sent but not acknowledged by timeout")
;TODO: Now what. Retry?
                    end
                    (-1),
                    begin
                        ;Hard failure (e.g. network error)
                        log("ERROR: Failed to send " + responseMessage + " response")
;TODO: Now what? Disconnect, reconnect, try again?
                    end
                    endusing

                    ;Commit the message so that we don't receive it again

                    if (%KAFKA_COMMIT(agentSettings.RequestTopic,partition,offset+1,errorText) == 0) then
                    begin
                        exitloop
                    end
                    else
                    begin
                        log("ERROR: Failed to commit request: " + errorText)
;TODO: Now what? Disconnect, reconnect, try again?
                    end
                end

                ;------------------------------------------------------------------------------------------------------------------------
                ;Is it an UNLOAD <table> message?

                else if (messageSize>7 && message.eq."UNLOAD") then
                begin
                    data now, a20, %datetime
                    data timestamp, string, %string(^d(now(1:14)),"XXXX-XX-XX-XXXXXX")
                    data exportFile, string
                    data zipFile, string 
                    data fileType, string
                    data responseError, string
                    data fileExported = false
                    data fileZipped = false
                    data fileUploaded = false
                    data recordLength, int

                    ;Extact the table name from the message
                
                    data tableName, string, message(8,messageSize)

                    ;Do we have vailid table names, and if so is the table name valid

                    if (validTables!=^null && validTables.Length>0) then
                    begin
                        if (Array.IndexOf(validTables,tableName,1,validTables.Length) >= 1) then
                        begin
                            log("Recv UNLOAD " + tableName)
                        end
                        else
                        begin
                            ok = false
                            responseError = "Received UNLOAD for invalid table " + tableName
                        end
                    end
                    else
                    begin
                        ;Bad request
                        ok = false
                        responseError = "Must send TABLES list before UNLOAD"
                    end

                    ;Determine record length
                    if (ok)
                    begin
                        recordLength = %xsubr(tableName+"Length")
                    end

                    ;Set the export and zip file names
                    if (ok)
                    begin
                        exportFile = tableName + "-" + timestamp + ".TXT"
                        zipFile = tableName + "-" + timestamp + ".ZIP"
                    end

                    ;Determine the file type
                    if (ok)
                    begin
                        data tmptype, a8
                        xcall xsubr(tableName+"Type",tmptype)
                        fileType = tmptype
                    end

                    ;Open the input file

                    if (ok)
                    begin
                        chIn = %xsubr(tableName+"OpenInput",errorText)
                        if (chIn) then
                        begin
                            chInOpen = true
                        end
                        else
                        begin
                            chInOpen = false
                            ok = false
                            responseError = "Failed to open " + %atrim(errorText)
                        end
                    end

                    ;Open the output file

                    if (ok)
                    begin
                        try
                        begin
                            open(chOut=0,o:s,exportFile)
                            chOutOpen = true
                        end
                        catch (e, @Exception)
                        begin
                            chOutOpen = false
                            ok = false
                            responseError = "Failed to open " + exportFile + " " + e.Message
                        end
                        endtry
                    end

                    ;Export the input file content

                    if (ok)
                    begin
                        data recs = 0

                        repeat
                        begin
;BIG DEAL!!!
;
;TODO: Need stop take into account dd_tag values?
;
;
                            reads(chIn,iobuffer(1:recordLength),eof)
                            recs += 1
                            writes(chOut,iobuffer(1:recordLength))
                        end
                    eof,
                        fileExported = true
                        verboselog("Created " + exportFile + " with " + %string(recs) + " records")
                    end

                    ;Close the input and output files

                    if (chInOpen && chIn)
                    begin
                        close chIn
                        clear chIn
                    end

                    if (chOutOpen && chOut)
                    begin
                        close chOut
                        clear chOut
                    end

                    ;Compress the exported file

                    if (fileExported)
                    begin
                        ;TODO: zip the file
                        data verboseMode = agentSettings.DclLogging ? "VERBOSE" : ""
                        data command = "|@COMPRESS.COM " + exportFile + " " + zipFile + " " + verboseMode
                        data pipeCh, i4
                        data msg, a1024
                        try
                        begin
                            open(pipeCh=0,i,command)

                            repeat
                            begin
                                ;COMPRESS.COM can display COMPRESS.COM: messages and then should always end with either "SUCCESS" or "ERROR: <text>"
                                reads(pipeCh,msg)

                                if (msg.eq."ERROR: ") then
                                begin
                                    ok = false
                                    responseError = %atrim(msg)
                                    exitloop
                                end
                                else if (msg.eq."SUCCESS") then
                                begin
                                    verboselog("Created " + zipFile)
                                    fileZipped = true
                                    exitloop
                                end
                                else
                                begin
                                    ;COMPRESS.COM: or something unexpected
                                    verboselog(msg)
                                end
                            end
                        end
                        catch (ex, @EndOfFileException)
                        begin
                            ok = false
                            responseError = "Failed to compress export file"
                        end
                        catch (ex, @Exception)
                        begin
                            ok = false
                            responseError = "Failed to compress export file: " + ex.Message
                        end
                        finally
                        begin
                            close pipeCh
                        end
                        endtry
                    end

                    ;Upload the compressed file to an S3 bucket

                    if (fileZipped)
                    begin
                        data verboseMode = agentSettings.DclLogging ? "VERBOSE" : ""
                        data command = "|@S3UPLOAD.COM " + zipFile + " " + verboseMode
                        data pipeCh, i4
                        data msg, a1024
                        try
                        begin
                            open(pipeCh=0,i,command)

                            repeat
                            begin
                                ;S3UPLOAD.COM can display S3UPLOAD.COM: messages and then should always end with either "SUCCESS" or "ERROR: <text>"
                                reads(pipeCh,msg)

                                if (msg.eq."ERROR: ") then
                                begin
                                    ok = false
                                    responseError = %atrim(msg)
                                    exitloop
                                end
                                else if (msg.eq."SUCCESS") then
                                begin
                                    verboselog("Uploaded " + zipFile)


                                    fileUploaded = true
                                    exitloop
                                end
                                else
                                begin
                                    ;S3UPLOAD.COM: or something unexpected
                                    verboselog(msg)
                                end
                            end
                        end
                        catch (ex, @EndOfFileException)
                        begin
                            ok = false
                            responseError = "Failed to upload compressed file"
                        end
                        catch (ex, @Exception)
                        begin
                            ok = false
                            responseError = "Failed to upload compressed file: " + ex.Message
                        end
                        finally
                        begin
                            close pipeCh
                        end
                        endtry
                    end

                    ;Report the outcome to the UnloadResponse topic
 
                    if (ok && fileUploaded) then
                    begin
                        ;Send a SUCCESS response
                        data responseMessage = "UNLOAD " + tableName + " SUCCESS " + zipFile + " " + exportFile

                        verboselog("Sending " + responseMessage)

                        kafkaApiResponse = %KAFKA_SEND_BLOCKING(agentSettings.ResponseTopic,responseMessage,agentSettings.ResponseTimeoutMs,errorText)

                        using kafkaApiResponse select
                        (0),
                        begin
                            ;Response acknowledged
                            log("Sent " + responseMessage)
                        end
                        (-2),
                        begin
                            ;No ACK received before timeout expired
                            log("ERROR: Response sent but not acknowledged by timeout")
;TODO: Now what. Retry?
                        end
                        (-1),
                        begin
                            ;Hard failure (e.g. network error)
                            log("ERROR: Failed to send UNLOAD SUCCESS response")
;TODO: Now what? Disconnect, reconnect, try again?
                        end
                        endusing
                    end
                    else
                    begin
                        ;Send ERROR response

                        data responseMessage = "UNLOAD " + tableName + " ERROR " + responseError

                        verboselog("Sending " + responseError)

                        kafkaApiResponse = %KAFKA_SEND_BLOCKING(agentSettings.ResponseTopic,responseMessage,agentSettings.ResponseTimeoutMs,errorText)

                        using kafkaApiResponse select
                        (0),
                        begin
                            log("Sent " + responseError)
                        end
                        (-2),
                        begin
                            ;No ACK received before timeout expired
                            log("ERROR: Response sent but not acknowledged by timeout")
;TODO: Now what. Retry?
                        end
                        (-1),
                        begin
                            ;Hard failure (e.g. network error)
                            log("ERROR: Failed to send UNLOAD ERROR response")
;TODO: Now what? Disconnect, reconnect, try again?
                        end
                        endusing
                    end

                    ;Delete the compressed file

;                    if (fileZipped)
;                    begin
;                        try
;                        begin
;                            xcall delet(zipSpec)
;                        end
;                        catch (e, @Exception)
;                        begin
;                            nop
;                        end
;                        endtry
;                    end

                    ;;Commit the request message so that we don't receive it again

                    if (%KAFKA_COMMIT(agentSettings.RequestTopic,partition,offset+1,errorText) != 0)
                    begin
                        log("ERROR: Failed to commit request: " + errorText)
;TODO: Now what? Disconnect, reconnect, try again?
                    end
                end

                ;------------------------------------------------------------------------------------------------------------------------
                ;Unsupported message

                else
                begin
                    log("WARNING: Ignoring unexpected message: " + message)

                    if (%KAFKA_COMMIT(agentSettings.RequestTopic,partition,offset+1,errorText) == 0) then
                    begin
                        nextloop
                    end
                    else
                    begin
                        log("ERROR: Failed to commit request: " + errorText)
;TODO: Now what? Disconnect, reconnect, try again?
                    end
                end

                ;------------------------------------------------------------------------------------------------------------------------
            end
        end
    end
    finally
    begin
        ;Disconnect from Kafka
        if (kafkaConnected)
        begin
            if (%KAFKA_SHUTDOWN(errorText) == 0) then
            begin
                verboselog("Disconnected from Kafka")
                kafkaConnected = false
            end
            else
                log("ERROR: Failed to disconnect from Kafka: " + errorText)
        end
    end
    endtry

    verboselog("Stopping")
    stop

endmain

;;; <summary>
;;; Add a message to the console log
;;; </summary>
;;; <param name="message">Message to add</param>
subroutine log
    required in message, string
proc
    begin
        data now, a20, %datetime
        data timestamp, string, %string(^d(now(1:14)),"XXXX-XX-XX XX:XX:XX")
        Console.WriteLine(timestamp + " " + message.Trim())
    end
    xreturn
endsubroutine

